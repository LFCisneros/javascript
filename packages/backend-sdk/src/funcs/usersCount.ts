/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClerkCore } from '../core.js';
import { encodeFormQuery } from '../lib/encodings.js';
import * as M from '../lib/matchers.js';
import { compactMap } from '../lib/primitives.js';
import { safeParse } from '../lib/schemas.js';
import { RequestOptions } from '../lib/sdks.js';
import { extractSecurity, resolveGlobalSecurity } from '../lib/security.js';
import { pathToFunc } from '../lib/url.js';
import * as components from '../models/components/index.js';
import { APIError } from '../models/errors/apierror.js';
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from '../models/errors/httpclienterrors.js';
import * as errors from '../models/errors/index.js';
import { SDKValidationError } from '../models/errors/sdkvalidationerror.js';
import * as operations from '../models/operations/index.js';
import { APICall, APIPromise } from '../types/async.js';
import { Result } from '../types/fp.js';

/**
 * Count users
 *
 * @remarks
 * Returns a total count of all users that match the given filtering criteria.
 */
export function usersCount(
  client: ClerkCore,
  request: operations.GetUsersCountRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    components.TotalCount,
    | errors.ClerkErrors
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  return new APIPromise($do(client, request, options));
}

async function $do(
  client: ClerkCore,
  request: operations.GetUsersCountRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      components.TotalCount,
      | errors.ClerkErrors
      | APIError
      | SDKValidationError
      | UnexpectedClientError
      | InvalidRequestError
      | RequestAbortedError
      | RequestTimeoutError
      | ConnectionError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    value => operations.GetUsersCountRequest$outboundSchema.parse(value),
    'Input validation failed',
  );
  if (!parsed.ok) {
    return [parsed, { status: 'invalid' }];
  }
  const payload = parsed.value;
  const body = null;

  const path = pathToFunc('/users/count')();

  const query = encodeFormQuery({
    banned: payload.banned,
    created_at_after: payload.created_at_after,
    created_at_before: payload.created_at_before,
    email_address: payload.email_address,
    email_address_query: payload.email_address_query,
    external_id: payload.external_id,
    last_active_at_after: payload.last_active_at_after,
    last_active_at_before: payload.last_active_at_before,
    last_active_at_since: payload.last_active_at_since,
    name_query: payload.name_query,
    organization_id: payload.organization_id,
    phone_number: payload.phone_number,
    phone_number_query: payload.phone_number_query,
    query: payload.query,
    user_id: payload.user_id,
    username: payload.username,
    username_query: payload.username_query,
    web3_wallet: payload.web3_wallet,
  });

  const headers = new Headers(
    compactMap({
      Accept: 'application/json',
    }),
  );

  const secConfig = await extractSecurity(client._options.bearerAuth);
  const securityInput = secConfig == null ? {} : { bearerAuth: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    baseURL: options?.serverURL ?? client._baseURL ?? '',
    operationID: 'GetUsersCount',
    oAuth2Scopes: null,

    resolvedSecurity: requestSecurity,

    securitySource: client._options.bearerAuth,
    retryConfig: options?.retries ||
      client._options.retryConfig || {
        strategy: 'backoff',
        backoff: {
          initialInterval: 500,
          maxInterval: 60000,
          exponent: 1.5,
          maxElapsedTime: 3600000,
        },
        retryConnectionErrors: true,
      } || { strategy: 'none' },
    retryCodes: options?.retryCodes || ['5XX'],
  };

  const requestRes = client._createRequest(
    context,
    {
      security: requestSecurity,
      method: 'GET',
      baseURL: options?.serverURL,
      path: path,
      headers: headers,
      query: query,
      body: body,
      timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
    },
    options,
  );
  if (!requestRes.ok) {
    return [requestRes, { status: 'invalid' }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ['422', '4XX', '5XX'],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: 'request-error', request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    components.TotalCount,
    | errors.ClerkErrors
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(200, components.TotalCount$inboundSchema),
    M.jsonErr(422, errors.ClerkErrors$inboundSchema),
    M.fail('4XX'),
    M.fail('5XX'),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: 'complete', request: req, response }];
  }

  return [result, { status: 'complete', request: req, response }];
}
