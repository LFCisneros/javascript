/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { organizationDomainsCreate } from '../funcs/organizationDomainsCreate.js';
import { organizationDomainsDelete } from '../funcs/organizationDomainsDelete.js';
import { organizationDomainsList } from '../funcs/organizationDomainsList.js';
import { organizationDomainsUpdate } from '../funcs/organizationDomainsUpdate.js';
import { ClientSDK, RequestOptions } from '../lib/sdks.js';
import * as components from '../models/components/index.js';
import * as operations from '../models/operations/index.js';
import { unwrapAsync } from '../types/fp.js';

export class OrganizationDomains extends ClientSDK {
  /**
   * Create a new organization domain.
   *
   * @remarks
   * Creates a new organization domain. By default the domain is verified, but can be optionally set to unverified.
   */
  async create(
    request: operations.CreateOrganizationDomainRequest,
    options?: RequestOptions,
  ): Promise<components.OrganizationDomain> {
    return unwrapAsync(organizationDomainsCreate(this, request, options));
  }

  /**
   * Get a list of all domains of an organization.
   *
   * @remarks
   * Get a list of all domains of an organization.
   */
  async list(
    request: operations.ListOrganizationDomainsRequest,
    options?: RequestOptions,
  ): Promise<components.OrganizationDomains> {
    return unwrapAsync(organizationDomainsList(this, request, options));
  }

  /**
   * Update an organization domain.
   *
   * @remarks
   * Updates the properties of an existing organization domain.
   */
  async update(
    request: operations.UpdateOrganizationDomainRequest,
    options?: RequestOptions,
  ): Promise<components.OrganizationDomain> {
    return unwrapAsync(organizationDomainsUpdate(this, request, options));
  }

  /**
   * Remove a domain from an organization.
   *
   * @remarks
   * Removes the given domain from the organization.
   */
  async delete(
    request: operations.DeleteOrganizationDomainRequest,
    options?: RequestOptions,
  ): Promise<components.DeletedObject> {
    return unwrapAsync(organizationDomainsDelete(this, request, options));
  }
}
