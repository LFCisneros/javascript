/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { waitlistEntriesCreate } from "../funcs/waitlistEntriesCreate.js";
import { waitlistEntriesList } from "../funcs/waitlistEntriesList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class WaitlistEntries extends ClientSDK {
  /**
   * List all waitlist entries
   *
   * @remarks
   * Retrieve a list of waitlist entries for the instance.
   * Entries are ordered by creation date in descending order by default.
   * Supports filtering by email address or status and pagination with limit and offset parameters.
   */
  async list(
    request: operations.ListWaitlistEntriesRequest,
    options?: RequestOptions,
  ): Promise<components.WaitlistEntries> {
    return unwrapAsync(waitlistEntriesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a waitlist entry
   *
   * @remarks
   * Creates a new waitlist entry for the given email address.
   * If the email address is already on the waitlist, no new entry will be created and the existing waitlist entry will be returned.
   */
  async create(
    request?: operations.CreateWaitlistEntryRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.WaitlistEntry> {
    return unwrapAsync(waitlistEntriesCreate(
      this,
      request,
      options,
    ));
  }
}
