/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { invitationsBulkCreate } from "../funcs/invitationsBulkCreate.js";
import { invitationsCreate } from "../funcs/invitationsCreate.js";
import { invitationsList } from "../funcs/invitationsList.js";
import { invitationsRevoke } from "../funcs/invitationsRevoke.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Invitations extends ClientSDK {
  /**
   * Create an invitation
   *
   * @remarks
   * Creates a new invitation for the given email address and sends the invitation email.
   * Keep in mind that you cannot create an invitation if there is already one for the given email address.
   * Also, trying to create an invitation for an email address that already exists in your application will result to an error.
   */
  async create(
    request?: operations.CreateInvitationRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.Invitation> {
    return unwrapAsync(invitationsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List all invitations
   *
   * @remarks
   * Returns all non-revoked invitations for your application, sorted by creation date
   */
  async list(
    request: operations.ListInvitationsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.Invitation>> {
    return unwrapAsync(invitationsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create multiple invitations
   *
   * @remarks
   * Use this API operation to create multiple invitations for the provided email addresses. You can choose to send the
   * invitations as emails by setting the `notify` parameter to `true`. There cannot be an existing invitation for any
   * of the email addresses you provide unless you set `ignore_existing` to `true` for specific email addresses. Please
   * note that there must be no existing user for any of the email addresses you provide, and this rule cannot be bypassed.
   */
  async bulkCreate(
    request?: Array<operations.RequestBody> | undefined,
    options?: RequestOptions,
  ): Promise<Array<components.Invitation>> {
    return unwrapAsync(invitationsBulkCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Revokes an invitation
   *
   * @remarks
   * Revokes the given invitation.
   * Revoking an invitation will prevent the user from using the invitation link that was sent to them.
   * However, it doesn't prevent the user from signing up if they follow the sign up flow.
   * Only active (i.e. non-revoked) invitations can be revoked.
   */
  async revoke(
    request: operations.RevokeInvitationRequest,
    options?: RequestOptions,
  ): Promise<components.InvitationRevoked> {
    return unwrapAsync(invitationsRevoke(
      this,
      request,
      options,
    ));
  }
}
