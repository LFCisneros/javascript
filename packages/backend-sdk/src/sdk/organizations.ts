/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { organizationsCreate } from "../funcs/organizationsCreate.js";
import { organizationsDelete } from "../funcs/organizationsDelete.js";
import { organizationsDeleteLogo } from "../funcs/organizationsDeleteLogo.js";
import { organizationsGet } from "../funcs/organizationsGet.js";
import { organizationsList } from "../funcs/organizationsList.js";
import { organizationsMergeMetadata } from "../funcs/organizationsMergeMetadata.js";
import { organizationsUpdate } from "../funcs/organizationsUpdate.js";
import { organizationsUploadLogo } from "../funcs/organizationsUploadLogo.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Organizations extends ClientSDK {
  /**
   * Get a list of organizations for an instance
   *
   * @remarks
   * This request returns the list of organizations for an instance.
   * Results can be paginated using the optional `limit` and `offset` query parameters.
   * The organizations are ordered by descending creation date.
   * Most recent organizations will be returned first.
   */
  async list(
    request: operations.ListOrganizationsRequest,
    options?: RequestOptions,
  ): Promise<components.Organizations> {
    return unwrapAsync(organizationsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an organization
   *
   * @remarks
   * Creates a new organization with the given name for an instance.
   * You can specify an optional slug for the new organization.
   * If provided, the organization slug can contain only lowercase alphanumeric characters (letters and digits) and the dash "-".
   * Organization slugs must be unique for the instance.
   * You can provide additional metadata for the organization and set any custom attribute you want.
   * Organizations support private and public metadata.
   * Private metadata can only be accessed from the Backend API.
   * Public metadata can be accessed from the Backend API, and are read-only from the Frontend API.
   * The `created_by` user will see this as their [active organization] (https://clerk.com/docs/organizations/overview#active-organization)
   * the next time they create a session, presuming they don't explicitly set a different organization as active before then.
   */
  async create(
    request?: operations.CreateOrganizationRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.Organization> {
    return unwrapAsync(organizationsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an organization by ID or slug
   *
   * @remarks
   * Fetches the organization whose ID or slug matches the provided `id_or_slug` URL query parameter.
   */
  async get(
    request: operations.GetOrganizationRequest,
    options?: RequestOptions,
  ): Promise<components.Organization> {
    return unwrapAsync(organizationsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an organization
   *
   * @remarks
   * Updates an existing organization
   */
  async update(
    request: operations.UpdateOrganizationRequest,
    options?: RequestOptions,
  ): Promise<components.Organization> {
    return unwrapAsync(organizationsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an organization
   *
   * @remarks
   * Deletes the given organization.
   * Please note that deleting an organization will also delete all memberships and invitations.
   * This is not reversible.
   */
  async delete(
    request: operations.DeleteOrganizationRequest,
    options?: RequestOptions,
  ): Promise<components.DeletedObject> {
    return unwrapAsync(organizationsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Merge and update metadata for an organization
   *
   * @remarks
   * Update organization metadata attributes by merging existing values with the provided parameters.
   * Metadata values will be updated via a deep merge.
   * Deep meaning that any nested JSON objects will be merged as well.
   * You can remove metadata keys at any level by setting their value to `null`.
   */
  async mergeMetadata(
    request: operations.MergeOrganizationMetadataRequest,
    options?: RequestOptions,
  ): Promise<components.Organization> {
    return unwrapAsync(organizationsMergeMetadata(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload a logo for the organization
   *
   * @remarks
   * Set or replace an organization's logo, by uploading an image file.
   * This endpoint uses the `multipart/form-data` request content type and accepts a file of image type.
   * The file size cannot exceed 10MB.
   * Only the following file content types are supported: `image/jpeg`, `image/png`, `image/gif`, `image/webp`, `image/x-icon`, `image/vnd.microsoft.icon`.
   */
  async uploadLogo(
    request: operations.UploadOrganizationLogoRequest,
    options?: RequestOptions,
  ): Promise<components.OrganizationWithLogo> {
    return unwrapAsync(organizationsUploadLogo(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete the organization's logo.
   *
   * @remarks
   * Delete the organization's logo.
   */
  async deleteLogo(
    request: operations.DeleteOrganizationLogoRequest,
    options?: RequestOptions,
  ): Promise<components.Organization> {
    return unwrapAsync(organizationsDeleteLogo(
      this,
      request,
      options,
    ));
  }
}
