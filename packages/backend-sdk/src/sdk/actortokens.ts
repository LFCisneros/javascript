/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { actorTokensCreate } from "../funcs/actorTokensCreate.js";
import { actorTokensRevoke } from "../funcs/actorTokensRevoke.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ActorTokens extends ClientSDK {
  /**
   * Create actor token
   *
   * @remarks
   * Create an actor token that can be used to impersonate the given user.
   * The `actor` parameter needs to include at least a "sub" key whose value is the ID of the actor (impersonating) user.
   */
  async create(
    request?: operations.CreateActorTokenRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.ActorToken> {
    return unwrapAsync(actorTokensCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Revoke actor token
   *
   * @remarks
   * Revokes a pending actor token.
   */
  async revoke(
    request: operations.RevokeActorTokenRequest,
    options?: RequestOptions,
  ): Promise<components.ActorToken> {
    return unwrapAsync(actorTokensRevoke(
      this,
      request,
      options,
    ));
  }
}
