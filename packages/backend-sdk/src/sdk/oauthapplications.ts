/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { oauthApplicationsCreate } from "../funcs/oauthApplicationsCreate.js";
import { oauthApplicationsDelete } from "../funcs/oauthApplicationsDelete.js";
import { oauthApplicationsGet } from "../funcs/oauthApplicationsGet.js";
import { oauthApplicationsList } from "../funcs/oauthApplicationsList.js";
import { oauthApplicationsRotateSecret } from "../funcs/oauthApplicationsRotateSecret.js";
import { oauthApplicationsUpdate } from "../funcs/oauthApplicationsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class OauthApplications extends ClientSDK {
  /**
   * Get a list of OAuth applications for an instance
   *
   * @remarks
   * This request returns the list of OAuth applications for an instance.
   * Results can be paginated using the optional `limit` and `offset` query parameters.
   * The OAuth applications are ordered by descending creation date.
   * Most recent OAuth applications will be returned first.
   */
  async list(
    request: operations.ListOAuthApplicationsRequest,
    options?: RequestOptions,
  ): Promise<components.OAuthApplications> {
    return unwrapAsync(oauthApplicationsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an OAuth application
   *
   * @remarks
   * Creates a new OAuth application with the given name and callback URL for an instance.
   * The callback URL must be a valid url.
   * All URL schemes are allowed such as `http://`, `https://`, `myapp://`, etc...
   */
  async create(
    request?: operations.CreateOAuthApplicationRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.OAuthApplicationWithSecret> {
    return unwrapAsync(oauthApplicationsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an OAuth application by ID
   *
   * @remarks
   * Fetches the OAuth application whose ID matches the provided `id` in the path.
   */
  async get(
    request: operations.GetOAuthApplicationRequest,
    options?: RequestOptions,
  ): Promise<components.OAuthApplication> {
    return unwrapAsync(oauthApplicationsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an OAuth application
   *
   * @remarks
   * Updates an existing OAuth application
   */
  async update(
    request: operations.UpdateOAuthApplicationRequest,
    options?: RequestOptions,
  ): Promise<components.OAuthApplication> {
    return unwrapAsync(oauthApplicationsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an OAuth application
   *
   * @remarks
   * Deletes the given OAuth application.
   * This is not reversible.
   */
  async delete(
    request: operations.DeleteOAuthApplicationRequest,
    options?: RequestOptions,
  ): Promise<components.DeletedObject> {
    return unwrapAsync(oauthApplicationsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Rotate the client secret of the given OAuth application
   *
   * @remarks
   * Rotates the OAuth application's client secret.
   * When the client secret is rotated, make sure to update it in authorized OAuth clients.
   */
  async rotateSecret(
    request: operations.RotateOAuthApplicationSecretRequest,
    options?: RequestOptions,
  ): Promise<components.OAuthApplicationWithSecret> {
    return unwrapAsync(oauthApplicationsRotateSecret(
      this,
      request,
      options,
    ));
  }
}
