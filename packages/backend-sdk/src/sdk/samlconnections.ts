/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { samlConnectionsCreate } from '../funcs/samlConnectionsCreate.js';
import { samlConnectionsDelete } from '../funcs/samlConnectionsDelete.js';
import { samlConnectionsGet } from '../funcs/samlConnectionsGet.js';
import { samlConnectionsList } from '../funcs/samlConnectionsList.js';
import { samlConnectionsUpdate } from '../funcs/samlConnectionsUpdate.js';
import { ClientSDK, RequestOptions } from '../lib/sdks.js';
import * as components from '../models/components/index.js';
import * as operations from '../models/operations/index.js';
import { unwrapAsync } from '../types/fp.js';

export class SamlConnections extends ClientSDK {
  /**
   * Get a list of SAML Connections for an instance
   *
   * @remarks
   * Returns the list of SAML Connections for an instance.
   * Results can be paginated using the optional `limit` and `offset` query parameters.
   * The SAML Connections are ordered by descending creation date and the most recent will be returned first.
   */
  async list(
    request: operations.ListSAMLConnectionsRequest,
    options?: RequestOptions,
  ): Promise<components.SAMLConnections> {
    return unwrapAsync(samlConnectionsList(this, request, options));
  }

  /**
   * Create a SAML Connection
   *
   * @remarks
   * Create a new SAML Connection.
   */
  async create(
    request?: operations.CreateSAMLConnectionRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.SchemasSAMLConnection> {
    return unwrapAsync(samlConnectionsCreate(this, request, options));
  }

  /**
   * Retrieve a SAML Connection by ID
   *
   * @remarks
   * Fetches the SAML Connection whose ID matches the provided `saml_connection_id` in the path.
   */
  async get(
    request: operations.GetSAMLConnectionRequest,
    options?: RequestOptions,
  ): Promise<components.SchemasSAMLConnection> {
    return unwrapAsync(samlConnectionsGet(this, request, options));
  }

  /**
   * Update a SAML Connection
   *
   * @remarks
   * Updates the SAML Connection whose ID matches the provided `id` in the path.
   */
  async update(
    request: operations.UpdateSAMLConnectionRequest,
    options?: RequestOptions,
  ): Promise<components.SchemasSAMLConnection> {
    return unwrapAsync(samlConnectionsUpdate(this, request, options));
  }

  /**
   * Delete a SAML Connection
   *
   * @remarks
   * Deletes the SAML Connection whose ID matches the provided `id` in the path.
   */
  async delete(
    request: operations.DeleteSAMLConnectionRequest,
    options?: RequestOptions,
  ): Promise<components.DeletedObject> {
    return unwrapAsync(samlConnectionsDelete(this, request, options));
  }
}
