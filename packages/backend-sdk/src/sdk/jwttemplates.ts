/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { jwtTemplatesCreate } from '../funcs/jwtTemplatesCreate.js';
import { jwtTemplatesDelete } from '../funcs/jwtTemplatesDelete.js';
import { jwtTemplatesGet } from '../funcs/jwtTemplatesGet.js';
import { jwtTemplatesList } from '../funcs/jwtTemplatesList.js';
import { jwtTemplatesUpdate } from '../funcs/jwtTemplatesUpdate.js';
import { ClientSDK, RequestOptions } from '../lib/sdks.js';
import * as components from '../models/components/index.js';
import * as operations from '../models/operations/index.js';
import { unwrapAsync } from '../types/fp.js';

export class JwtTemplates extends ClientSDK {
  /**
   * List all templates
   */
  async list(
    request: operations.ListJWTTemplatesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.JWTTemplate>> {
    return unwrapAsync(jwtTemplatesList(this, request, options));
  }

  /**
   * Create a JWT template
   *
   * @remarks
   * Create a new JWT template
   */
  async create(
    request?: operations.CreateJWTTemplateRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.JWTTemplate> {
    return unwrapAsync(jwtTemplatesCreate(this, request, options));
  }

  /**
   * Retrieve a template
   *
   * @remarks
   * Retrieve the details of a given JWT template
   */
  async get(request: operations.GetJWTTemplateRequest, options?: RequestOptions): Promise<components.JWTTemplate> {
    return unwrapAsync(jwtTemplatesGet(this, request, options));
  }

  /**
   * Update a JWT template
   *
   * @remarks
   * Updates an existing JWT template
   */
  async update(
    request: operations.UpdateJWTTemplateRequest,
    options?: RequestOptions,
  ): Promise<components.JWTTemplate> {
    return unwrapAsync(jwtTemplatesUpdate(this, request, options));
  }

  /**
   * Delete a Template
   */
  async delete(
    request: operations.DeleteJWTTemplateRequest,
    options?: RequestOptions,
  ): Promise<components.DeletedObject> {
    return unwrapAsync(jwtTemplatesDelete(this, request, options));
  }
}
