/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { signInTokensCreate } from '../funcs/signInTokensCreate.js';
import { signInTokensRevoke } from '../funcs/signInTokensRevoke.js';
import { ClientSDK, RequestOptions } from '../lib/sdks.js';
import * as components from '../models/components/index.js';
import * as operations from '../models/operations/index.js';
import { unwrapAsync } from '../types/fp.js';

export class SignInTokens extends ClientSDK {
  /**
   * Create sign-in token
   *
   * @remarks
   * Creates a new sign-in token and associates it with the given user.
   * By default, sign-in tokens expire in 30 days.
   * You can optionally supply a different duration in seconds using the `expires_in_seconds` property.
   */
  async create(
    request?: operations.CreateSignInTokenRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.SignInToken> {
    return unwrapAsync(signInTokensCreate(this, request, options));
  }

  /**
   * Revoke the given sign-in token
   *
   * @remarks
   * Revokes a pending sign-in token
   */
  async revoke(
    request: operations.RevokeSignInTokenRequest,
    options?: RequestOptions,
  ): Promise<components.SignInToken> {
    return unwrapAsync(signInTokensRevoke(this, request, options));
  }
}
