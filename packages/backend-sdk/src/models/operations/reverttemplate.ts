/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of template to revert
 */
export const RevertTemplatePathParamTemplateType = {
  Email: "email",
  Sms: "sms",
} as const;
/**
 * The type of template to revert
 */
export type RevertTemplatePathParamTemplateType = ClosedEnum<
  typeof RevertTemplatePathParamTemplateType
>;

export type RevertTemplateRequest = {
  /**
   * The type of template to revert
   */
  templateType: RevertTemplatePathParamTemplateType;
  /**
   * The slug of the template to revert
   */
  slug: string;
};

/** @internal */
export const RevertTemplatePathParamTemplateType$inboundSchema: z.ZodNativeEnum<
  typeof RevertTemplatePathParamTemplateType
> = z.nativeEnum(RevertTemplatePathParamTemplateType);

/** @internal */
export const RevertTemplatePathParamTemplateType$outboundSchema:
  z.ZodNativeEnum<typeof RevertTemplatePathParamTemplateType> =
    RevertTemplatePathParamTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RevertTemplatePathParamTemplateType$ {
  /** @deprecated use `RevertTemplatePathParamTemplateType$inboundSchema` instead. */
  export const inboundSchema =
    RevertTemplatePathParamTemplateType$inboundSchema;
  /** @deprecated use `RevertTemplatePathParamTemplateType$outboundSchema` instead. */
  export const outboundSchema =
    RevertTemplatePathParamTemplateType$outboundSchema;
}

/** @internal */
export const RevertTemplateRequest$inboundSchema: z.ZodType<
  RevertTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  template_type: RevertTemplatePathParamTemplateType$inboundSchema,
  slug: z.string(),
}).transform((v) => {
  return remap$(v, {
    "template_type": "templateType",
  });
});

/** @internal */
export type RevertTemplateRequest$Outbound = {
  template_type: string;
  slug: string;
};

/** @internal */
export const RevertTemplateRequest$outboundSchema: z.ZodType<
  RevertTemplateRequest$Outbound,
  z.ZodTypeDef,
  RevertTemplateRequest
> = z.object({
  templateType: RevertTemplatePathParamTemplateType$outboundSchema,
  slug: z.string(),
}).transform((v) => {
  return remap$(v, {
    templateType: "template_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RevertTemplateRequest$ {
  /** @deprecated use `RevertTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = RevertTemplateRequest$inboundSchema;
  /** @deprecated use `RevertTemplateRequest$outboundSchema` instead. */
  export const outboundSchema = RevertTemplateRequest$outboundSchema;
  /** @deprecated use `RevertTemplateRequest$Outbound` instead. */
  export type Outbound = RevertTemplateRequest$Outbound;
}

export function revertTemplateRequestToJSON(
  revertTemplateRequest: RevertTemplateRequest,
): string {
  return JSON.stringify(
    RevertTemplateRequest$outboundSchema.parse(revertTemplateRequest),
  );
}

export function revertTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<RevertTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RevertTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RevertTemplateRequest' from JSON`,
  );
}
