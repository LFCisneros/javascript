/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type InstanceGetOrganizationMembershipsRequest = {
  /**
   * Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username.
   *
   * @remarks
   * By prepending one of those values with + or -,
   * we can choose to sort in ascending (ASC) or descending (DESC) order.
   */
  orderBy?: string | undefined;
  /**
   * Applies a limit to the number of results returned.
   *
   * @remarks
   * Can be used for paginating the results together with `offset`.
   */
  limit?: number | undefined;
  /**
   * Skip the first `offset` results when paginating.
   *
   * @remarks
   * Needs to be an integer greater or equal to zero.
   * To be used in conjunction with `limit`.
   */
  offset?: number | undefined;
};

/** @internal */
export const InstanceGetOrganizationMembershipsRequest$inboundSchema: z.ZodType<
  InstanceGetOrganizationMembershipsRequest,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    order_by: z.string().optional(),
    limit: z.number().int().default(10),
    offset: z.number().int().default(0),
  })
  .transform(v => {
    return remap$(v, {
      order_by: 'orderBy',
    });
  });

/** @internal */
export type InstanceGetOrganizationMembershipsRequest$Outbound = {
  order_by?: string | undefined;
  limit: number;
  offset: number;
};

/** @internal */
export const InstanceGetOrganizationMembershipsRequest$outboundSchema: z.ZodType<
  InstanceGetOrganizationMembershipsRequest$Outbound,
  z.ZodTypeDef,
  InstanceGetOrganizationMembershipsRequest
> = z
  .object({
    orderBy: z.string().optional(),
    limit: z.number().int().default(10),
    offset: z.number().int().default(0),
  })
  .transform(v => {
    return remap$(v, {
      orderBy: 'order_by',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstanceGetOrganizationMembershipsRequest$ {
  /** @deprecated use `InstanceGetOrganizationMembershipsRequest$inboundSchema` instead. */
  export const inboundSchema = InstanceGetOrganizationMembershipsRequest$inboundSchema;
  /** @deprecated use `InstanceGetOrganizationMembershipsRequest$outboundSchema` instead. */
  export const outboundSchema = InstanceGetOrganizationMembershipsRequest$outboundSchema;
  /** @deprecated use `InstanceGetOrganizationMembershipsRequest$Outbound` instead. */
  export type Outbound = InstanceGetOrganizationMembershipsRequest$Outbound;
}

export function instanceGetOrganizationMembershipsRequestToJSON(
  instanceGetOrganizationMembershipsRequest: InstanceGetOrganizationMembershipsRequest,
): string {
  return JSON.stringify(
    InstanceGetOrganizationMembershipsRequest$outboundSchema.parse(instanceGetOrganizationMembershipsRequest),
  );
}

export function instanceGetOrganizationMembershipsRequestFromJSON(
  jsonString: string,
): SafeParseResult<InstanceGetOrganizationMembershipsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => InstanceGetOrganizationMembershipsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstanceGetOrganizationMembershipsRequest' from JSON`,
  );
}
