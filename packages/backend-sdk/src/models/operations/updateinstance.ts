/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type UpdateInstanceRequestBody = {
  /**
   * Toggles test mode for this instance, allowing the use of test email addresses and phone numbers.
   *
   * @remarks
   * Defaults to true for development instances.
   */
  testMode?: boolean | null | undefined;
  /**
   * Whether the instance should be using the HIBP service to check passwords for breaches
   */
  hibp?: boolean | null | undefined;
  /**
   * The "enhanced_email_deliverability" feature will send emails from "verifications@clerk.dev" instead of your domain.
   *
   * @remarks
   * This can be helpful if you do not have a high domain reputation.
   */
  enhancedEmailDeliverability?: boolean | null | undefined;
  supportEmail?: string | null | undefined;
  clerkJsVersion?: string | null | undefined;
  developmentOrigin?: string | null | undefined;
  /**
   * For browser-like stacks such as browser extensions, Electron, or Capacitor.js the instance allowed origins need to be updated with the request origin value.
   *
   * @remarks
   * For Chrome extensions popup, background, or service worker pages the origin is chrome-extension://extension_uiid. For Electron apps the default origin is http://localhost:3000. For Capacitor, the origin is capacitor://localhost.
   */
  allowedOrigins?: Array<string> | undefined;
  /**
   * Whether the instance should operate in cookieless development mode (i.e. without third-party cookies).
   *
   * @remarks
   * Deprecated: Please use `url_based_session_syncing` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  cookielessDev?: boolean | null | undefined;
  /**
   * Whether the instance should use URL-based session syncing in development mode (i.e. without third-party cookies).
   */
  urlBasedSessionSyncing?: boolean | null | undefined;
};

/** @internal */
export const UpdateInstanceRequestBody$inboundSchema: z.ZodType<UpdateInstanceRequestBody, z.ZodTypeDef, unknown> = z
  .object({
    test_mode: z.nullable(z.boolean()).optional(),
    hibp: z.nullable(z.boolean()).optional(),
    enhanced_email_deliverability: z.nullable(z.boolean()).optional(),
    support_email: z.nullable(z.string()).optional(),
    clerk_js_version: z.nullable(z.string()).optional(),
    development_origin: z.nullable(z.string()).optional(),
    allowed_origins: z.array(z.string()).optional(),
    cookieless_dev: z.nullable(z.boolean()).optional(),
    url_based_session_syncing: z.nullable(z.boolean()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      test_mode: 'testMode',
      enhanced_email_deliverability: 'enhancedEmailDeliverability',
      support_email: 'supportEmail',
      clerk_js_version: 'clerkJsVersion',
      development_origin: 'developmentOrigin',
      allowed_origins: 'allowedOrigins',
      cookieless_dev: 'cookielessDev',
      url_based_session_syncing: 'urlBasedSessionSyncing',
    });
  });

/** @internal */
export type UpdateInstanceRequestBody$Outbound = {
  test_mode?: boolean | null | undefined;
  hibp?: boolean | null | undefined;
  enhanced_email_deliverability?: boolean | null | undefined;
  support_email?: string | null | undefined;
  clerk_js_version?: string | null | undefined;
  development_origin?: string | null | undefined;
  allowed_origins?: Array<string> | undefined;
  cookieless_dev?: boolean | null | undefined;
  url_based_session_syncing?: boolean | null | undefined;
};

/** @internal */
export const UpdateInstanceRequestBody$outboundSchema: z.ZodType<
  UpdateInstanceRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateInstanceRequestBody
> = z
  .object({
    testMode: z.nullable(z.boolean()).optional(),
    hibp: z.nullable(z.boolean()).optional(),
    enhancedEmailDeliverability: z.nullable(z.boolean()).optional(),
    supportEmail: z.nullable(z.string()).optional(),
    clerkJsVersion: z.nullable(z.string()).optional(),
    developmentOrigin: z.nullable(z.string()).optional(),
    allowedOrigins: z.array(z.string()).optional(),
    cookielessDev: z.nullable(z.boolean()).optional(),
    urlBasedSessionSyncing: z.nullable(z.boolean()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      testMode: 'test_mode',
      enhancedEmailDeliverability: 'enhanced_email_deliverability',
      supportEmail: 'support_email',
      clerkJsVersion: 'clerk_js_version',
      developmentOrigin: 'development_origin',
      allowedOrigins: 'allowed_origins',
      cookielessDev: 'cookieless_dev',
      urlBasedSessionSyncing: 'url_based_session_syncing',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstanceRequestBody$ {
  /** @deprecated use `UpdateInstanceRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateInstanceRequestBody$inboundSchema;
  /** @deprecated use `UpdateInstanceRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateInstanceRequestBody$outboundSchema;
  /** @deprecated use `UpdateInstanceRequestBody$Outbound` instead. */
  export type Outbound = UpdateInstanceRequestBody$Outbound;
}

export function updateInstanceRequestBodyToJSON(updateInstanceRequestBody: UpdateInstanceRequestBody): string {
  return JSON.stringify(UpdateInstanceRequestBody$outboundSchema.parse(updateInstanceRequestBody));
}

export function updateInstanceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstanceRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    x => UpdateInstanceRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstanceRequestBody' from JSON`,
  );
}
