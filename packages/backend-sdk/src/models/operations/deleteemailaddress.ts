/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteEmailAddressRequest = {
  /**
   * The ID of the email address to delete
   */
  emailAddressId: string;
};

/** @internal */
export const DeleteEmailAddressRequest$inboundSchema: z.ZodType<
  DeleteEmailAddressRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  email_address_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "email_address_id": "emailAddressId",
  });
});

/** @internal */
export type DeleteEmailAddressRequest$Outbound = {
  email_address_id: string;
};

/** @internal */
export const DeleteEmailAddressRequest$outboundSchema: z.ZodType<
  DeleteEmailAddressRequest$Outbound,
  z.ZodTypeDef,
  DeleteEmailAddressRequest
> = z.object({
  emailAddressId: z.string(),
}).transform((v) => {
  return remap$(v, {
    emailAddressId: "email_address_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteEmailAddressRequest$ {
  /** @deprecated use `DeleteEmailAddressRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteEmailAddressRequest$inboundSchema;
  /** @deprecated use `DeleteEmailAddressRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteEmailAddressRequest$outboundSchema;
  /** @deprecated use `DeleteEmailAddressRequest$Outbound` instead. */
  export type Outbound = DeleteEmailAddressRequest$Outbound;
}

export function deleteEmailAddressRequestToJSON(
  deleteEmailAddressRequest: DeleteEmailAddressRequest,
): string {
  return JSON.stringify(
    DeleteEmailAddressRequest$outboundSchema.parse(deleteEmailAddressRequest),
  );
}

export function deleteEmailAddressRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteEmailAddressRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteEmailAddressRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteEmailAddressRequest' from JSON`,
  );
}
