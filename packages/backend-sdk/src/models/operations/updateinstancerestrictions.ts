/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type UpdateInstanceRestrictionsRequestBody = {
  allowlist?: boolean | null | undefined;
  blocklist?: boolean | null | undefined;
  blockEmailSubaddresses?: boolean | null | undefined;
  blockDisposableEmailDomains?: boolean | null | undefined;
  ignoreDotsForGmailAddresses?: boolean | null | undefined;
};

/** @internal */
export const UpdateInstanceRestrictionsRequestBody$inboundSchema: z.ZodType<
  UpdateInstanceRestrictionsRequestBody,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    allowlist: z.nullable(z.boolean()).optional(),
    blocklist: z.nullable(z.boolean()).optional(),
    block_email_subaddresses: z.nullable(z.boolean()).optional(),
    block_disposable_email_domains: z.nullable(z.boolean()).optional(),
    ignore_dots_for_gmail_addresses: z.nullable(z.boolean()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      block_email_subaddresses: 'blockEmailSubaddresses',
      block_disposable_email_domains: 'blockDisposableEmailDomains',
      ignore_dots_for_gmail_addresses: 'ignoreDotsForGmailAddresses',
    });
  });

/** @internal */
export type UpdateInstanceRestrictionsRequestBody$Outbound = {
  allowlist?: boolean | null | undefined;
  blocklist?: boolean | null | undefined;
  block_email_subaddresses?: boolean | null | undefined;
  block_disposable_email_domains?: boolean | null | undefined;
  ignore_dots_for_gmail_addresses?: boolean | null | undefined;
};

/** @internal */
export const UpdateInstanceRestrictionsRequestBody$outboundSchema: z.ZodType<
  UpdateInstanceRestrictionsRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateInstanceRestrictionsRequestBody
> = z
  .object({
    allowlist: z.nullable(z.boolean()).optional(),
    blocklist: z.nullable(z.boolean()).optional(),
    blockEmailSubaddresses: z.nullable(z.boolean()).optional(),
    blockDisposableEmailDomains: z.nullable(z.boolean()).optional(),
    ignoreDotsForGmailAddresses: z.nullable(z.boolean()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      blockEmailSubaddresses: 'block_email_subaddresses',
      blockDisposableEmailDomains: 'block_disposable_email_domains',
      ignoreDotsForGmailAddresses: 'ignore_dots_for_gmail_addresses',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstanceRestrictionsRequestBody$ {
  /** @deprecated use `UpdateInstanceRestrictionsRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateInstanceRestrictionsRequestBody$inboundSchema;
  /** @deprecated use `UpdateInstanceRestrictionsRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateInstanceRestrictionsRequestBody$outboundSchema;
  /** @deprecated use `UpdateInstanceRestrictionsRequestBody$Outbound` instead. */
  export type Outbound = UpdateInstanceRestrictionsRequestBody$Outbound;
}

export function updateInstanceRestrictionsRequestBodyToJSON(
  updateInstanceRestrictionsRequestBody: UpdateInstanceRestrictionsRequestBody,
): string {
  return JSON.stringify(
    UpdateInstanceRestrictionsRequestBody$outboundSchema.parse(updateInstanceRestrictionsRequestBody),
  );
}

export function updateInstanceRestrictionsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstanceRestrictionsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    x => UpdateInstanceRestrictionsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstanceRestrictionsRequestBody' from JSON`,
  );
}
