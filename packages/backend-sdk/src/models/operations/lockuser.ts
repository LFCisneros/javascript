/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LockUserRequest = {
  /**
   * The ID of the user to lock
   */
  userId: string;
};

/** @internal */
export const LockUserRequest$inboundSchema: z.ZodType<
  LockUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
  });
});

/** @internal */
export type LockUserRequest$Outbound = {
  user_id: string;
};

/** @internal */
export const LockUserRequest$outboundSchema: z.ZodType<
  LockUserRequest$Outbound,
  z.ZodTypeDef,
  LockUserRequest
> = z.object({
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LockUserRequest$ {
  /** @deprecated use `LockUserRequest$inboundSchema` instead. */
  export const inboundSchema = LockUserRequest$inboundSchema;
  /** @deprecated use `LockUserRequest$outboundSchema` instead. */
  export const outboundSchema = LockUserRequest$outboundSchema;
  /** @deprecated use `LockUserRequest$Outbound` instead. */
  export type Outbound = LockUserRequest$Outbound;
}

export function lockUserRequestToJSON(
  lockUserRequest: LockUserRequest,
): string {
  return JSON.stringify(LockUserRequest$outboundSchema.parse(lockUserRequest));
}

export function lockUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<LockUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LockUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LockUserRequest' from JSON`,
  );
}
