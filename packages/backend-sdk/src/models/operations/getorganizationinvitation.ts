/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetOrganizationInvitationRequest = {
  /**
   * The organization ID.
   */
  organizationId: string;
  /**
   * The organization invitation ID.
   */
  invitationId: string;
};

/** @internal */
export const GetOrganizationInvitationRequest$inboundSchema: z.ZodType<
  GetOrganizationInvitationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string(),
  invitation_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "invitation_id": "invitationId",
  });
});

/** @internal */
export type GetOrganizationInvitationRequest$Outbound = {
  organization_id: string;
  invitation_id: string;
};

/** @internal */
export const GetOrganizationInvitationRequest$outboundSchema: z.ZodType<
  GetOrganizationInvitationRequest$Outbound,
  z.ZodTypeDef,
  GetOrganizationInvitationRequest
> = z.object({
  organizationId: z.string(),
  invitationId: z.string(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    invitationId: "invitation_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrganizationInvitationRequest$ {
  /** @deprecated use `GetOrganizationInvitationRequest$inboundSchema` instead. */
  export const inboundSchema = GetOrganizationInvitationRequest$inboundSchema;
  /** @deprecated use `GetOrganizationInvitationRequest$outboundSchema` instead. */
  export const outboundSchema = GetOrganizationInvitationRequest$outboundSchema;
  /** @deprecated use `GetOrganizationInvitationRequest$Outbound` instead. */
  export type Outbound = GetOrganizationInvitationRequest$Outbound;
}

export function getOrganizationInvitationRequestToJSON(
  getOrganizationInvitationRequest: GetOrganizationInvitationRequest,
): string {
  return JSON.stringify(
    GetOrganizationInvitationRequest$outboundSchema.parse(
      getOrganizationInvitationRequest,
    ),
  );
}

export function getOrganizationInvitationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOrganizationInvitationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrganizationInvitationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrganizationInvitationRequest' from JSON`,
  );
}
