/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type CreateSessionRequestBody = {
  /**
   * The ID representing the user
   */
  userId: string;
};

/** @internal */
export const CreateSessionRequestBody$inboundSchema: z.ZodType<CreateSessionRequestBody, z.ZodTypeDef, unknown> = z
  .object({
    user_id: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      user_id: 'userId',
    });
  });

/** @internal */
export type CreateSessionRequestBody$Outbound = {
  user_id: string;
};

/** @internal */
export const CreateSessionRequestBody$outboundSchema: z.ZodType<
  CreateSessionRequestBody$Outbound,
  z.ZodTypeDef,
  CreateSessionRequestBody
> = z
  .object({
    userId: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      userId: 'user_id',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSessionRequestBody$ {
  /** @deprecated use `CreateSessionRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateSessionRequestBody$inboundSchema;
  /** @deprecated use `CreateSessionRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateSessionRequestBody$outboundSchema;
  /** @deprecated use `CreateSessionRequestBody$Outbound` instead. */
  export type Outbound = CreateSessionRequestBody$Outbound;
}

export function createSessionRequestBodyToJSON(createSessionRequestBody: CreateSessionRequestBody): string {
  return JSON.stringify(CreateSessionRequestBody$outboundSchema.parse(createSessionRequestBody));
}

export function createSessionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateSessionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    x => CreateSessionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSessionRequestBody' from JSON`,
  );
}
