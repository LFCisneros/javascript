/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type CreateOrganizationMembershipRequestBody = {
  /**
   * The ID of the user that will be added as a member in the organization.
   *
   * @remarks
   * The user needs to exist in the same instance as the organization and must not be a member of the given organization already.
   */
  userId: string;
  /**
   * The role that the new member will have in the organization.
   */
  role: string;
};

export type CreateOrganizationMembershipRequest = {
  /**
   * The ID of the organization where the new membership will be created
   */
  organizationId: string;
  requestBody: CreateOrganizationMembershipRequestBody;
};

/** @internal */
export const CreateOrganizationMembershipRequestBody$inboundSchema: z.ZodType<
  CreateOrganizationMembershipRequestBody,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    user_id: z.string(),
    role: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      user_id: 'userId',
    });
  });

/** @internal */
export type CreateOrganizationMembershipRequestBody$Outbound = {
  user_id: string;
  role: string;
};

/** @internal */
export const CreateOrganizationMembershipRequestBody$outboundSchema: z.ZodType<
  CreateOrganizationMembershipRequestBody$Outbound,
  z.ZodTypeDef,
  CreateOrganizationMembershipRequestBody
> = z
  .object({
    userId: z.string(),
    role: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      userId: 'user_id',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrganizationMembershipRequestBody$ {
  /** @deprecated use `CreateOrganizationMembershipRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateOrganizationMembershipRequestBody$inboundSchema;
  /** @deprecated use `CreateOrganizationMembershipRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateOrganizationMembershipRequestBody$outboundSchema;
  /** @deprecated use `CreateOrganizationMembershipRequestBody$Outbound` instead. */
  export type Outbound = CreateOrganizationMembershipRequestBody$Outbound;
}

export function createOrganizationMembershipRequestBodyToJSON(
  createOrganizationMembershipRequestBody: CreateOrganizationMembershipRequestBody,
): string {
  return JSON.stringify(
    CreateOrganizationMembershipRequestBody$outboundSchema.parse(createOrganizationMembershipRequestBody),
  );
}

export function createOrganizationMembershipRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrganizationMembershipRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    x => CreateOrganizationMembershipRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrganizationMembershipRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateOrganizationMembershipRequest$inboundSchema: z.ZodType<
  CreateOrganizationMembershipRequest,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    organization_id: z.string(),
    RequestBody: z.lazy(() => CreateOrganizationMembershipRequestBody$inboundSchema),
  })
  .transform(v => {
    return remap$(v, {
      organization_id: 'organizationId',
      RequestBody: 'requestBody',
    });
  });

/** @internal */
export type CreateOrganizationMembershipRequest$Outbound = {
  organization_id: string;
  RequestBody: CreateOrganizationMembershipRequestBody$Outbound;
};

/** @internal */
export const CreateOrganizationMembershipRequest$outboundSchema: z.ZodType<
  CreateOrganizationMembershipRequest$Outbound,
  z.ZodTypeDef,
  CreateOrganizationMembershipRequest
> = z
  .object({
    organizationId: z.string(),
    requestBody: z.lazy(() => CreateOrganizationMembershipRequestBody$outboundSchema),
  })
  .transform(v => {
    return remap$(v, {
      organizationId: 'organization_id',
      requestBody: 'RequestBody',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrganizationMembershipRequest$ {
  /** @deprecated use `CreateOrganizationMembershipRequest$inboundSchema` instead. */
  export const inboundSchema = CreateOrganizationMembershipRequest$inboundSchema;
  /** @deprecated use `CreateOrganizationMembershipRequest$outboundSchema` instead. */
  export const outboundSchema = CreateOrganizationMembershipRequest$outboundSchema;
  /** @deprecated use `CreateOrganizationMembershipRequest$Outbound` instead. */
  export type Outbound = CreateOrganizationMembershipRequest$Outbound;
}

export function createOrganizationMembershipRequestToJSON(
  createOrganizationMembershipRequest: CreateOrganizationMembershipRequest,
): string {
  return JSON.stringify(CreateOrganizationMembershipRequest$outboundSchema.parse(createOrganizationMembershipRequest));
}

export function createOrganizationMembershipRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrganizationMembershipRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => CreateOrganizationMembershipRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrganizationMembershipRequest' from JSON`,
  );
}
