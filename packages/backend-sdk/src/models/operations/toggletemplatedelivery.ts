/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of template to toggle delivery for
 */
export const ToggleTemplateDeliveryPathParamTemplateType = {
  Email: "email",
  Sms: "sms",
} as const;
/**
 * The type of template to toggle delivery for
 */
export type ToggleTemplateDeliveryPathParamTemplateType = ClosedEnum<
  typeof ToggleTemplateDeliveryPathParamTemplateType
>;

export type ToggleTemplateDeliveryRequestBody = {
  /**
   * Whether Clerk should deliver emails or SMS messages based on the current template
   */
  deliveredByClerk?: boolean | undefined;
};

export type ToggleTemplateDeliveryRequest = {
  /**
   * The type of template to toggle delivery for
   */
  templateType: ToggleTemplateDeliveryPathParamTemplateType;
  /**
   * The slug of the template for which to toggle delivery
   */
  slug: string;
  requestBody?: ToggleTemplateDeliveryRequestBody | undefined;
};

/** @internal */
export const ToggleTemplateDeliveryPathParamTemplateType$inboundSchema:
  z.ZodNativeEnum<typeof ToggleTemplateDeliveryPathParamTemplateType> = z
    .nativeEnum(ToggleTemplateDeliveryPathParamTemplateType);

/** @internal */
export const ToggleTemplateDeliveryPathParamTemplateType$outboundSchema:
  z.ZodNativeEnum<typeof ToggleTemplateDeliveryPathParamTemplateType> =
    ToggleTemplateDeliveryPathParamTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToggleTemplateDeliveryPathParamTemplateType$ {
  /** @deprecated use `ToggleTemplateDeliveryPathParamTemplateType$inboundSchema` instead. */
  export const inboundSchema =
    ToggleTemplateDeliveryPathParamTemplateType$inboundSchema;
  /** @deprecated use `ToggleTemplateDeliveryPathParamTemplateType$outboundSchema` instead. */
  export const outboundSchema =
    ToggleTemplateDeliveryPathParamTemplateType$outboundSchema;
}

/** @internal */
export const ToggleTemplateDeliveryRequestBody$inboundSchema: z.ZodType<
  ToggleTemplateDeliveryRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  delivered_by_clerk: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "delivered_by_clerk": "deliveredByClerk",
  });
});

/** @internal */
export type ToggleTemplateDeliveryRequestBody$Outbound = {
  delivered_by_clerk?: boolean | undefined;
};

/** @internal */
export const ToggleTemplateDeliveryRequestBody$outboundSchema: z.ZodType<
  ToggleTemplateDeliveryRequestBody$Outbound,
  z.ZodTypeDef,
  ToggleTemplateDeliveryRequestBody
> = z.object({
  deliveredByClerk: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    deliveredByClerk: "delivered_by_clerk",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToggleTemplateDeliveryRequestBody$ {
  /** @deprecated use `ToggleTemplateDeliveryRequestBody$inboundSchema` instead. */
  export const inboundSchema = ToggleTemplateDeliveryRequestBody$inboundSchema;
  /** @deprecated use `ToggleTemplateDeliveryRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    ToggleTemplateDeliveryRequestBody$outboundSchema;
  /** @deprecated use `ToggleTemplateDeliveryRequestBody$Outbound` instead. */
  export type Outbound = ToggleTemplateDeliveryRequestBody$Outbound;
}

export function toggleTemplateDeliveryRequestBodyToJSON(
  toggleTemplateDeliveryRequestBody: ToggleTemplateDeliveryRequestBody,
): string {
  return JSON.stringify(
    ToggleTemplateDeliveryRequestBody$outboundSchema.parse(
      toggleTemplateDeliveryRequestBody,
    ),
  );
}

export function toggleTemplateDeliveryRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ToggleTemplateDeliveryRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToggleTemplateDeliveryRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToggleTemplateDeliveryRequestBody' from JSON`,
  );
}

/** @internal */
export const ToggleTemplateDeliveryRequest$inboundSchema: z.ZodType<
  ToggleTemplateDeliveryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  template_type: ToggleTemplateDeliveryPathParamTemplateType$inboundSchema,
  slug: z.string(),
  RequestBody: z.lazy(() => ToggleTemplateDeliveryRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "template_type": "templateType",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ToggleTemplateDeliveryRequest$Outbound = {
  template_type: string;
  slug: string;
  RequestBody?: ToggleTemplateDeliveryRequestBody$Outbound | undefined;
};

/** @internal */
export const ToggleTemplateDeliveryRequest$outboundSchema: z.ZodType<
  ToggleTemplateDeliveryRequest$Outbound,
  z.ZodTypeDef,
  ToggleTemplateDeliveryRequest
> = z.object({
  templateType: ToggleTemplateDeliveryPathParamTemplateType$outboundSchema,
  slug: z.string(),
  requestBody: z.lazy(() => ToggleTemplateDeliveryRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    templateType: "template_type",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToggleTemplateDeliveryRequest$ {
  /** @deprecated use `ToggleTemplateDeliveryRequest$inboundSchema` instead. */
  export const inboundSchema = ToggleTemplateDeliveryRequest$inboundSchema;
  /** @deprecated use `ToggleTemplateDeliveryRequest$outboundSchema` instead. */
  export const outboundSchema = ToggleTemplateDeliveryRequest$outboundSchema;
  /** @deprecated use `ToggleTemplateDeliveryRequest$Outbound` instead. */
  export type Outbound = ToggleTemplateDeliveryRequest$Outbound;
}

export function toggleTemplateDeliveryRequestToJSON(
  toggleTemplateDeliveryRequest: ToggleTemplateDeliveryRequest,
): string {
  return JSON.stringify(
    ToggleTemplateDeliveryRequest$outboundSchema.parse(
      toggleTemplateDeliveryRequest,
    ),
  );
}

export function toggleTemplateDeliveryRequestFromJSON(
  jsonString: string,
): SafeParseResult<ToggleTemplateDeliveryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToggleTemplateDeliveryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToggleTemplateDeliveryRequest' from JSON`,
  );
}
