/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteJWTTemplateRequest = {
  /**
   * JWT Template ID
   */
  templateId: string;
};

/** @internal */
export const DeleteJWTTemplateRequest$inboundSchema: z.ZodType<
  DeleteJWTTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  template_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "template_id": "templateId",
  });
});

/** @internal */
export type DeleteJWTTemplateRequest$Outbound = {
  template_id: string;
};

/** @internal */
export const DeleteJWTTemplateRequest$outboundSchema: z.ZodType<
  DeleteJWTTemplateRequest$Outbound,
  z.ZodTypeDef,
  DeleteJWTTemplateRequest
> = z.object({
  templateId: z.string(),
}).transform((v) => {
  return remap$(v, {
    templateId: "template_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteJWTTemplateRequest$ {
  /** @deprecated use `DeleteJWTTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteJWTTemplateRequest$inboundSchema;
  /** @deprecated use `DeleteJWTTemplateRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteJWTTemplateRequest$outboundSchema;
  /** @deprecated use `DeleteJWTTemplateRequest$Outbound` instead. */
  export type Outbound = DeleteJWTTemplateRequest$Outbound;
}

export function deleteJWTTemplateRequestToJSON(
  deleteJWTTemplateRequest: DeleteJWTTemplateRequest,
): string {
  return JSON.stringify(
    DeleteJWTTemplateRequest$outboundSchema.parse(deleteJWTTemplateRequest),
  );
}

export function deleteJWTTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteJWTTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteJWTTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteJWTTemplateRequest' from JSON`,
  );
}
