/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RevokeInvitationRequest = {
  /**
   * The ID of the invitation to be revoked
   */
  invitationId: string;
};

/** @internal */
export const RevokeInvitationRequest$inboundSchema: z.ZodType<
  RevokeInvitationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  invitation_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "invitation_id": "invitationId",
  });
});

/** @internal */
export type RevokeInvitationRequest$Outbound = {
  invitation_id: string;
};

/** @internal */
export const RevokeInvitationRequest$outboundSchema: z.ZodType<
  RevokeInvitationRequest$Outbound,
  z.ZodTypeDef,
  RevokeInvitationRequest
> = z.object({
  invitationId: z.string(),
}).transform((v) => {
  return remap$(v, {
    invitationId: "invitation_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RevokeInvitationRequest$ {
  /** @deprecated use `RevokeInvitationRequest$inboundSchema` instead. */
  export const inboundSchema = RevokeInvitationRequest$inboundSchema;
  /** @deprecated use `RevokeInvitationRequest$outboundSchema` instead. */
  export const outboundSchema = RevokeInvitationRequest$outboundSchema;
  /** @deprecated use `RevokeInvitationRequest$Outbound` instead. */
  export type Outbound = RevokeInvitationRequest$Outbound;
}

export function revokeInvitationRequestToJSON(
  revokeInvitationRequest: RevokeInvitationRequest,
): string {
  return JSON.stringify(
    RevokeInvitationRequest$outboundSchema.parse(revokeInvitationRequest),
  );
}

export function revokeInvitationRequestFromJSON(
  jsonString: string,
): SafeParseResult<RevokeInvitationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RevokeInvitationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RevokeInvitationRequest' from JSON`,
  );
}
