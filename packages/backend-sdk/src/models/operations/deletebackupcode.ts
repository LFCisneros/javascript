/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteBackupCodeRequest = {
  /**
   * The ID of the user whose backup codes are to be deleted.
   */
  userId: string;
};

/**
 * Successful operation.
 */
export type DeleteBackupCodeResponseBody = {
  userId?: string | undefined;
};

/** @internal */
export const DeleteBackupCodeRequest$inboundSchema: z.ZodType<
  DeleteBackupCodeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
  });
});

/** @internal */
export type DeleteBackupCodeRequest$Outbound = {
  user_id: string;
};

/** @internal */
export const DeleteBackupCodeRequest$outboundSchema: z.ZodType<
  DeleteBackupCodeRequest$Outbound,
  z.ZodTypeDef,
  DeleteBackupCodeRequest
> = z.object({
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteBackupCodeRequest$ {
  /** @deprecated use `DeleteBackupCodeRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteBackupCodeRequest$inboundSchema;
  /** @deprecated use `DeleteBackupCodeRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteBackupCodeRequest$outboundSchema;
  /** @deprecated use `DeleteBackupCodeRequest$Outbound` instead. */
  export type Outbound = DeleteBackupCodeRequest$Outbound;
}

export function deleteBackupCodeRequestToJSON(
  deleteBackupCodeRequest: DeleteBackupCodeRequest,
): string {
  return JSON.stringify(
    DeleteBackupCodeRequest$outboundSchema.parse(deleteBackupCodeRequest),
  );
}

export function deleteBackupCodeRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteBackupCodeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteBackupCodeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteBackupCodeRequest' from JSON`,
  );
}

/** @internal */
export const DeleteBackupCodeResponseBody$inboundSchema: z.ZodType<
  DeleteBackupCodeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
  });
});

/** @internal */
export type DeleteBackupCodeResponseBody$Outbound = {
  user_id?: string | undefined;
};

/** @internal */
export const DeleteBackupCodeResponseBody$outboundSchema: z.ZodType<
  DeleteBackupCodeResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteBackupCodeResponseBody
> = z.object({
  userId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteBackupCodeResponseBody$ {
  /** @deprecated use `DeleteBackupCodeResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteBackupCodeResponseBody$inboundSchema;
  /** @deprecated use `DeleteBackupCodeResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteBackupCodeResponseBody$outboundSchema;
  /** @deprecated use `DeleteBackupCodeResponseBody$Outbound` instead. */
  export type Outbound = DeleteBackupCodeResponseBody$Outbound;
}

export function deleteBackupCodeResponseBodyToJSON(
  deleteBackupCodeResponseBody: DeleteBackupCodeResponseBody,
): string {
  return JSON.stringify(
    DeleteBackupCodeResponseBody$outboundSchema.parse(
      deleteBackupCodeResponseBody,
    ),
  );
}

export function deleteBackupCodeResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteBackupCodeResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteBackupCodeResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteBackupCodeResponseBody' from JSON`,
  );
}
