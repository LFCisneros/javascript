/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateEmailAddressRequestBody = {
  /**
   * The email address will be marked as verified.
   */
  verified?: boolean | null | undefined;
  /**
   * Set this email address as the primary email address for the user.
   */
  primary?: boolean | null | undefined;
};

export type UpdateEmailAddressRequest = {
  /**
   * The ID of the email address to update
   */
  emailAddressId: string;
  requestBody?: UpdateEmailAddressRequestBody | undefined;
};

/** @internal */
export const UpdateEmailAddressRequestBody$inboundSchema: z.ZodType<
  UpdateEmailAddressRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  verified: z.nullable(z.boolean()).optional(),
  primary: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type UpdateEmailAddressRequestBody$Outbound = {
  verified?: boolean | null | undefined;
  primary?: boolean | null | undefined;
};

/** @internal */
export const UpdateEmailAddressRequestBody$outboundSchema: z.ZodType<
  UpdateEmailAddressRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateEmailAddressRequestBody
> = z.object({
  verified: z.nullable(z.boolean()).optional(),
  primary: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmailAddressRequestBody$ {
  /** @deprecated use `UpdateEmailAddressRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateEmailAddressRequestBody$inboundSchema;
  /** @deprecated use `UpdateEmailAddressRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateEmailAddressRequestBody$outboundSchema;
  /** @deprecated use `UpdateEmailAddressRequestBody$Outbound` instead. */
  export type Outbound = UpdateEmailAddressRequestBody$Outbound;
}

export function updateEmailAddressRequestBodyToJSON(
  updateEmailAddressRequestBody: UpdateEmailAddressRequestBody,
): string {
  return JSON.stringify(
    UpdateEmailAddressRequestBody$outboundSchema.parse(
      updateEmailAddressRequestBody,
    ),
  );
}

export function updateEmailAddressRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEmailAddressRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEmailAddressRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmailAddressRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateEmailAddressRequest$inboundSchema: z.ZodType<
  UpdateEmailAddressRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  email_address_id: z.string(),
  RequestBody: z.lazy(() => UpdateEmailAddressRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "email_address_id": "emailAddressId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateEmailAddressRequest$Outbound = {
  email_address_id: string;
  RequestBody?: UpdateEmailAddressRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateEmailAddressRequest$outboundSchema: z.ZodType<
  UpdateEmailAddressRequest$Outbound,
  z.ZodTypeDef,
  UpdateEmailAddressRequest
> = z.object({
  emailAddressId: z.string(),
  requestBody: z.lazy(() => UpdateEmailAddressRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    emailAddressId: "email_address_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmailAddressRequest$ {
  /** @deprecated use `UpdateEmailAddressRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateEmailAddressRequest$inboundSchema;
  /** @deprecated use `UpdateEmailAddressRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateEmailAddressRequest$outboundSchema;
  /** @deprecated use `UpdateEmailAddressRequest$Outbound` instead. */
  export type Outbound = UpdateEmailAddressRequest$Outbound;
}

export function updateEmailAddressRequestToJSON(
  updateEmailAddressRequest: UpdateEmailAddressRequest,
): string {
  return JSON.stringify(
    UpdateEmailAddressRequest$outboundSchema.parse(updateEmailAddressRequest),
  );
}

export function updateEmailAddressRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEmailAddressRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEmailAddressRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmailAddressRequest' from JSON`,
  );
}
