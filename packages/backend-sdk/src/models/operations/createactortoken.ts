/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The actor payload. It needs to include a sub property which should contain the ID of the actor.
 *
 * @remarks
 * This whole payload will be also included in the JWT session token.
 */
export type Actor = {
  /**
   * The ID of the actor.
   */
  sub: string;
  additionalProperties?: { [k: string]: any };
};

export type CreateActorTokenRequestBody = {
  /**
   * The ID of the user being impersonated.
   */
  userId: string;
  /**
   * The actor payload. It needs to include a sub property which should contain the ID of the actor.
   *
   * @remarks
   * This whole payload will be also included in the JWT session token.
   */
  actor: Actor;
  /**
   * Optional parameter to specify the life duration of the actor token in seconds.
   *
   * @remarks
   * By default, the duration is 1 hour.
   */
  expiresInSeconds?: number | undefined;
  /**
   * The maximum duration that the session which will be created by the generated actor token should last.
   *
   * @remarks
   * By default, the duration of a session created via an actor token, lasts 30 minutes.
   */
  sessionMaxDurationInSeconds?: number | undefined;
};

/** @internal */
export const Actor$inboundSchema: z.ZodType<Actor, z.ZodTypeDef, unknown> =
  collectExtraKeys$(
    z.object({
      sub: z.string(),
    }).catchall(z.any()),
    "additionalProperties",
    true,
  );

/** @internal */
export type Actor$Outbound = {
  sub: string;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const Actor$outboundSchema: z.ZodType<
  Actor$Outbound,
  z.ZodTypeDef,
  Actor
> = z.object({
  sub: z.string(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Actor$ {
  /** @deprecated use `Actor$inboundSchema` instead. */
  export const inboundSchema = Actor$inboundSchema;
  /** @deprecated use `Actor$outboundSchema` instead. */
  export const outboundSchema = Actor$outboundSchema;
  /** @deprecated use `Actor$Outbound` instead. */
  export type Outbound = Actor$Outbound;
}

export function actorToJSON(actor: Actor): string {
  return JSON.stringify(Actor$outboundSchema.parse(actor));
}

export function actorFromJSON(
  jsonString: string,
): SafeParseResult<Actor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Actor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Actor' from JSON`,
  );
}

/** @internal */
export const CreateActorTokenRequestBody$inboundSchema: z.ZodType<
  CreateActorTokenRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string(),
  actor: z.lazy(() => Actor$inboundSchema),
  expires_in_seconds: z.number().int().default(3600),
  session_max_duration_in_seconds: z.number().int().default(1800),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "expires_in_seconds": "expiresInSeconds",
    "session_max_duration_in_seconds": "sessionMaxDurationInSeconds",
  });
});

/** @internal */
export type CreateActorTokenRequestBody$Outbound = {
  user_id: string;
  actor: Actor$Outbound;
  expires_in_seconds: number;
  session_max_duration_in_seconds: number;
};

/** @internal */
export const CreateActorTokenRequestBody$outboundSchema: z.ZodType<
  CreateActorTokenRequestBody$Outbound,
  z.ZodTypeDef,
  CreateActorTokenRequestBody
> = z.object({
  userId: z.string(),
  actor: z.lazy(() => Actor$outboundSchema),
  expiresInSeconds: z.number().int().default(3600),
  sessionMaxDurationInSeconds: z.number().int().default(1800),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    expiresInSeconds: "expires_in_seconds",
    sessionMaxDurationInSeconds: "session_max_duration_in_seconds",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActorTokenRequestBody$ {
  /** @deprecated use `CreateActorTokenRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateActorTokenRequestBody$inboundSchema;
  /** @deprecated use `CreateActorTokenRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateActorTokenRequestBody$outboundSchema;
  /** @deprecated use `CreateActorTokenRequestBody$Outbound` instead. */
  export type Outbound = CreateActorTokenRequestBody$Outbound;
}

export function createActorTokenRequestBodyToJSON(
  createActorTokenRequestBody: CreateActorTokenRequestBody,
): string {
  return JSON.stringify(
    CreateActorTokenRequestBody$outboundSchema.parse(
      createActorTokenRequestBody,
    ),
  );
}

export function createActorTokenRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateActorTokenRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateActorTokenRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateActorTokenRequestBody' from JSON`,
  );
}
