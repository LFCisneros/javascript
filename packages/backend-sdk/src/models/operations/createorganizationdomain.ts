/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateOrganizationDomainRequestBody = {
  /**
   * The name of the new domain
   */
  name?: string | undefined;
  /**
   * The enrollment_mode for the new domain. This can be `automatic_invitation`, `automatic_suggestion` or `manual_invitation`
   */
  enrollmentMode?: string | undefined;
  /**
   * The status of domain's verification. Defaults to true
   */
  verified?: boolean | null | undefined;
};

export type CreateOrganizationDomainRequest = {
  /**
   * The ID of the organization where the new domain will be created.
   */
  organizationId: string;
  requestBody: CreateOrganizationDomainRequestBody;
};

/** @internal */
export const CreateOrganizationDomainRequestBody$inboundSchema: z.ZodType<
  CreateOrganizationDomainRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  enrollment_mode: z.string().optional(),
  verified: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "enrollment_mode": "enrollmentMode",
  });
});

/** @internal */
export type CreateOrganizationDomainRequestBody$Outbound = {
  name?: string | undefined;
  enrollment_mode?: string | undefined;
  verified?: boolean | null | undefined;
};

/** @internal */
export const CreateOrganizationDomainRequestBody$outboundSchema: z.ZodType<
  CreateOrganizationDomainRequestBody$Outbound,
  z.ZodTypeDef,
  CreateOrganizationDomainRequestBody
> = z.object({
  name: z.string().optional(),
  enrollmentMode: z.string().optional(),
  verified: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    enrollmentMode: "enrollment_mode",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrganizationDomainRequestBody$ {
  /** @deprecated use `CreateOrganizationDomainRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateOrganizationDomainRequestBody$inboundSchema;
  /** @deprecated use `CreateOrganizationDomainRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateOrganizationDomainRequestBody$outboundSchema;
  /** @deprecated use `CreateOrganizationDomainRequestBody$Outbound` instead. */
  export type Outbound = CreateOrganizationDomainRequestBody$Outbound;
}

export function createOrganizationDomainRequestBodyToJSON(
  createOrganizationDomainRequestBody: CreateOrganizationDomainRequestBody,
): string {
  return JSON.stringify(
    CreateOrganizationDomainRequestBody$outboundSchema.parse(
      createOrganizationDomainRequestBody,
    ),
  );
}

export function createOrganizationDomainRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrganizationDomainRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateOrganizationDomainRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrganizationDomainRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateOrganizationDomainRequest$inboundSchema: z.ZodType<
  CreateOrganizationDomainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string(),
  RequestBody: z.lazy(() => CreateOrganizationDomainRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateOrganizationDomainRequest$Outbound = {
  organization_id: string;
  RequestBody: CreateOrganizationDomainRequestBody$Outbound;
};

/** @internal */
export const CreateOrganizationDomainRequest$outboundSchema: z.ZodType<
  CreateOrganizationDomainRequest$Outbound,
  z.ZodTypeDef,
  CreateOrganizationDomainRequest
> = z.object({
  organizationId: z.string(),
  requestBody: z.lazy(() => CreateOrganizationDomainRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrganizationDomainRequest$ {
  /** @deprecated use `CreateOrganizationDomainRequest$inboundSchema` instead. */
  export const inboundSchema = CreateOrganizationDomainRequest$inboundSchema;
  /** @deprecated use `CreateOrganizationDomainRequest$outboundSchema` instead. */
  export const outboundSchema = CreateOrganizationDomainRequest$outboundSchema;
  /** @deprecated use `CreateOrganizationDomainRequest$Outbound` instead. */
  export type Outbound = CreateOrganizationDomainRequest$Outbound;
}

export function createOrganizationDomainRequestToJSON(
  createOrganizationDomainRequest: CreateOrganizationDomainRequest,
): string {
  return JSON.stringify(
    CreateOrganizationDomainRequest$outboundSchema.parse(
      createOrganizationDomainRequest,
    ),
  );
}

export function createOrganizationDomainRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrganizationDomainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrganizationDomainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrganizationDomainRequest' from JSON`,
  );
}
