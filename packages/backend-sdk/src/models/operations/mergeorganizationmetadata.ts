/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MergeOrganizationMetadataRequestBody = {
  /**
   * Metadata saved on the organization, that is visible to both your frontend and backend.
   *
   * @remarks
   * The new object will be merged with the existing value.
   */
  publicMetadata?: { [k: string]: any } | undefined;
  /**
   * Metadata saved on the organization that is only visible to your backend.
   *
   * @remarks
   * The new object will be merged with the existing value.
   */
  privateMetadata?: { [k: string]: any } | undefined;
};

export type MergeOrganizationMetadataRequest = {
  /**
   * The ID of the organization for which metadata will be merged or updated
   */
  organizationId: string;
  requestBody: MergeOrganizationMetadataRequestBody;
};

/** @internal */
export const MergeOrganizationMetadataRequestBody$inboundSchema: z.ZodType<
  MergeOrganizationMetadataRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  public_metadata: z.record(z.any()).optional(),
  private_metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "public_metadata": "publicMetadata",
    "private_metadata": "privateMetadata",
  });
});

/** @internal */
export type MergeOrganizationMetadataRequestBody$Outbound = {
  public_metadata?: { [k: string]: any } | undefined;
  private_metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const MergeOrganizationMetadataRequestBody$outboundSchema: z.ZodType<
  MergeOrganizationMetadataRequestBody$Outbound,
  z.ZodTypeDef,
  MergeOrganizationMetadataRequestBody
> = z.object({
  publicMetadata: z.record(z.any()).optional(),
  privateMetadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    publicMetadata: "public_metadata",
    privateMetadata: "private_metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MergeOrganizationMetadataRequestBody$ {
  /** @deprecated use `MergeOrganizationMetadataRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    MergeOrganizationMetadataRequestBody$inboundSchema;
  /** @deprecated use `MergeOrganizationMetadataRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    MergeOrganizationMetadataRequestBody$outboundSchema;
  /** @deprecated use `MergeOrganizationMetadataRequestBody$Outbound` instead. */
  export type Outbound = MergeOrganizationMetadataRequestBody$Outbound;
}

export function mergeOrganizationMetadataRequestBodyToJSON(
  mergeOrganizationMetadataRequestBody: MergeOrganizationMetadataRequestBody,
): string {
  return JSON.stringify(
    MergeOrganizationMetadataRequestBody$outboundSchema.parse(
      mergeOrganizationMetadataRequestBody,
    ),
  );
}

export function mergeOrganizationMetadataRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<MergeOrganizationMetadataRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MergeOrganizationMetadataRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MergeOrganizationMetadataRequestBody' from JSON`,
  );
}

/** @internal */
export const MergeOrganizationMetadataRequest$inboundSchema: z.ZodType<
  MergeOrganizationMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string(),
  RequestBody: z.lazy(() => MergeOrganizationMetadataRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type MergeOrganizationMetadataRequest$Outbound = {
  organization_id: string;
  RequestBody: MergeOrganizationMetadataRequestBody$Outbound;
};

/** @internal */
export const MergeOrganizationMetadataRequest$outboundSchema: z.ZodType<
  MergeOrganizationMetadataRequest$Outbound,
  z.ZodTypeDef,
  MergeOrganizationMetadataRequest
> = z.object({
  organizationId: z.string(),
  requestBody: z.lazy(() =>
    MergeOrganizationMetadataRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MergeOrganizationMetadataRequest$ {
  /** @deprecated use `MergeOrganizationMetadataRequest$inboundSchema` instead. */
  export const inboundSchema = MergeOrganizationMetadataRequest$inboundSchema;
  /** @deprecated use `MergeOrganizationMetadataRequest$outboundSchema` instead. */
  export const outboundSchema = MergeOrganizationMetadataRequest$outboundSchema;
  /** @deprecated use `MergeOrganizationMetadataRequest$Outbound` instead. */
  export type Outbound = MergeOrganizationMetadataRequest$Outbound;
}

export function mergeOrganizationMetadataRequestToJSON(
  mergeOrganizationMetadataRequest: MergeOrganizationMetadataRequest,
): string {
  return JSON.stringify(
    MergeOrganizationMetadataRequest$outboundSchema.parse(
      mergeOrganizationMetadataRequest,
    ),
  );
}

export function mergeOrganizationMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<MergeOrganizationMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MergeOrganizationMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MergeOrganizationMetadataRequest' from JSON`,
  );
}
