/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type VerifyPasswordRequestBody = {
  /**
   * The user password to verify
   */
  password: string;
};

export type VerifyPasswordRequest = {
  /**
   * The ID of the user for whom to verify the password
   */
  userId: string;
  requestBody?: VerifyPasswordRequestBody | undefined;
};

/**
 * The provided password was correct.
 */
export type VerifyPasswordResponseBody = {
  verified?: boolean | undefined;
};

/** @internal */
export const VerifyPasswordRequestBody$inboundSchema: z.ZodType<VerifyPasswordRequestBody, z.ZodTypeDef, unknown> =
  z.object({
    password: z.string(),
  });

/** @internal */
export type VerifyPasswordRequestBody$Outbound = {
  password: string;
};

/** @internal */
export const VerifyPasswordRequestBody$outboundSchema: z.ZodType<
  VerifyPasswordRequestBody$Outbound,
  z.ZodTypeDef,
  VerifyPasswordRequestBody
> = z.object({
  password: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyPasswordRequestBody$ {
  /** @deprecated use `VerifyPasswordRequestBody$inboundSchema` instead. */
  export const inboundSchema = VerifyPasswordRequestBody$inboundSchema;
  /** @deprecated use `VerifyPasswordRequestBody$outboundSchema` instead. */
  export const outboundSchema = VerifyPasswordRequestBody$outboundSchema;
  /** @deprecated use `VerifyPasswordRequestBody$Outbound` instead. */
  export type Outbound = VerifyPasswordRequestBody$Outbound;
}

export function verifyPasswordRequestBodyToJSON(verifyPasswordRequestBody: VerifyPasswordRequestBody): string {
  return JSON.stringify(VerifyPasswordRequestBody$outboundSchema.parse(verifyPasswordRequestBody));
}

export function verifyPasswordRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VerifyPasswordRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    x => VerifyPasswordRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyPasswordRequestBody' from JSON`,
  );
}

/** @internal */
export const VerifyPasswordRequest$inboundSchema: z.ZodType<VerifyPasswordRequest, z.ZodTypeDef, unknown> = z
  .object({
    user_id: z.string(),
    RequestBody: z.lazy(() => VerifyPasswordRequestBody$inboundSchema).optional(),
  })
  .transform(v => {
    return remap$(v, {
      user_id: 'userId',
      RequestBody: 'requestBody',
    });
  });

/** @internal */
export type VerifyPasswordRequest$Outbound = {
  user_id: string;
  RequestBody?: VerifyPasswordRequestBody$Outbound | undefined;
};

/** @internal */
export const VerifyPasswordRequest$outboundSchema: z.ZodType<
  VerifyPasswordRequest$Outbound,
  z.ZodTypeDef,
  VerifyPasswordRequest
> = z
  .object({
    userId: z.string(),
    requestBody: z.lazy(() => VerifyPasswordRequestBody$outboundSchema).optional(),
  })
  .transform(v => {
    return remap$(v, {
      userId: 'user_id',
      requestBody: 'RequestBody',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyPasswordRequest$ {
  /** @deprecated use `VerifyPasswordRequest$inboundSchema` instead. */
  export const inboundSchema = VerifyPasswordRequest$inboundSchema;
  /** @deprecated use `VerifyPasswordRequest$outboundSchema` instead. */
  export const outboundSchema = VerifyPasswordRequest$outboundSchema;
  /** @deprecated use `VerifyPasswordRequest$Outbound` instead. */
  export type Outbound = VerifyPasswordRequest$Outbound;
}

export function verifyPasswordRequestToJSON(verifyPasswordRequest: VerifyPasswordRequest): string {
  return JSON.stringify(VerifyPasswordRequest$outboundSchema.parse(verifyPasswordRequest));
}

export function verifyPasswordRequestFromJSON(
  jsonString: string,
): SafeParseResult<VerifyPasswordRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => VerifyPasswordRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyPasswordRequest' from JSON`,
  );
}

/** @internal */
export const VerifyPasswordResponseBody$inboundSchema: z.ZodType<VerifyPasswordResponseBody, z.ZodTypeDef, unknown> =
  z.object({
    verified: z.boolean().optional(),
  });

/** @internal */
export type VerifyPasswordResponseBody$Outbound = {
  verified?: boolean | undefined;
};

/** @internal */
export const VerifyPasswordResponseBody$outboundSchema: z.ZodType<
  VerifyPasswordResponseBody$Outbound,
  z.ZodTypeDef,
  VerifyPasswordResponseBody
> = z.object({
  verified: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyPasswordResponseBody$ {
  /** @deprecated use `VerifyPasswordResponseBody$inboundSchema` instead. */
  export const inboundSchema = VerifyPasswordResponseBody$inboundSchema;
  /** @deprecated use `VerifyPasswordResponseBody$outboundSchema` instead. */
  export const outboundSchema = VerifyPasswordResponseBody$outboundSchema;
  /** @deprecated use `VerifyPasswordResponseBody$Outbound` instead. */
  export type Outbound = VerifyPasswordResponseBody$Outbound;
}

export function verifyPasswordResponseBodyToJSON(verifyPasswordResponseBody: VerifyPasswordResponseBody): string {
  return JSON.stringify(VerifyPasswordResponseBody$outboundSchema.parse(verifyPasswordResponseBody));
}

export function verifyPasswordResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<VerifyPasswordResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    x => VerifyPasswordResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyPasswordResponseBody' from JSON`,
  );
}
