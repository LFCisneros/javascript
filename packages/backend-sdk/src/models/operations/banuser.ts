/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type BanUserRequest = {
  /**
   * The ID of the user to ban
   */
  userId: string;
};

/** @internal */
export const BanUserRequest$inboundSchema: z.ZodType<BanUserRequest, z.ZodTypeDef, unknown> = z
  .object({
    user_id: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      user_id: 'userId',
    });
  });

/** @internal */
export type BanUserRequest$Outbound = {
  user_id: string;
};

/** @internal */
export const BanUserRequest$outboundSchema: z.ZodType<BanUserRequest$Outbound, z.ZodTypeDef, BanUserRequest> = z
  .object({
    userId: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      userId: 'user_id',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BanUserRequest$ {
  /** @deprecated use `BanUserRequest$inboundSchema` instead. */
  export const inboundSchema = BanUserRequest$inboundSchema;
  /** @deprecated use `BanUserRequest$outboundSchema` instead. */
  export const outboundSchema = BanUserRequest$outboundSchema;
  /** @deprecated use `BanUserRequest$Outbound` instead. */
  export type Outbound = BanUserRequest$Outbound;
}

export function banUserRequestToJSON(banUserRequest: BanUserRequest): string {
  return JSON.stringify(BanUserRequest$outboundSchema.parse(banUserRequest));
}

export function banUserRequestFromJSON(jsonString: string): SafeParseResult<BanUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => BanUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BanUserRequest' from JSON`,
  );
}
