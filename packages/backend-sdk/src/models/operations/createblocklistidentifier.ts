/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateBlocklistIdentifierRequestBody = {
  /**
   * The identifier to be added in the block-list.
   *
   * @remarks
   * This can be an email address, a phone number or a web3 wallet.
   */
  identifier: string;
};

/** @internal */
export const CreateBlocklistIdentifierRequestBody$inboundSchema: z.ZodType<
  CreateBlocklistIdentifierRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
});

/** @internal */
export type CreateBlocklistIdentifierRequestBody$Outbound = {
  identifier: string;
};

/** @internal */
export const CreateBlocklistIdentifierRequestBody$outboundSchema: z.ZodType<
  CreateBlocklistIdentifierRequestBody$Outbound,
  z.ZodTypeDef,
  CreateBlocklistIdentifierRequestBody
> = z.object({
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBlocklistIdentifierRequestBody$ {
  /** @deprecated use `CreateBlocklistIdentifierRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateBlocklistIdentifierRequestBody$inboundSchema;
  /** @deprecated use `CreateBlocklistIdentifierRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateBlocklistIdentifierRequestBody$outboundSchema;
  /** @deprecated use `CreateBlocklistIdentifierRequestBody$Outbound` instead. */
  export type Outbound = CreateBlocklistIdentifierRequestBody$Outbound;
}

export function createBlocklistIdentifierRequestBodyToJSON(
  createBlocklistIdentifierRequestBody: CreateBlocklistIdentifierRequestBody,
): string {
  return JSON.stringify(
    CreateBlocklistIdentifierRequestBody$outboundSchema.parse(
      createBlocklistIdentifierRequestBody,
    ),
  );
}

export function createBlocklistIdentifierRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateBlocklistIdentifierRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateBlocklistIdentifierRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBlocklistIdentifierRequestBody' from JSON`,
  );
}
