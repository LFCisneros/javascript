/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Define the atrtibute name mapping between Identity Provider and Clerk's user properties
 */
export type UpdateSAMLConnectionAttributeMapping = {
  userId?: string | undefined;
  emailAddress?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
};

export type UpdateSAMLConnectionRequestBody = {
  /**
   * The name of the new SAML Connection
   */
  name?: string | null | undefined;
  /**
   * The domain to use for the new SAML Connection
   */
  domain?: string | null | undefined;
  /**
   * The entity id as provided by the IdP
   */
  idpEntityId?: string | null | undefined;
  /**
   * The SSO url as provided by the IdP
   */
  idpSsoUrl?: string | null | undefined;
  /**
   * The x509 certificated as provided by the IdP
   */
  idpCertificate?: string | null | undefined;
  /**
   * The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties and replaces them
   */
  idpMetadataUrl?: string | null | undefined;
  /**
   * The XML content of the IdP metadata file. If present, it takes priority over the corresponding individual properties
   */
  idpMetadata?: string | null | undefined;
  /**
   * The ID of the organization to which users of this SAML Connection will be added
   */
  organizationId?: string | null | undefined;
  /**
   * Define the atrtibute name mapping between Identity Provider and Clerk's user properties
   */
  attributeMapping?: UpdateSAMLConnectionAttributeMapping | null | undefined;
  /**
   * Activate or de-activate the SAML Connection
   */
  active?: boolean | null | undefined;
  /**
   * Controls whether to update the user's attributes in each sign-in
   */
  syncUserAttributes?: boolean | null | undefined;
  /**
   * Allow users with an email address subdomain to use this connection in order to authenticate
   */
  allowSubdomains?: boolean | null | undefined;
  /**
   * Enable or deactivate IdP-initiated flows
   */
  allowIdpInitiated?: boolean | null | undefined;
  /**
   * Enable or deactivate additional identifications
   */
  disableAdditionalIdentifications?: boolean | null | undefined;
};

export type UpdateSAMLConnectionRequest = {
  /**
   * The ID of the SAML Connection to update
   */
  samlConnectionId: string;
  requestBody: UpdateSAMLConnectionRequestBody;
};

/** @internal */
export const UpdateSAMLConnectionAttributeMapping$inboundSchema: z.ZodType<
  UpdateSAMLConnectionAttributeMapping,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string().optional(),
  email_address: z.string().optional(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "email_address": "emailAddress",
    "first_name": "firstName",
    "last_name": "lastName",
  });
});

/** @internal */
export type UpdateSAMLConnectionAttributeMapping$Outbound = {
  user_id?: string | undefined;
  email_address?: string | undefined;
  first_name?: string | undefined;
  last_name?: string | undefined;
};

/** @internal */
export const UpdateSAMLConnectionAttributeMapping$outboundSchema: z.ZodType<
  UpdateSAMLConnectionAttributeMapping$Outbound,
  z.ZodTypeDef,
  UpdateSAMLConnectionAttributeMapping
> = z.object({
  userId: z.string().optional(),
  emailAddress: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    emailAddress: "email_address",
    firstName: "first_name",
    lastName: "last_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSAMLConnectionAttributeMapping$ {
  /** @deprecated use `UpdateSAMLConnectionAttributeMapping$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSAMLConnectionAttributeMapping$inboundSchema;
  /** @deprecated use `UpdateSAMLConnectionAttributeMapping$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSAMLConnectionAttributeMapping$outboundSchema;
  /** @deprecated use `UpdateSAMLConnectionAttributeMapping$Outbound` instead. */
  export type Outbound = UpdateSAMLConnectionAttributeMapping$Outbound;
}

export function updateSAMLConnectionAttributeMappingToJSON(
  updateSAMLConnectionAttributeMapping: UpdateSAMLConnectionAttributeMapping,
): string {
  return JSON.stringify(
    UpdateSAMLConnectionAttributeMapping$outboundSchema.parse(
      updateSAMLConnectionAttributeMapping,
    ),
  );
}

export function updateSAMLConnectionAttributeMappingFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSAMLConnectionAttributeMapping, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSAMLConnectionAttributeMapping$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSAMLConnectionAttributeMapping' from JSON`,
  );
}

/** @internal */
export const UpdateSAMLConnectionRequestBody$inboundSchema: z.ZodType<
  UpdateSAMLConnectionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  domain: z.nullable(z.string()).optional(),
  idp_entity_id: z.nullable(z.string()).optional(),
  idp_sso_url: z.nullable(z.string()).optional(),
  idp_certificate: z.nullable(z.string()).optional(),
  idp_metadata_url: z.nullable(z.string()).optional(),
  idp_metadata: z.nullable(z.string()).optional(),
  organization_id: z.nullable(z.string()).optional(),
  attribute_mapping: z.nullable(
    z.lazy(() => UpdateSAMLConnectionAttributeMapping$inboundSchema),
  ).optional(),
  active: z.nullable(z.boolean()).optional(),
  sync_user_attributes: z.nullable(z.boolean()).optional(),
  allow_subdomains: z.nullable(z.boolean()).optional(),
  allow_idp_initiated: z.nullable(z.boolean()).optional(),
  disable_additional_identifications: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "idp_entity_id": "idpEntityId",
    "idp_sso_url": "idpSsoUrl",
    "idp_certificate": "idpCertificate",
    "idp_metadata_url": "idpMetadataUrl",
    "idp_metadata": "idpMetadata",
    "organization_id": "organizationId",
    "attribute_mapping": "attributeMapping",
    "sync_user_attributes": "syncUserAttributes",
    "allow_subdomains": "allowSubdomains",
    "allow_idp_initiated": "allowIdpInitiated",
    "disable_additional_identifications": "disableAdditionalIdentifications",
  });
});

/** @internal */
export type UpdateSAMLConnectionRequestBody$Outbound = {
  name?: string | null | undefined;
  domain?: string | null | undefined;
  idp_entity_id?: string | null | undefined;
  idp_sso_url?: string | null | undefined;
  idp_certificate?: string | null | undefined;
  idp_metadata_url?: string | null | undefined;
  idp_metadata?: string | null | undefined;
  organization_id?: string | null | undefined;
  attribute_mapping?:
    | UpdateSAMLConnectionAttributeMapping$Outbound
    | null
    | undefined;
  active?: boolean | null | undefined;
  sync_user_attributes?: boolean | null | undefined;
  allow_subdomains?: boolean | null | undefined;
  allow_idp_initiated?: boolean | null | undefined;
  disable_additional_identifications?: boolean | null | undefined;
};

/** @internal */
export const UpdateSAMLConnectionRequestBody$outboundSchema: z.ZodType<
  UpdateSAMLConnectionRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateSAMLConnectionRequestBody
> = z.object({
  name: z.nullable(z.string()).optional(),
  domain: z.nullable(z.string()).optional(),
  idpEntityId: z.nullable(z.string()).optional(),
  idpSsoUrl: z.nullable(z.string()).optional(),
  idpCertificate: z.nullable(z.string()).optional(),
  idpMetadataUrl: z.nullable(z.string()).optional(),
  idpMetadata: z.nullable(z.string()).optional(),
  organizationId: z.nullable(z.string()).optional(),
  attributeMapping: z.nullable(
    z.lazy(() => UpdateSAMLConnectionAttributeMapping$outboundSchema),
  ).optional(),
  active: z.nullable(z.boolean()).optional(),
  syncUserAttributes: z.nullable(z.boolean()).optional(),
  allowSubdomains: z.nullable(z.boolean()).optional(),
  allowIdpInitiated: z.nullable(z.boolean()).optional(),
  disableAdditionalIdentifications: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    idpEntityId: "idp_entity_id",
    idpSsoUrl: "idp_sso_url",
    idpCertificate: "idp_certificate",
    idpMetadataUrl: "idp_metadata_url",
    idpMetadata: "idp_metadata",
    organizationId: "organization_id",
    attributeMapping: "attribute_mapping",
    syncUserAttributes: "sync_user_attributes",
    allowSubdomains: "allow_subdomains",
    allowIdpInitiated: "allow_idp_initiated",
    disableAdditionalIdentifications: "disable_additional_identifications",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSAMLConnectionRequestBody$ {
  /** @deprecated use `UpdateSAMLConnectionRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateSAMLConnectionRequestBody$inboundSchema;
  /** @deprecated use `UpdateSAMLConnectionRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateSAMLConnectionRequestBody$outboundSchema;
  /** @deprecated use `UpdateSAMLConnectionRequestBody$Outbound` instead. */
  export type Outbound = UpdateSAMLConnectionRequestBody$Outbound;
}

export function updateSAMLConnectionRequestBodyToJSON(
  updateSAMLConnectionRequestBody: UpdateSAMLConnectionRequestBody,
): string {
  return JSON.stringify(
    UpdateSAMLConnectionRequestBody$outboundSchema.parse(
      updateSAMLConnectionRequestBody,
    ),
  );
}

export function updateSAMLConnectionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSAMLConnectionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSAMLConnectionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSAMLConnectionRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateSAMLConnectionRequest$inboundSchema: z.ZodType<
  UpdateSAMLConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  saml_connection_id: z.string(),
  RequestBody: z.lazy(() => UpdateSAMLConnectionRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "saml_connection_id": "samlConnectionId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateSAMLConnectionRequest$Outbound = {
  saml_connection_id: string;
  RequestBody: UpdateSAMLConnectionRequestBody$Outbound;
};

/** @internal */
export const UpdateSAMLConnectionRequest$outboundSchema: z.ZodType<
  UpdateSAMLConnectionRequest$Outbound,
  z.ZodTypeDef,
  UpdateSAMLConnectionRequest
> = z.object({
  samlConnectionId: z.string(),
  requestBody: z.lazy(() => UpdateSAMLConnectionRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    samlConnectionId: "saml_connection_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSAMLConnectionRequest$ {
  /** @deprecated use `UpdateSAMLConnectionRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSAMLConnectionRequest$inboundSchema;
  /** @deprecated use `UpdateSAMLConnectionRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSAMLConnectionRequest$outboundSchema;
  /** @deprecated use `UpdateSAMLConnectionRequest$Outbound` instead. */
  export type Outbound = UpdateSAMLConnectionRequest$Outbound;
}

export function updateSAMLConnectionRequestToJSON(
  updateSAMLConnectionRequest: UpdateSAMLConnectionRequest,
): string {
  return JSON.stringify(
    UpdateSAMLConnectionRequest$outboundSchema.parse(
      updateSAMLConnectionRequest,
    ),
  );
}

export function updateSAMLConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSAMLConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSAMLConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSAMLConnectionRequest' from JSON`,
  );
}
