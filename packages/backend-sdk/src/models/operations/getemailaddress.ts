/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetEmailAddressRequest = {
  /**
   * The ID of the email address to retrieve
   */
  emailAddressId: string;
};

/** @internal */
export const GetEmailAddressRequest$inboundSchema: z.ZodType<
  GetEmailAddressRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  email_address_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "email_address_id": "emailAddressId",
  });
});

/** @internal */
export type GetEmailAddressRequest$Outbound = {
  email_address_id: string;
};

/** @internal */
export const GetEmailAddressRequest$outboundSchema: z.ZodType<
  GetEmailAddressRequest$Outbound,
  z.ZodTypeDef,
  GetEmailAddressRequest
> = z.object({
  emailAddressId: z.string(),
}).transform((v) => {
  return remap$(v, {
    emailAddressId: "email_address_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEmailAddressRequest$ {
  /** @deprecated use `GetEmailAddressRequest$inboundSchema` instead. */
  export const inboundSchema = GetEmailAddressRequest$inboundSchema;
  /** @deprecated use `GetEmailAddressRequest$outboundSchema` instead. */
  export const outboundSchema = GetEmailAddressRequest$outboundSchema;
  /** @deprecated use `GetEmailAddressRequest$Outbound` instead. */
  export type Outbound = GetEmailAddressRequest$Outbound;
}

export function getEmailAddressRequestToJSON(
  getEmailAddressRequest: GetEmailAddressRequest,
): string {
  return JSON.stringify(
    GetEmailAddressRequest$outboundSchema.parse(getEmailAddressRequest),
  );
}

export function getEmailAddressRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetEmailAddressRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEmailAddressRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEmailAddressRequest' from JSON`,
  );
}
