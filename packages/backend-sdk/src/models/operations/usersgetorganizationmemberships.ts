/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UsersGetOrganizationMembershipsRequest = {
  /**
   * The ID of the user whose organization memberships we want to retrieve
   */
  userId: string;
  /**
   * Applies a limit to the number of results returned.
   *
   * @remarks
   * Can be used for paginating the results together with `offset`.
   */
  limit?: number | undefined;
  /**
   * Skip the first `offset` results when paginating.
   *
   * @remarks
   * Needs to be an integer greater or equal to zero.
   * To be used in conjunction with `limit`.
   */
  offset?: number | undefined;
};

/** @internal */
export const UsersGetOrganizationMembershipsRequest$inboundSchema: z.ZodType<
  UsersGetOrganizationMembershipsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string(),
  limit: z.number().int().default(10),
  offset: z.number().int().default(0),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
  });
});

/** @internal */
export type UsersGetOrganizationMembershipsRequest$Outbound = {
  user_id: string;
  limit: number;
  offset: number;
};

/** @internal */
export const UsersGetOrganizationMembershipsRequest$outboundSchema: z.ZodType<
  UsersGetOrganizationMembershipsRequest$Outbound,
  z.ZodTypeDef,
  UsersGetOrganizationMembershipsRequest
> = z.object({
  userId: z.string(),
  limit: z.number().int().default(10),
  offset: z.number().int().default(0),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersGetOrganizationMembershipsRequest$ {
  /** @deprecated use `UsersGetOrganizationMembershipsRequest$inboundSchema` instead. */
  export const inboundSchema =
    UsersGetOrganizationMembershipsRequest$inboundSchema;
  /** @deprecated use `UsersGetOrganizationMembershipsRequest$outboundSchema` instead. */
  export const outboundSchema =
    UsersGetOrganizationMembershipsRequest$outboundSchema;
  /** @deprecated use `UsersGetOrganizationMembershipsRequest$Outbound` instead. */
  export type Outbound = UsersGetOrganizationMembershipsRequest$Outbound;
}

export function usersGetOrganizationMembershipsRequestToJSON(
  usersGetOrganizationMembershipsRequest:
    UsersGetOrganizationMembershipsRequest,
): string {
  return JSON.stringify(
    UsersGetOrganizationMembershipsRequest$outboundSchema.parse(
      usersGetOrganizationMembershipsRequest,
    ),
  );
}

export function usersGetOrganizationMembershipsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UsersGetOrganizationMembershipsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UsersGetOrganizationMembershipsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersGetOrganizationMembershipsRequest' from JSON`,
  );
}
