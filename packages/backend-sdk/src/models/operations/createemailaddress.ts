/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateEmailAddressRequestBody = {
  /**
   * The ID representing the user
   */
  userId: string;
  /**
   * The new email address. Must adhere to the RFC 5322 specification for email address format.
   */
  emailAddress: string;
  /**
   * When created, the email address will be marked as verified.
   */
  verified?: boolean | null | undefined;
  /**
   * Create this email address as the primary email address for the user.
   *
   * @remarks
   * Default: false, unless it is the first email address.
   */
  primary?: boolean | null | undefined;
};

/** @internal */
export const CreateEmailAddressRequestBody$inboundSchema: z.ZodType<
  CreateEmailAddressRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string(),
  email_address: z.string(),
  verified: z.nullable(z.boolean()).optional(),
  primary: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "email_address": "emailAddress",
  });
});

/** @internal */
export type CreateEmailAddressRequestBody$Outbound = {
  user_id: string;
  email_address: string;
  verified?: boolean | null | undefined;
  primary?: boolean | null | undefined;
};

/** @internal */
export const CreateEmailAddressRequestBody$outboundSchema: z.ZodType<
  CreateEmailAddressRequestBody$Outbound,
  z.ZodTypeDef,
  CreateEmailAddressRequestBody
> = z.object({
  userId: z.string(),
  emailAddress: z.string(),
  verified: z.nullable(z.boolean()).optional(),
  primary: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    emailAddress: "email_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEmailAddressRequestBody$ {
  /** @deprecated use `CreateEmailAddressRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateEmailAddressRequestBody$inboundSchema;
  /** @deprecated use `CreateEmailAddressRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateEmailAddressRequestBody$outboundSchema;
  /** @deprecated use `CreateEmailAddressRequestBody$Outbound` instead. */
  export type Outbound = CreateEmailAddressRequestBody$Outbound;
}

export function createEmailAddressRequestBodyToJSON(
  createEmailAddressRequestBody: CreateEmailAddressRequestBody,
): string {
  return JSON.stringify(
    CreateEmailAddressRequestBody$outboundSchema.parse(
      createEmailAddressRequestBody,
    ),
  );
}

export function createEmailAddressRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateEmailAddressRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEmailAddressRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEmailAddressRequestBody' from JSON`,
  );
}
