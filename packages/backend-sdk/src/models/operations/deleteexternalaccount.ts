/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteExternalAccountRequest = {
  /**
   * The ID of the user's external account
   */
  userId: string;
  /**
   * The ID of the external account to delete
   */
  externalAccountId: string;
};

/** @internal */
export const DeleteExternalAccountRequest$inboundSchema: z.ZodType<
  DeleteExternalAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string(),
  external_account_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "external_account_id": "externalAccountId",
  });
});

/** @internal */
export type DeleteExternalAccountRequest$Outbound = {
  user_id: string;
  external_account_id: string;
};

/** @internal */
export const DeleteExternalAccountRequest$outboundSchema: z.ZodType<
  DeleteExternalAccountRequest$Outbound,
  z.ZodTypeDef,
  DeleteExternalAccountRequest
> = z.object({
  userId: z.string(),
  externalAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    externalAccountId: "external_account_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteExternalAccountRequest$ {
  /** @deprecated use `DeleteExternalAccountRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteExternalAccountRequest$inboundSchema;
  /** @deprecated use `DeleteExternalAccountRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteExternalAccountRequest$outboundSchema;
  /** @deprecated use `DeleteExternalAccountRequest$Outbound` instead. */
  export type Outbound = DeleteExternalAccountRequest$Outbound;
}

export function deleteExternalAccountRequestToJSON(
  deleteExternalAccountRequest: DeleteExternalAccountRequest,
): string {
  return JSON.stringify(
    DeleteExternalAccountRequest$outboundSchema.parse(
      deleteExternalAccountRequest,
    ),
  );
}

export function deleteExternalAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteExternalAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteExternalAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteExternalAccountRequest' from JSON`,
  );
}
