/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteOrganizationLogoRequest = {
  /**
   * The ID of the organization for which the logo will be deleted.
   */
  organizationId: string;
};

/** @internal */
export const DeleteOrganizationLogoRequest$inboundSchema: z.ZodType<
  DeleteOrganizationLogoRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
  });
});

/** @internal */
export type DeleteOrganizationLogoRequest$Outbound = {
  organization_id: string;
};

/** @internal */
export const DeleteOrganizationLogoRequest$outboundSchema: z.ZodType<
  DeleteOrganizationLogoRequest$Outbound,
  z.ZodTypeDef,
  DeleteOrganizationLogoRequest
> = z.object({
  organizationId: z.string(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteOrganizationLogoRequest$ {
  /** @deprecated use `DeleteOrganizationLogoRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteOrganizationLogoRequest$inboundSchema;
  /** @deprecated use `DeleteOrganizationLogoRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteOrganizationLogoRequest$outboundSchema;
  /** @deprecated use `DeleteOrganizationLogoRequest$Outbound` instead. */
  export type Outbound = DeleteOrganizationLogoRequest$Outbound;
}

export function deleteOrganizationLogoRequestToJSON(
  deleteOrganizationLogoRequest: DeleteOrganizationLogoRequest,
): string {
  return JSON.stringify(
    DeleteOrganizationLogoRequest$outboundSchema.parse(
      deleteOrganizationLogoRequest,
    ),
  );
}

export function deleteOrganizationLogoRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteOrganizationLogoRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteOrganizationLogoRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteOrganizationLogoRequest' from JSON`,
  );
}
