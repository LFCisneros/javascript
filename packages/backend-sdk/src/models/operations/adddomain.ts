/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type AddDomainRequestBody = {
  /**
   * The new domain name. Can contain the port for development instances.
   */
  name: string;
  /**
   * Marks the new domain as satellite. Only `true` is accepted at the moment.
   */
  isSatellite: boolean;
  /**
   * The full URL of the proxy which will forward requests to the Clerk Frontend API for this domain. Applicable only to production instances.
   */
  proxyUrl?: string | null | undefined;
};

/** @internal */
export const AddDomainRequestBody$inboundSchema: z.ZodType<AddDomainRequestBody, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string(),
    is_satellite: z.boolean(),
    proxy_url: z.nullable(z.string()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      is_satellite: 'isSatellite',
      proxy_url: 'proxyUrl',
    });
  });

/** @internal */
export type AddDomainRequestBody$Outbound = {
  name: string;
  is_satellite: boolean;
  proxy_url?: string | null | undefined;
};

/** @internal */
export const AddDomainRequestBody$outboundSchema: z.ZodType<
  AddDomainRequestBody$Outbound,
  z.ZodTypeDef,
  AddDomainRequestBody
> = z
  .object({
    name: z.string(),
    isSatellite: z.boolean(),
    proxyUrl: z.nullable(z.string()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      isSatellite: 'is_satellite',
      proxyUrl: 'proxy_url',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddDomainRequestBody$ {
  /** @deprecated use `AddDomainRequestBody$inboundSchema` instead. */
  export const inboundSchema = AddDomainRequestBody$inboundSchema;
  /** @deprecated use `AddDomainRequestBody$outboundSchema` instead. */
  export const outboundSchema = AddDomainRequestBody$outboundSchema;
  /** @deprecated use `AddDomainRequestBody$Outbound` instead. */
  export type Outbound = AddDomainRequestBody$Outbound;
}

export function addDomainRequestBodyToJSON(addDomainRequestBody: AddDomainRequestBody): string {
  return JSON.stringify(AddDomainRequestBody$outboundSchema.parse(addDomainRequestBody));
}

export function addDomainRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AddDomainRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    x => AddDomainRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddDomainRequestBody' from JSON`,
  );
}
