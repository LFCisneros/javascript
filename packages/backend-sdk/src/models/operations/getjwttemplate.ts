/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type GetJWTTemplateRequest = {
  /**
   * JWT Template ID
   */
  templateId: string;
};

/** @internal */
export const GetJWTTemplateRequest$inboundSchema: z.ZodType<GetJWTTemplateRequest, z.ZodTypeDef, unknown> = z
  .object({
    template_id: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      template_id: 'templateId',
    });
  });

/** @internal */
export type GetJWTTemplateRequest$Outbound = {
  template_id: string;
};

/** @internal */
export const GetJWTTemplateRequest$outboundSchema: z.ZodType<
  GetJWTTemplateRequest$Outbound,
  z.ZodTypeDef,
  GetJWTTemplateRequest
> = z
  .object({
    templateId: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      templateId: 'template_id',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetJWTTemplateRequest$ {
  /** @deprecated use `GetJWTTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = GetJWTTemplateRequest$inboundSchema;
  /** @deprecated use `GetJWTTemplateRequest$outboundSchema` instead. */
  export const outboundSchema = GetJWTTemplateRequest$outboundSchema;
  /** @deprecated use `GetJWTTemplateRequest$Outbound` instead. */
  export type Outbound = GetJWTTemplateRequest$Outbound;
}

export function getJWTTemplateRequestToJSON(getJWTTemplateRequest: GetJWTTemplateRequest): string {
  return JSON.stringify(GetJWTTemplateRequest$outboundSchema.parse(getJWTTemplateRequest));
}

export function getJWTTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetJWTTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => GetJWTTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetJWTTemplateRequest' from JSON`,
  );
}
