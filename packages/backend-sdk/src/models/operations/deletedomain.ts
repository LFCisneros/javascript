/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteDomainRequest = {
  /**
   * The ID of the domain that will be deleted. Must be a satellite domain.
   */
  domainId: string;
};

/** @internal */
export const DeleteDomainRequest$inboundSchema: z.ZodType<
  DeleteDomainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "domain_id": "domainId",
  });
});

/** @internal */
export type DeleteDomainRequest$Outbound = {
  domain_id: string;
};

/** @internal */
export const DeleteDomainRequest$outboundSchema: z.ZodType<
  DeleteDomainRequest$Outbound,
  z.ZodTypeDef,
  DeleteDomainRequest
> = z.object({
  domainId: z.string(),
}).transform((v) => {
  return remap$(v, {
    domainId: "domain_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteDomainRequest$ {
  /** @deprecated use `DeleteDomainRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteDomainRequest$inboundSchema;
  /** @deprecated use `DeleteDomainRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteDomainRequest$outboundSchema;
  /** @deprecated use `DeleteDomainRequest$Outbound` instead. */
  export type Outbound = DeleteDomainRequest$Outbound;
}

export function deleteDomainRequestToJSON(
  deleteDomainRequest: DeleteDomainRequest,
): string {
  return JSON.stringify(
    DeleteDomainRequest$outboundSchema.parse(deleteDomainRequest),
  );
}

export function deleteDomainRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteDomainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteDomainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteDomainRequest' from JSON`,
  );
}
