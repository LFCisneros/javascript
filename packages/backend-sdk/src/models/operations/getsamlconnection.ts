/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSAMLConnectionRequest = {
  /**
   * The ID of the SAML Connection
   */
  samlConnectionId: string;
};

/** @internal */
export const GetSAMLConnectionRequest$inboundSchema: z.ZodType<
  GetSAMLConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  saml_connection_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "saml_connection_id": "samlConnectionId",
  });
});

/** @internal */
export type GetSAMLConnectionRequest$Outbound = {
  saml_connection_id: string;
};

/** @internal */
export const GetSAMLConnectionRequest$outboundSchema: z.ZodType<
  GetSAMLConnectionRequest$Outbound,
  z.ZodTypeDef,
  GetSAMLConnectionRequest
> = z.object({
  samlConnectionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    samlConnectionId: "saml_connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSAMLConnectionRequest$ {
  /** @deprecated use `GetSAMLConnectionRequest$inboundSchema` instead. */
  export const inboundSchema = GetSAMLConnectionRequest$inboundSchema;
  /** @deprecated use `GetSAMLConnectionRequest$outboundSchema` instead. */
  export const outboundSchema = GetSAMLConnectionRequest$outboundSchema;
  /** @deprecated use `GetSAMLConnectionRequest$Outbound` instead. */
  export type Outbound = GetSAMLConnectionRequest$Outbound;
}

export function getSAMLConnectionRequestToJSON(
  getSAMLConnectionRequest: GetSAMLConnectionRequest,
): string {
  return JSON.stringify(
    GetSAMLConnectionRequest$outboundSchema.parse(getSAMLConnectionRequest),
  );
}

export function getSAMLConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSAMLConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSAMLConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSAMLConnectionRequest' from JSON`,
  );
}
