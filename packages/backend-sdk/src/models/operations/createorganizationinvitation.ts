/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateOrganizationInvitationRequestBody = {
  /**
   * The email address of the new member that is going to be invited to the organization
   */
  emailAddress: string;
  /**
   * The ID of the user that invites the new member to the organization.
   *
   * @remarks
   * Must be an administrator in the organization.
   */
  inviterUserId?: string | null | undefined;
  /**
   * The role of the new member in the organization
   */
  role: string;
  /**
   * Metadata saved on the organization invitation, read-only from the Frontend API and fully accessible (read/write) from the Backend API.
   *
   * @remarks
   * When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
   */
  publicMetadata?: { [k: string]: any } | null | undefined;
  /**
   * Metadata saved on the organization invitation, fully accessible (read/write) from the Backend API but not visible from the Frontend API.
   *
   * @remarks
   * When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
   */
  privateMetadata?: { [k: string]: any } | null | undefined;
  /**
   * Optional URL that the invitee will be redirected to once they accept the invitation by clicking the join link in the invitation email.
   */
  redirectUrl?: string | null | undefined;
  /**
   * The number of days the invitation will be valid for. By default, the invitation has a 30 days expire.
   */
  expiresInDays?: number | null | undefined;
};

export type CreateOrganizationInvitationRequest = {
  /**
   * The ID of the organization for which to send the invitation
   */
  organizationId: string;
  requestBody?: CreateOrganizationInvitationRequestBody | undefined;
};

/** @internal */
export const CreateOrganizationInvitationRequestBody$inboundSchema: z.ZodType<
  CreateOrganizationInvitationRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  email_address: z.string(),
  inviter_user_id: z.nullable(z.string()).optional(),
  role: z.string(),
  public_metadata: z.nullable(z.record(z.any())).optional(),
  private_metadata: z.nullable(z.record(z.any())).optional(),
  redirect_url: z.nullable(z.string()).optional(),
  expires_in_days: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "email_address": "emailAddress",
    "inviter_user_id": "inviterUserId",
    "public_metadata": "publicMetadata",
    "private_metadata": "privateMetadata",
    "redirect_url": "redirectUrl",
    "expires_in_days": "expiresInDays",
  });
});

/** @internal */
export type CreateOrganizationInvitationRequestBody$Outbound = {
  email_address: string;
  inviter_user_id?: string | null | undefined;
  role: string;
  public_metadata?: { [k: string]: any } | null | undefined;
  private_metadata?: { [k: string]: any } | null | undefined;
  redirect_url?: string | null | undefined;
  expires_in_days?: number | null | undefined;
};

/** @internal */
export const CreateOrganizationInvitationRequestBody$outboundSchema: z.ZodType<
  CreateOrganizationInvitationRequestBody$Outbound,
  z.ZodTypeDef,
  CreateOrganizationInvitationRequestBody
> = z.object({
  emailAddress: z.string(),
  inviterUserId: z.nullable(z.string()).optional(),
  role: z.string(),
  publicMetadata: z.nullable(z.record(z.any())).optional(),
  privateMetadata: z.nullable(z.record(z.any())).optional(),
  redirectUrl: z.nullable(z.string()).optional(),
  expiresInDays: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    emailAddress: "email_address",
    inviterUserId: "inviter_user_id",
    publicMetadata: "public_metadata",
    privateMetadata: "private_metadata",
    redirectUrl: "redirect_url",
    expiresInDays: "expires_in_days",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrganizationInvitationRequestBody$ {
  /** @deprecated use `CreateOrganizationInvitationRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateOrganizationInvitationRequestBody$inboundSchema;
  /** @deprecated use `CreateOrganizationInvitationRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateOrganizationInvitationRequestBody$outboundSchema;
  /** @deprecated use `CreateOrganizationInvitationRequestBody$Outbound` instead. */
  export type Outbound = CreateOrganizationInvitationRequestBody$Outbound;
}

export function createOrganizationInvitationRequestBodyToJSON(
  createOrganizationInvitationRequestBody:
    CreateOrganizationInvitationRequestBody,
): string {
  return JSON.stringify(
    CreateOrganizationInvitationRequestBody$outboundSchema.parse(
      createOrganizationInvitationRequestBody,
    ),
  );
}

export function createOrganizationInvitationRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateOrganizationInvitationRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateOrganizationInvitationRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateOrganizationInvitationRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateOrganizationInvitationRequest$inboundSchema: z.ZodType<
  CreateOrganizationInvitationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string(),
  RequestBody: z.lazy(() =>
    CreateOrganizationInvitationRequestBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateOrganizationInvitationRequest$Outbound = {
  organization_id: string;
  RequestBody?: CreateOrganizationInvitationRequestBody$Outbound | undefined;
};

/** @internal */
export const CreateOrganizationInvitationRequest$outboundSchema: z.ZodType<
  CreateOrganizationInvitationRequest$Outbound,
  z.ZodTypeDef,
  CreateOrganizationInvitationRequest
> = z.object({
  organizationId: z.string(),
  requestBody: z.lazy(() =>
    CreateOrganizationInvitationRequestBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrganizationInvitationRequest$ {
  /** @deprecated use `CreateOrganizationInvitationRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateOrganizationInvitationRequest$inboundSchema;
  /** @deprecated use `CreateOrganizationInvitationRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateOrganizationInvitationRequest$outboundSchema;
  /** @deprecated use `CreateOrganizationInvitationRequest$Outbound` instead. */
  export type Outbound = CreateOrganizationInvitationRequest$Outbound;
}

export function createOrganizationInvitationRequestToJSON(
  createOrganizationInvitationRequest: CreateOrganizationInvitationRequest,
): string {
  return JSON.stringify(
    CreateOrganizationInvitationRequest$outboundSchema.parse(
      createOrganizationInvitationRequest,
    ),
  );
}

export function createOrganizationInvitationRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrganizationInvitationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateOrganizationInvitationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrganizationInvitationRequest' from JSON`,
  );
}
