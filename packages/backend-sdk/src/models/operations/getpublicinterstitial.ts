/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type GetPublicInterstitialRequest = {
  /**
   * Please use `frontend_api` instead
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  frontendApiQueryParameter?: string | undefined;
  /**
   * The Frontend API key of your instance
   */
  frontendApiQueryParameter1?: string | undefined;
  /**
   * The publishable key of your instance
   */
  publishableKey?: string | undefined;
  /**
   * The proxy URL of your instance
   */
  proxyUrl?: string | undefined;
  /**
   * The domain of your instance
   */
  domain?: string | undefined;
  /**
   * The sign in URL of your instance
   */
  signInUrl?: string | undefined;
  /**
   * Whether to use the domain for the script URL
   */
  useDomainForScript?: boolean | undefined;
};

/** @internal */
export const GetPublicInterstitialRequest$inboundSchema: z.ZodType<
  GetPublicInterstitialRequest,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    frontendApiQueryParameter: z.string().optional(),
    frontend_apiQueryParameter1: z.string().optional(),
    publishable_key: z.string().optional(),
    proxy_url: z.string().optional(),
    domain: z.string().optional(),
    sign_in_url: z.string().optional(),
    use_domain_for_script: z.boolean().optional(),
  })
  .transform(v => {
    return remap$(v, {
      frontend_apiQueryParameter1: 'frontendApiQueryParameter1',
      publishable_key: 'publishableKey',
      proxy_url: 'proxyUrl',
      sign_in_url: 'signInUrl',
      use_domain_for_script: 'useDomainForScript',
    });
  });

/** @internal */
export type GetPublicInterstitialRequest$Outbound = {
  frontendApiQueryParameter?: string | undefined;
  frontend_apiQueryParameter1?: string | undefined;
  publishable_key?: string | undefined;
  proxy_url?: string | undefined;
  domain?: string | undefined;
  sign_in_url?: string | undefined;
  use_domain_for_script?: boolean | undefined;
};

/** @internal */
export const GetPublicInterstitialRequest$outboundSchema: z.ZodType<
  GetPublicInterstitialRequest$Outbound,
  z.ZodTypeDef,
  GetPublicInterstitialRequest
> = z
  .object({
    frontendApiQueryParameter: z.string().optional(),
    frontendApiQueryParameter1: z.string().optional(),
    publishableKey: z.string().optional(),
    proxyUrl: z.string().optional(),
    domain: z.string().optional(),
    signInUrl: z.string().optional(),
    useDomainForScript: z.boolean().optional(),
  })
  .transform(v => {
    return remap$(v, {
      frontendApiQueryParameter1: 'frontend_apiQueryParameter1',
      publishableKey: 'publishable_key',
      proxyUrl: 'proxy_url',
      signInUrl: 'sign_in_url',
      useDomainForScript: 'use_domain_for_script',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPublicInterstitialRequest$ {
  /** @deprecated use `GetPublicInterstitialRequest$inboundSchema` instead. */
  export const inboundSchema = GetPublicInterstitialRequest$inboundSchema;
  /** @deprecated use `GetPublicInterstitialRequest$outboundSchema` instead. */
  export const outboundSchema = GetPublicInterstitialRequest$outboundSchema;
  /** @deprecated use `GetPublicInterstitialRequest$Outbound` instead. */
  export type Outbound = GetPublicInterstitialRequest$Outbound;
}

export function getPublicInterstitialRequestToJSON(getPublicInterstitialRequest: GetPublicInterstitialRequest): string {
  return JSON.stringify(GetPublicInterstitialRequest$outboundSchema.parse(getPublicInterstitialRequest));
}

export function getPublicInterstitialRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPublicInterstitialRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => GetPublicInterstitialRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPublicInterstitialRequest' from JSON`,
  );
}
