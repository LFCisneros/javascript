/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type UpdateOrganizationRequestBody = {
  /**
   * Metadata saved on the organization, that is visible to both your frontend and backend.
   */
  publicMetadata?: { [k: string]: any } | null | undefined;
  /**
   * Metadata saved on the organization that is only visible to your backend.
   */
  privateMetadata?: { [k: string]: any } | null | undefined;
  /**
   * The new name of the organization.
   *
   * @remarks
   * May not contain URLs or HTML.
   * Max length: 256
   */
  name?: string | null | undefined;
  /**
   * The new slug of the organization, which needs to be unique in the instance
   */
  slug?: string | null | undefined;
  /**
   * The maximum number of memberships allowed for this organization
   */
  maxAllowedMemberships?: number | null | undefined;
  /**
   * If true, an admin can delete this organization with the Frontend API.
   */
  adminDeleteEnabled?: boolean | null | undefined;
  /**
   * A custom date/time denoting _when_ the organization was created, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
   */
  createdAt?: string | null | undefined;
};

export type UpdateOrganizationRequest = {
  /**
   * The ID of the organization to update
   */
  organizationId: string;
  requestBody: UpdateOrganizationRequestBody;
};

/** @internal */
export const UpdateOrganizationRequestBody$inboundSchema: z.ZodType<
  UpdateOrganizationRequestBody,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    public_metadata: z.nullable(z.record(z.any())).optional(),
    private_metadata: z.nullable(z.record(z.any())).optional(),
    name: z.nullable(z.string()).optional(),
    slug: z.nullable(z.string()).optional(),
    max_allowed_memberships: z.nullable(z.number().int()).optional(),
    admin_delete_enabled: z.nullable(z.boolean()).optional(),
    created_at: z.nullable(z.string()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      public_metadata: 'publicMetadata',
      private_metadata: 'privateMetadata',
      max_allowed_memberships: 'maxAllowedMemberships',
      admin_delete_enabled: 'adminDeleteEnabled',
      created_at: 'createdAt',
    });
  });

/** @internal */
export type UpdateOrganizationRequestBody$Outbound = {
  public_metadata?: { [k: string]: any } | null | undefined;
  private_metadata?: { [k: string]: any } | null | undefined;
  name?: string | null | undefined;
  slug?: string | null | undefined;
  max_allowed_memberships?: number | null | undefined;
  admin_delete_enabled?: boolean | null | undefined;
  created_at?: string | null | undefined;
};

/** @internal */
export const UpdateOrganizationRequestBody$outboundSchema: z.ZodType<
  UpdateOrganizationRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateOrganizationRequestBody
> = z
  .object({
    publicMetadata: z.nullable(z.record(z.any())).optional(),
    privateMetadata: z.nullable(z.record(z.any())).optional(),
    name: z.nullable(z.string()).optional(),
    slug: z.nullable(z.string()).optional(),
    maxAllowedMemberships: z.nullable(z.number().int()).optional(),
    adminDeleteEnabled: z.nullable(z.boolean()).optional(),
    createdAt: z.nullable(z.string()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      publicMetadata: 'public_metadata',
      privateMetadata: 'private_metadata',
      maxAllowedMemberships: 'max_allowed_memberships',
      adminDeleteEnabled: 'admin_delete_enabled',
      createdAt: 'created_at',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOrganizationRequestBody$ {
  /** @deprecated use `UpdateOrganizationRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateOrganizationRequestBody$inboundSchema;
  /** @deprecated use `UpdateOrganizationRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateOrganizationRequestBody$outboundSchema;
  /** @deprecated use `UpdateOrganizationRequestBody$Outbound` instead. */
  export type Outbound = UpdateOrganizationRequestBody$Outbound;
}

export function updateOrganizationRequestBodyToJSON(
  updateOrganizationRequestBody: UpdateOrganizationRequestBody,
): string {
  return JSON.stringify(UpdateOrganizationRequestBody$outboundSchema.parse(updateOrganizationRequestBody));
}

export function updateOrganizationRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOrganizationRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    x => UpdateOrganizationRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOrganizationRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateOrganizationRequest$inboundSchema: z.ZodType<UpdateOrganizationRequest, z.ZodTypeDef, unknown> = z
  .object({
    organization_id: z.string(),
    RequestBody: z.lazy(() => UpdateOrganizationRequestBody$inboundSchema),
  })
  .transform(v => {
    return remap$(v, {
      organization_id: 'organizationId',
      RequestBody: 'requestBody',
    });
  });

/** @internal */
export type UpdateOrganizationRequest$Outbound = {
  organization_id: string;
  RequestBody: UpdateOrganizationRequestBody$Outbound;
};

/** @internal */
export const UpdateOrganizationRequest$outboundSchema: z.ZodType<
  UpdateOrganizationRequest$Outbound,
  z.ZodTypeDef,
  UpdateOrganizationRequest
> = z
  .object({
    organizationId: z.string(),
    requestBody: z.lazy(() => UpdateOrganizationRequestBody$outboundSchema),
  })
  .transform(v => {
    return remap$(v, {
      organizationId: 'organization_id',
      requestBody: 'RequestBody',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOrganizationRequest$ {
  /** @deprecated use `UpdateOrganizationRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateOrganizationRequest$inboundSchema;
  /** @deprecated use `UpdateOrganizationRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateOrganizationRequest$outboundSchema;
  /** @deprecated use `UpdateOrganizationRequest$Outbound` instead. */
  export type Outbound = UpdateOrganizationRequest$Outbound;
}

export function updateOrganizationRequestToJSON(updateOrganizationRequest: UpdateOrganizationRequest): string {
  return JSON.stringify(UpdateOrganizationRequest$outboundSchema.parse(updateOrganizationRequest));
}

export function updateOrganizationRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOrganizationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => UpdateOrganizationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOrganizationRequest' from JSON`,
  );
}
