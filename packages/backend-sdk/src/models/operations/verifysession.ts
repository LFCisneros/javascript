/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

/**
 * Parameters.
 */
export type VerifySessionRequestBody = {
  /**
   * The JWT that is sent via the `__session` cookie from your frontend.
   *
   * @remarks
   * Note: this JWT must be associated with the supplied session ID.
   */
  token?: string | undefined;
};

export type VerifySessionRequest = {
  /**
   * The ID of the session
   */
  sessionId: string;
  /**
   * Parameters.
   */
  requestBody?: VerifySessionRequestBody | undefined;
};

/** @internal */
export const VerifySessionRequestBody$inboundSchema: z.ZodType<VerifySessionRequestBody, z.ZodTypeDef, unknown> =
  z.object({
    token: z.string().optional(),
  });

/** @internal */
export type VerifySessionRequestBody$Outbound = {
  token?: string | undefined;
};

/** @internal */
export const VerifySessionRequestBody$outboundSchema: z.ZodType<
  VerifySessionRequestBody$Outbound,
  z.ZodTypeDef,
  VerifySessionRequestBody
> = z.object({
  token: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifySessionRequestBody$ {
  /** @deprecated use `VerifySessionRequestBody$inboundSchema` instead. */
  export const inboundSchema = VerifySessionRequestBody$inboundSchema;
  /** @deprecated use `VerifySessionRequestBody$outboundSchema` instead. */
  export const outboundSchema = VerifySessionRequestBody$outboundSchema;
  /** @deprecated use `VerifySessionRequestBody$Outbound` instead. */
  export type Outbound = VerifySessionRequestBody$Outbound;
}

export function verifySessionRequestBodyToJSON(verifySessionRequestBody: VerifySessionRequestBody): string {
  return JSON.stringify(VerifySessionRequestBody$outboundSchema.parse(verifySessionRequestBody));
}

export function verifySessionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VerifySessionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    x => VerifySessionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifySessionRequestBody' from JSON`,
  );
}

/** @internal */
export const VerifySessionRequest$inboundSchema: z.ZodType<VerifySessionRequest, z.ZodTypeDef, unknown> = z
  .object({
    session_id: z.string(),
    RequestBody: z.lazy(() => VerifySessionRequestBody$inboundSchema).optional(),
  })
  .transform(v => {
    return remap$(v, {
      session_id: 'sessionId',
      RequestBody: 'requestBody',
    });
  });

/** @internal */
export type VerifySessionRequest$Outbound = {
  session_id: string;
  RequestBody?: VerifySessionRequestBody$Outbound | undefined;
};

/** @internal */
export const VerifySessionRequest$outboundSchema: z.ZodType<
  VerifySessionRequest$Outbound,
  z.ZodTypeDef,
  VerifySessionRequest
> = z
  .object({
    sessionId: z.string(),
    requestBody: z.lazy(() => VerifySessionRequestBody$outboundSchema).optional(),
  })
  .transform(v => {
    return remap$(v, {
      sessionId: 'session_id',
      requestBody: 'RequestBody',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifySessionRequest$ {
  /** @deprecated use `VerifySessionRequest$inboundSchema` instead. */
  export const inboundSchema = VerifySessionRequest$inboundSchema;
  /** @deprecated use `VerifySessionRequest$outboundSchema` instead. */
  export const outboundSchema = VerifySessionRequest$outboundSchema;
  /** @deprecated use `VerifySessionRequest$Outbound` instead. */
  export type Outbound = VerifySessionRequest$Outbound;
}

export function verifySessionRequestToJSON(verifySessionRequest: VerifySessionRequest): string {
  return JSON.stringify(VerifySessionRequest$outboundSchema.parse(verifySessionRequest));
}

export function verifySessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<VerifySessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => VerifySessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifySessionRequest' from JSON`,
  );
}
