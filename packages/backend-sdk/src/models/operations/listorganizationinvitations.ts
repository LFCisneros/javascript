/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

/**
 * Filter organization invitations based on their status
 */
export const ListOrganizationInvitationsQueryParamStatus = {
  Pending: 'pending',
  Accepted: 'accepted',
  Revoked: 'revoked',
} as const;
/**
 * Filter organization invitations based on their status
 */
export type ListOrganizationInvitationsQueryParamStatus = ClosedEnum<
  typeof ListOrganizationInvitationsQueryParamStatus
>;

export type ListOrganizationInvitationsRequest = {
  /**
   * The organization ID.
   */
  organizationId: string;
  /**
   * Filter organization invitations based on their status
   */
  status?: ListOrganizationInvitationsQueryParamStatus | undefined;
  /**
   * Applies a limit to the number of results returned.
   *
   * @remarks
   * Can be used for paginating the results together with `offset`.
   */
  limit?: number | undefined;
  /**
   * Skip the first `offset` results when paginating.
   *
   * @remarks
   * Needs to be an integer greater or equal to zero.
   * To be used in conjunction with `limit`.
   */
  offset?: number | undefined;
};

/** @internal */
export const ListOrganizationInvitationsQueryParamStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListOrganizationInvitationsQueryParamStatus
> = z.nativeEnum(ListOrganizationInvitationsQueryParamStatus);

/** @internal */
export const ListOrganizationInvitationsQueryParamStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListOrganizationInvitationsQueryParamStatus
> = ListOrganizationInvitationsQueryParamStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrganizationInvitationsQueryParamStatus$ {
  /** @deprecated use `ListOrganizationInvitationsQueryParamStatus$inboundSchema` instead. */
  export const inboundSchema = ListOrganizationInvitationsQueryParamStatus$inboundSchema;
  /** @deprecated use `ListOrganizationInvitationsQueryParamStatus$outboundSchema` instead. */
  export const outboundSchema = ListOrganizationInvitationsQueryParamStatus$outboundSchema;
}

/** @internal */
export const ListOrganizationInvitationsRequest$inboundSchema: z.ZodType<
  ListOrganizationInvitationsRequest,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    organization_id: z.string(),
    status: ListOrganizationInvitationsQueryParamStatus$inboundSchema.optional(),
    limit: z.number().int().default(10),
    offset: z.number().int().default(0),
  })
  .transform(v => {
    return remap$(v, {
      organization_id: 'organizationId',
    });
  });

/** @internal */
export type ListOrganizationInvitationsRequest$Outbound = {
  organization_id: string;
  status?: string | undefined;
  limit: number;
  offset: number;
};

/** @internal */
export const ListOrganizationInvitationsRequest$outboundSchema: z.ZodType<
  ListOrganizationInvitationsRequest$Outbound,
  z.ZodTypeDef,
  ListOrganizationInvitationsRequest
> = z
  .object({
    organizationId: z.string(),
    status: ListOrganizationInvitationsQueryParamStatus$outboundSchema.optional(),
    limit: z.number().int().default(10),
    offset: z.number().int().default(0),
  })
  .transform(v => {
    return remap$(v, {
      organizationId: 'organization_id',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrganizationInvitationsRequest$ {
  /** @deprecated use `ListOrganizationInvitationsRequest$inboundSchema` instead. */
  export const inboundSchema = ListOrganizationInvitationsRequest$inboundSchema;
  /** @deprecated use `ListOrganizationInvitationsRequest$outboundSchema` instead. */
  export const outboundSchema = ListOrganizationInvitationsRequest$outboundSchema;
  /** @deprecated use `ListOrganizationInvitationsRequest$Outbound` instead. */
  export type Outbound = ListOrganizationInvitationsRequest$Outbound;
}

export function listOrganizationInvitationsRequestToJSON(
  listOrganizationInvitationsRequest: ListOrganizationInvitationsRequest,
): string {
  return JSON.stringify(ListOrganizationInvitationsRequest$outboundSchema.parse(listOrganizationInvitationsRequest));
}

export function listOrganizationInvitationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListOrganizationInvitationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => ListOrganizationInvitationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrganizationInvitationsRequest' from JSON`,
  );
}
