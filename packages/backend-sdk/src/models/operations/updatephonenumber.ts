/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type UpdatePhoneNumberRequestBody = {
  /**
   * The phone number will be marked as verified.
   */
  verified?: boolean | null | undefined;
  /**
   * Set this phone number as the primary phone number for the user.
   */
  primary?: boolean | null | undefined;
  /**
   * Set this phone number as reserved for multi-factor authentication.
   *
   * @remarks
   * The phone number must also be verified.
   * If there are no other reserved second factors, the phone number will be set as the default second factor.
   */
  reservedForSecondFactor?: boolean | null | undefined;
};

export type UpdatePhoneNumberRequest = {
  /**
   * The ID of the phone number to update
   */
  phoneNumberId: string;
  requestBody?: UpdatePhoneNumberRequestBody | undefined;
};

/** @internal */
export const UpdatePhoneNumberRequestBody$inboundSchema: z.ZodType<
  UpdatePhoneNumberRequestBody,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    verified: z.nullable(z.boolean()).optional(),
    primary: z.nullable(z.boolean()).optional(),
    reserved_for_second_factor: z.nullable(z.boolean()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      reserved_for_second_factor: 'reservedForSecondFactor',
    });
  });

/** @internal */
export type UpdatePhoneNumberRequestBody$Outbound = {
  verified?: boolean | null | undefined;
  primary?: boolean | null | undefined;
  reserved_for_second_factor?: boolean | null | undefined;
};

/** @internal */
export const UpdatePhoneNumberRequestBody$outboundSchema: z.ZodType<
  UpdatePhoneNumberRequestBody$Outbound,
  z.ZodTypeDef,
  UpdatePhoneNumberRequestBody
> = z
  .object({
    verified: z.nullable(z.boolean()).optional(),
    primary: z.nullable(z.boolean()).optional(),
    reservedForSecondFactor: z.nullable(z.boolean()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      reservedForSecondFactor: 'reserved_for_second_factor',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePhoneNumberRequestBody$ {
  /** @deprecated use `UpdatePhoneNumberRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdatePhoneNumberRequestBody$inboundSchema;
  /** @deprecated use `UpdatePhoneNumberRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdatePhoneNumberRequestBody$outboundSchema;
  /** @deprecated use `UpdatePhoneNumberRequestBody$Outbound` instead. */
  export type Outbound = UpdatePhoneNumberRequestBody$Outbound;
}

export function updatePhoneNumberRequestBodyToJSON(updatePhoneNumberRequestBody: UpdatePhoneNumberRequestBody): string {
  return JSON.stringify(UpdatePhoneNumberRequestBody$outboundSchema.parse(updatePhoneNumberRequestBody));
}

export function updatePhoneNumberRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePhoneNumberRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    x => UpdatePhoneNumberRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePhoneNumberRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdatePhoneNumberRequest$inboundSchema: z.ZodType<UpdatePhoneNumberRequest, z.ZodTypeDef, unknown> = z
  .object({
    phone_number_id: z.string(),
    RequestBody: z.lazy(() => UpdatePhoneNumberRequestBody$inboundSchema).optional(),
  })
  .transform(v => {
    return remap$(v, {
      phone_number_id: 'phoneNumberId',
      RequestBody: 'requestBody',
    });
  });

/** @internal */
export type UpdatePhoneNumberRequest$Outbound = {
  phone_number_id: string;
  RequestBody?: UpdatePhoneNumberRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdatePhoneNumberRequest$outboundSchema: z.ZodType<
  UpdatePhoneNumberRequest$Outbound,
  z.ZodTypeDef,
  UpdatePhoneNumberRequest
> = z
  .object({
    phoneNumberId: z.string(),
    requestBody: z.lazy(() => UpdatePhoneNumberRequestBody$outboundSchema).optional(),
  })
  .transform(v => {
    return remap$(v, {
      phoneNumberId: 'phone_number_id',
      requestBody: 'RequestBody',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePhoneNumberRequest$ {
  /** @deprecated use `UpdatePhoneNumberRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePhoneNumberRequest$inboundSchema;
  /** @deprecated use `UpdatePhoneNumberRequest$outboundSchema` instead. */
  export const outboundSchema = UpdatePhoneNumberRequest$outboundSchema;
  /** @deprecated use `UpdatePhoneNumberRequest$Outbound` instead. */
  export type Outbound = UpdatePhoneNumberRequest$Outbound;
}

export function updatePhoneNumberRequestToJSON(updatePhoneNumberRequest: UpdatePhoneNumberRequest): string {
  return JSON.stringify(UpdatePhoneNumberRequest$outboundSchema.parse(updatePhoneNumberRequest));
}

export function updatePhoneNumberRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePhoneNumberRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => UpdatePhoneNumberRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePhoneNumberRequest' from JSON`,
  );
}
