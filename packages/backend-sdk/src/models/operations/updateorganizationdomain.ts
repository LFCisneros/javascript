/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateOrganizationDomainRequestBody = {
  /**
   * The enrollment_mode for the new domain. This can be `automatic_invitation`, `automatic_suggestion` or `manual_invitation`
   */
  enrollmentMode?: string | null | undefined;
  /**
   * The status of the domain's verification
   */
  verified?: boolean | null | undefined;
};

export type UpdateOrganizationDomainRequest = {
  /**
   * The ID of the organization the domain belongs to
   */
  organizationId: string;
  /**
   * The ID of the domain
   */
  domainId: string;
  requestBody: UpdateOrganizationDomainRequestBody;
};

/** @internal */
export const UpdateOrganizationDomainRequestBody$inboundSchema: z.ZodType<
  UpdateOrganizationDomainRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  enrollment_mode: z.nullable(z.string()).optional(),
  verified: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "enrollment_mode": "enrollmentMode",
  });
});

/** @internal */
export type UpdateOrganizationDomainRequestBody$Outbound = {
  enrollment_mode?: string | null | undefined;
  verified?: boolean | null | undefined;
};

/** @internal */
export const UpdateOrganizationDomainRequestBody$outboundSchema: z.ZodType<
  UpdateOrganizationDomainRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateOrganizationDomainRequestBody
> = z.object({
  enrollmentMode: z.nullable(z.string()).optional(),
  verified: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    enrollmentMode: "enrollment_mode",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOrganizationDomainRequestBody$ {
  /** @deprecated use `UpdateOrganizationDomainRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateOrganizationDomainRequestBody$inboundSchema;
  /** @deprecated use `UpdateOrganizationDomainRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOrganizationDomainRequestBody$outboundSchema;
  /** @deprecated use `UpdateOrganizationDomainRequestBody$Outbound` instead. */
  export type Outbound = UpdateOrganizationDomainRequestBody$Outbound;
}

export function updateOrganizationDomainRequestBodyToJSON(
  updateOrganizationDomainRequestBody: UpdateOrganizationDomainRequestBody,
): string {
  return JSON.stringify(
    UpdateOrganizationDomainRequestBody$outboundSchema.parse(
      updateOrganizationDomainRequestBody,
    ),
  );
}

export function updateOrganizationDomainRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOrganizationDomainRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateOrganizationDomainRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOrganizationDomainRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateOrganizationDomainRequest$inboundSchema: z.ZodType<
  UpdateOrganizationDomainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string(),
  domain_id: z.string(),
  RequestBody: z.lazy(() => UpdateOrganizationDomainRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "domain_id": "domainId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateOrganizationDomainRequest$Outbound = {
  organization_id: string;
  domain_id: string;
  RequestBody: UpdateOrganizationDomainRequestBody$Outbound;
};

/** @internal */
export const UpdateOrganizationDomainRequest$outboundSchema: z.ZodType<
  UpdateOrganizationDomainRequest$Outbound,
  z.ZodTypeDef,
  UpdateOrganizationDomainRequest
> = z.object({
  organizationId: z.string(),
  domainId: z.string(),
  requestBody: z.lazy(() => UpdateOrganizationDomainRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    domainId: "domain_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOrganizationDomainRequest$ {
  /** @deprecated use `UpdateOrganizationDomainRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateOrganizationDomainRequest$inboundSchema;
  /** @deprecated use `UpdateOrganizationDomainRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateOrganizationDomainRequest$outboundSchema;
  /** @deprecated use `UpdateOrganizationDomainRequest$Outbound` instead. */
  export type Outbound = UpdateOrganizationDomainRequest$Outbound;
}

export function updateOrganizationDomainRequestToJSON(
  updateOrganizationDomainRequest: UpdateOrganizationDomainRequest,
): string {
  return JSON.stringify(
    UpdateOrganizationDomainRequest$outboundSchema.parse(
      updateOrganizationDomainRequest,
    ),
  );
}

export function updateOrganizationDomainRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOrganizationDomainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateOrganizationDomainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOrganizationDomainRequest' from JSON`,
  );
}
