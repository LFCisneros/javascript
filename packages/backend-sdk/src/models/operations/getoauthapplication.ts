/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type GetOAuthApplicationRequest = {
  /**
   * The ID of the OAuth application
   */
  oauthApplicationId: string;
};

/** @internal */
export const GetOAuthApplicationRequest$inboundSchema: z.ZodType<GetOAuthApplicationRequest, z.ZodTypeDef, unknown> = z
  .object({
    oauth_application_id: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      oauth_application_id: 'oauthApplicationId',
    });
  });

/** @internal */
export type GetOAuthApplicationRequest$Outbound = {
  oauth_application_id: string;
};

/** @internal */
export const GetOAuthApplicationRequest$outboundSchema: z.ZodType<
  GetOAuthApplicationRequest$Outbound,
  z.ZodTypeDef,
  GetOAuthApplicationRequest
> = z
  .object({
    oauthApplicationId: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      oauthApplicationId: 'oauth_application_id',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOAuthApplicationRequest$ {
  /** @deprecated use `GetOAuthApplicationRequest$inboundSchema` instead. */
  export const inboundSchema = GetOAuthApplicationRequest$inboundSchema;
  /** @deprecated use `GetOAuthApplicationRequest$outboundSchema` instead. */
  export const outboundSchema = GetOAuthApplicationRequest$outboundSchema;
  /** @deprecated use `GetOAuthApplicationRequest$Outbound` instead. */
  export type Outbound = GetOAuthApplicationRequest$Outbound;
}

export function getOAuthApplicationRequestToJSON(getOAuthApplicationRequest: GetOAuthApplicationRequest): string {
  return JSON.stringify(GetOAuthApplicationRequest$outboundSchema.parse(getOAuthApplicationRequest));
}

export function getOAuthApplicationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOAuthApplicationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => GetOAuthApplicationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOAuthApplicationRequest' from JSON`,
  );
}
