/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

/**
 * The format of the response.
 */
export const Format = {
  Token: 'token',
  Cookie: 'cookie',
} as const;
/**
 * The format of the response.
 */
export type Format = ClosedEnum<typeof Format>;

/**
 * Refresh session parameters
 */
export type RefreshSessionRequestBody = {
  /**
   * The JWT that is sent via the `__session` cookie from your frontend.
   *
   * @remarks
   * Note: this JWT must be associated with the supplied session ID.
   */
  expiredToken: string;
  /**
   * The JWT that is sent via the `__session` cookie from your frontend.
   */
  refreshToken: string;
  /**
   * The origin of the request.
   */
  requestOrigin: string;
  /**
   * The headers of the request.
   */
  requestHeaders?: { [k: string]: any } | null | undefined;
  /**
   * The format of the response.
   */
  format?: Format | null | undefined;
  /**
   * The IP address of the request.
   */
  requestOriginatingIp?: string | null | undefined;
};

export type RefreshSessionRequest = {
  /**
   * The ID of the session
   */
  sessionId: string;
  /**
   * Refresh session parameters
   */
  requestBody?: RefreshSessionRequestBody | undefined;
};

/** @internal */
export const Format$inboundSchema: z.ZodNativeEnum<typeof Format> = z.nativeEnum(Format);

/** @internal */
export const Format$outboundSchema: z.ZodNativeEnum<typeof Format> = Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Format$ {
  /** @deprecated use `Format$inboundSchema` instead. */
  export const inboundSchema = Format$inboundSchema;
  /** @deprecated use `Format$outboundSchema` instead. */
  export const outboundSchema = Format$outboundSchema;
}

/** @internal */
export const RefreshSessionRequestBody$inboundSchema: z.ZodType<RefreshSessionRequestBody, z.ZodTypeDef, unknown> = z
  .object({
    expired_token: z.string(),
    refresh_token: z.string(),
    request_origin: z.string(),
    request_headers: z.nullable(z.record(z.any())).optional(),
    format: z.nullable(Format$inboundSchema.default('token')),
    request_originating_ip: z.nullable(z.string()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      expired_token: 'expiredToken',
      refresh_token: 'refreshToken',
      request_origin: 'requestOrigin',
      request_headers: 'requestHeaders',
      request_originating_ip: 'requestOriginatingIp',
    });
  });

/** @internal */
export type RefreshSessionRequestBody$Outbound = {
  expired_token: string;
  refresh_token: string;
  request_origin: string;
  request_headers?: { [k: string]: any } | null | undefined;
  format: string | null;
  request_originating_ip?: string | null | undefined;
};

/** @internal */
export const RefreshSessionRequestBody$outboundSchema: z.ZodType<
  RefreshSessionRequestBody$Outbound,
  z.ZodTypeDef,
  RefreshSessionRequestBody
> = z
  .object({
    expiredToken: z.string(),
    refreshToken: z.string(),
    requestOrigin: z.string(),
    requestHeaders: z.nullable(z.record(z.any())).optional(),
    format: z.nullable(Format$outboundSchema.default('token')),
    requestOriginatingIp: z.nullable(z.string()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      expiredToken: 'expired_token',
      refreshToken: 'refresh_token',
      requestOrigin: 'request_origin',
      requestHeaders: 'request_headers',
      requestOriginatingIp: 'request_originating_ip',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefreshSessionRequestBody$ {
  /** @deprecated use `RefreshSessionRequestBody$inboundSchema` instead. */
  export const inboundSchema = RefreshSessionRequestBody$inboundSchema;
  /** @deprecated use `RefreshSessionRequestBody$outboundSchema` instead. */
  export const outboundSchema = RefreshSessionRequestBody$outboundSchema;
  /** @deprecated use `RefreshSessionRequestBody$Outbound` instead. */
  export type Outbound = RefreshSessionRequestBody$Outbound;
}

export function refreshSessionRequestBodyToJSON(refreshSessionRequestBody: RefreshSessionRequestBody): string {
  return JSON.stringify(RefreshSessionRequestBody$outboundSchema.parse(refreshSessionRequestBody));
}

export function refreshSessionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RefreshSessionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    x => RefreshSessionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefreshSessionRequestBody' from JSON`,
  );
}

/** @internal */
export const RefreshSessionRequest$inboundSchema: z.ZodType<RefreshSessionRequest, z.ZodTypeDef, unknown> = z
  .object({
    session_id: z.string(),
    RequestBody: z.lazy(() => RefreshSessionRequestBody$inboundSchema).optional(),
  })
  .transform(v => {
    return remap$(v, {
      session_id: 'sessionId',
      RequestBody: 'requestBody',
    });
  });

/** @internal */
export type RefreshSessionRequest$Outbound = {
  session_id: string;
  RequestBody?: RefreshSessionRequestBody$Outbound | undefined;
};

/** @internal */
export const RefreshSessionRequest$outboundSchema: z.ZodType<
  RefreshSessionRequest$Outbound,
  z.ZodTypeDef,
  RefreshSessionRequest
> = z
  .object({
    sessionId: z.string(),
    requestBody: z.lazy(() => RefreshSessionRequestBody$outboundSchema).optional(),
  })
  .transform(v => {
    return remap$(v, {
      sessionId: 'session_id',
      requestBody: 'RequestBody',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefreshSessionRequest$ {
  /** @deprecated use `RefreshSessionRequest$inboundSchema` instead. */
  export const inboundSchema = RefreshSessionRequest$inboundSchema;
  /** @deprecated use `RefreshSessionRequest$outboundSchema` instead. */
  export const outboundSchema = RefreshSessionRequest$outboundSchema;
  /** @deprecated use `RefreshSessionRequest$Outbound` instead. */
  export type Outbound = RefreshSessionRequest$Outbound;
}

export function refreshSessionRequestToJSON(refreshSessionRequest: RefreshSessionRequest): string {
  return JSON.stringify(RefreshSessionRequest$outboundSchema.parse(refreshSessionRequest));
}

export function refreshSessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<RefreshSessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => RefreshSessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefreshSessionRequest' from JSON`,
  );
}
