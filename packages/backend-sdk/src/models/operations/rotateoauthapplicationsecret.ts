/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RotateOAuthApplicationSecretRequest = {
  /**
   * The ID of the OAuth application for which to rotate the client secret
   */
  oauthApplicationId: string;
};

/** @internal */
export const RotateOAuthApplicationSecretRequest$inboundSchema: z.ZodType<
  RotateOAuthApplicationSecretRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  oauth_application_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "oauth_application_id": "oauthApplicationId",
  });
});

/** @internal */
export type RotateOAuthApplicationSecretRequest$Outbound = {
  oauth_application_id: string;
};

/** @internal */
export const RotateOAuthApplicationSecretRequest$outboundSchema: z.ZodType<
  RotateOAuthApplicationSecretRequest$Outbound,
  z.ZodTypeDef,
  RotateOAuthApplicationSecretRequest
> = z.object({
  oauthApplicationId: z.string(),
}).transform((v) => {
  return remap$(v, {
    oauthApplicationId: "oauth_application_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RotateOAuthApplicationSecretRequest$ {
  /** @deprecated use `RotateOAuthApplicationSecretRequest$inboundSchema` instead. */
  export const inboundSchema =
    RotateOAuthApplicationSecretRequest$inboundSchema;
  /** @deprecated use `RotateOAuthApplicationSecretRequest$outboundSchema` instead. */
  export const outboundSchema =
    RotateOAuthApplicationSecretRequest$outboundSchema;
  /** @deprecated use `RotateOAuthApplicationSecretRequest$Outbound` instead. */
  export type Outbound = RotateOAuthApplicationSecretRequest$Outbound;
}

export function rotateOAuthApplicationSecretRequestToJSON(
  rotateOAuthApplicationSecretRequest: RotateOAuthApplicationSecretRequest,
): string {
  return JSON.stringify(
    RotateOAuthApplicationSecretRequest$outboundSchema.parse(
      rotateOAuthApplicationSecretRequest,
    ),
  );
}

export function rotateOAuthApplicationSecretRequestFromJSON(
  jsonString: string,
): SafeParseResult<RotateOAuthApplicationSecretRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RotateOAuthApplicationSecretRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RotateOAuthApplicationSecretRequest' from JSON`,
  );
}
