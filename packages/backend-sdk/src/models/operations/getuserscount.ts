/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetUsersCountRequest = {
  /**
   * Counts users with the specified email addresses.
   *
   * @remarks
   * Accepts up to 100 email addresses.
   * Any email addresses not found are ignored.
   */
  emailAddress?: Array<string> | undefined;
  /**
   * Counts users with the specified phone numbers.
   *
   * @remarks
   * Accepts up to 100 phone numbers.
   * Any phone numbers not found are ignored.
   */
  phoneNumber?: Array<string> | undefined;
  /**
   * Counts users with the specified external ids.
   *
   * @remarks
   * Accepts up to 100 external ids.
   * Any external ids not found are ignored.
   */
  externalId?: Array<string> | undefined;
  /**
   * Counts users with the specified usernames.
   *
   * @remarks
   * Accepts up to 100 usernames.
   * Any usernames not found are ignored.
   */
  username?: Array<string> | undefined;
  /**
   * Counts users with the specified web3 wallet addresses.
   *
   * @remarks
   * Accepts up to 100 web3 wallet addresses.
   * Any web3 wallet addressed not found are ignored.
   */
  web3Wallet?: Array<string> | undefined;
  /**
   * Counts users with the user ids specified.
   *
   * @remarks
   * Accepts up to 100 user ids.
   * Any user ids not found are ignored.
   */
  userId?: Array<string> | undefined;
  /**
   * Returns users that have memberships to the given organizations. For each organization id, the `+` and `-`
   *
   * @remarks
   * can be prepended to the id, which denote whether the respective organization should be included or
   * excluded from the result set. Accepts up to 100 organization ids.
   */
  organizationId?: Array<string> | undefined;
  /**
   * Counts users that match the given query.
   *
   * @remarks
   * For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.
   * The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well.
   */
  query?: string | undefined;
  /**
   * Counts users with emails that match the given query, via case-insensitive partial match.
   *
   * @remarks
   * For example, `email_address_query=ello` will match a user with the email `HELLO@example.com`,
   * and will be included in the resulting count.
   */
  emailAddressQuery?: string | undefined;
  /**
   * Counts users with phone numbers that match the given query, via case-insensitive partial match.
   *
   * @remarks
   * For example, `phone_number_query=555` will match a user with the phone number `+1555xxxxxxx`,
   * and will be included in the resulting count.
   */
  phoneNumberQuery?: string | undefined;
  /**
   * Counts users with usernames that match the given query, via case-insensitive partial match.
   *
   * @remarks
   * For example, `username_query=CoolUser` will match a user with the username `SomeCoolUser`,
   * and will be included in the resulting count.
   */
  usernameQuery?: string | undefined;
  /**
   * Returns users with names that match the given query, via case-insensitive partial match.
   */
  nameQuery?: string | undefined;
  /**
   * Counts users which are either banned (`banned=true`) or not banned (`banned=false`).
   */
  banned?: boolean | undefined;
  /**
   * Returns users whose last session activity was before the given date (with millisecond precision).
   *
   * @remarks
   * Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.
   */
  lastActiveAtBefore?: number | undefined;
  /**
   * Returns users whose last session activity was after the given date (with millisecond precision).
   *
   * @remarks
   * Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.
   */
  lastActiveAtAfter?: number | undefined;
  /**
   * Returns users that had session activity since the given date.
   *
   * @remarks
   * Example: use 1700690400000 to retrieve users that had session activity from 2023-11-23 until the current day.
   * Deprecated in favor of `last_active_at_after`.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  lastActiveAtSince?: number | undefined;
  /**
   * Returns users who have been created before the given date (with millisecond precision).
   *
   * @remarks
   * Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.
   */
  createdAtBefore?: number | undefined;
  /**
   * Returns users who have been created after the given date (with millisecond precision).
   *
   * @remarks
   * Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.
   */
  createdAtAfter?: number | undefined;
};

/** @internal */
export const GetUsersCountRequest$inboundSchema: z.ZodType<
  GetUsersCountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  email_address: z.array(z.string()).optional(),
  phone_number: z.array(z.string()).optional(),
  external_id: z.array(z.string()).optional(),
  username: z.array(z.string()).optional(),
  web3_wallet: z.array(z.string()).optional(),
  user_id: z.array(z.string()).optional(),
  organization_id: z.array(z.string()).optional(),
  query: z.string().optional(),
  email_address_query: z.string().optional(),
  phone_number_query: z.string().optional(),
  username_query: z.string().optional(),
  name_query: z.string().optional(),
  banned: z.boolean().optional(),
  last_active_at_before: z.number().int().optional(),
  last_active_at_after: z.number().int().optional(),
  last_active_at_since: z.number().int().optional(),
  created_at_before: z.number().int().optional(),
  created_at_after: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "email_address": "emailAddress",
    "phone_number": "phoneNumber",
    "external_id": "externalId",
    "web3_wallet": "web3Wallet",
    "user_id": "userId",
    "organization_id": "organizationId",
    "email_address_query": "emailAddressQuery",
    "phone_number_query": "phoneNumberQuery",
    "username_query": "usernameQuery",
    "name_query": "nameQuery",
    "last_active_at_before": "lastActiveAtBefore",
    "last_active_at_after": "lastActiveAtAfter",
    "last_active_at_since": "lastActiveAtSince",
    "created_at_before": "createdAtBefore",
    "created_at_after": "createdAtAfter",
  });
});

/** @internal */
export type GetUsersCountRequest$Outbound = {
  email_address?: Array<string> | undefined;
  phone_number?: Array<string> | undefined;
  external_id?: Array<string> | undefined;
  username?: Array<string> | undefined;
  web3_wallet?: Array<string> | undefined;
  user_id?: Array<string> | undefined;
  organization_id?: Array<string> | undefined;
  query?: string | undefined;
  email_address_query?: string | undefined;
  phone_number_query?: string | undefined;
  username_query?: string | undefined;
  name_query?: string | undefined;
  banned?: boolean | undefined;
  last_active_at_before?: number | undefined;
  last_active_at_after?: number | undefined;
  last_active_at_since?: number | undefined;
  created_at_before?: number | undefined;
  created_at_after?: number | undefined;
};

/** @internal */
export const GetUsersCountRequest$outboundSchema: z.ZodType<
  GetUsersCountRequest$Outbound,
  z.ZodTypeDef,
  GetUsersCountRequest
> = z.object({
  emailAddress: z.array(z.string()).optional(),
  phoneNumber: z.array(z.string()).optional(),
  externalId: z.array(z.string()).optional(),
  username: z.array(z.string()).optional(),
  web3Wallet: z.array(z.string()).optional(),
  userId: z.array(z.string()).optional(),
  organizationId: z.array(z.string()).optional(),
  query: z.string().optional(),
  emailAddressQuery: z.string().optional(),
  phoneNumberQuery: z.string().optional(),
  usernameQuery: z.string().optional(),
  nameQuery: z.string().optional(),
  banned: z.boolean().optional(),
  lastActiveAtBefore: z.number().int().optional(),
  lastActiveAtAfter: z.number().int().optional(),
  lastActiveAtSince: z.number().int().optional(),
  createdAtBefore: z.number().int().optional(),
  createdAtAfter: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    emailAddress: "email_address",
    phoneNumber: "phone_number",
    externalId: "external_id",
    web3Wallet: "web3_wallet",
    userId: "user_id",
    organizationId: "organization_id",
    emailAddressQuery: "email_address_query",
    phoneNumberQuery: "phone_number_query",
    usernameQuery: "username_query",
    nameQuery: "name_query",
    lastActiveAtBefore: "last_active_at_before",
    lastActiveAtAfter: "last_active_at_after",
    lastActiveAtSince: "last_active_at_since",
    createdAtBefore: "created_at_before",
    createdAtAfter: "created_at_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUsersCountRequest$ {
  /** @deprecated use `GetUsersCountRequest$inboundSchema` instead. */
  export const inboundSchema = GetUsersCountRequest$inboundSchema;
  /** @deprecated use `GetUsersCountRequest$outboundSchema` instead. */
  export const outboundSchema = GetUsersCountRequest$outboundSchema;
  /** @deprecated use `GetUsersCountRequest$Outbound` instead. */
  export type Outbound = GetUsersCountRequest$Outbound;
}

export function getUsersCountRequestToJSON(
  getUsersCountRequest: GetUsersCountRequest,
): string {
  return JSON.stringify(
    GetUsersCountRequest$outboundSchema.parse(getUsersCountRequest),
  );
}

export function getUsersCountRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetUsersCountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUsersCountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUsersCountRequest' from JSON`,
  );
}
