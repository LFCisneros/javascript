/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListRedirectURLsRequest = {
  /**
   * Whether to paginate the results.
   *
   * @remarks
   * If true, the results will be paginated.
   * If false, the results will not be paginated.
   */
  paginated?: boolean | undefined;
  /**
   * Applies a limit to the number of results returned.
   *
   * @remarks
   * Can be used for paginating the results together with `offset`.
   */
  limit?: number | undefined;
  /**
   * Skip the first `offset` results when paginating.
   *
   * @remarks
   * Needs to be an integer greater or equal to zero.
   * To be used in conjunction with `limit`.
   */
  offset?: number | undefined;
};

/** @internal */
export const ListRedirectURLsRequest$inboundSchema: z.ZodType<
  ListRedirectURLsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paginated: z.boolean().optional(),
  limit: z.number().int().default(10),
  offset: z.number().int().default(0),
});

/** @internal */
export type ListRedirectURLsRequest$Outbound = {
  paginated?: boolean | undefined;
  limit: number;
  offset: number;
};

/** @internal */
export const ListRedirectURLsRequest$outboundSchema: z.ZodType<
  ListRedirectURLsRequest$Outbound,
  z.ZodTypeDef,
  ListRedirectURLsRequest
> = z.object({
  paginated: z.boolean().optional(),
  limit: z.number().int().default(10),
  offset: z.number().int().default(0),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRedirectURLsRequest$ {
  /** @deprecated use `ListRedirectURLsRequest$inboundSchema` instead. */
  export const inboundSchema = ListRedirectURLsRequest$inboundSchema;
  /** @deprecated use `ListRedirectURLsRequest$outboundSchema` instead. */
  export const outboundSchema = ListRedirectURLsRequest$outboundSchema;
  /** @deprecated use `ListRedirectURLsRequest$Outbound` instead. */
  export type Outbound = ListRedirectURLsRequest$Outbound;
}

export function listRedirectURLsRequestToJSON(
  listRedirectURLsRequest: ListRedirectURLsRequest,
): string {
  return JSON.stringify(
    ListRedirectURLsRequest$outboundSchema.parse(listRedirectURLsRequest),
  );
}

export function listRedirectURLsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListRedirectURLsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRedirectURLsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRedirectURLsRequest' from JSON`,
  );
}
