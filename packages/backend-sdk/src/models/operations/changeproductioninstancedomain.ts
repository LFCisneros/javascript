/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type ChangeProductionInstanceDomainRequestBody = {
  /**
   * The new home URL of the production instance e.g. https://www.example.com
   */
  homeUrl?: string | undefined;
  /**
   * Whether this is a domain for a secondary app, meaning that any subdomain provided is significant and
   *
   * @remarks
   * will be stored as part of the domain. This is useful for supporting multiple apps (one primary and
   * multiple secondaries) on the same root domain (eTLD+1).
   */
  isSecondary?: boolean | undefined;
};

/** @internal */
export const ChangeProductionInstanceDomainRequestBody$inboundSchema: z.ZodType<
  ChangeProductionInstanceDomainRequestBody,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    home_url: z.string().optional(),
    is_secondary: z.boolean().optional(),
  })
  .transform(v => {
    return remap$(v, {
      home_url: 'homeUrl',
      is_secondary: 'isSecondary',
    });
  });

/** @internal */
export type ChangeProductionInstanceDomainRequestBody$Outbound = {
  home_url?: string | undefined;
  is_secondary?: boolean | undefined;
};

/** @internal */
export const ChangeProductionInstanceDomainRequestBody$outboundSchema: z.ZodType<
  ChangeProductionInstanceDomainRequestBody$Outbound,
  z.ZodTypeDef,
  ChangeProductionInstanceDomainRequestBody
> = z
  .object({
    homeUrl: z.string().optional(),
    isSecondary: z.boolean().optional(),
  })
  .transform(v => {
    return remap$(v, {
      homeUrl: 'home_url',
      isSecondary: 'is_secondary',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChangeProductionInstanceDomainRequestBody$ {
  /** @deprecated use `ChangeProductionInstanceDomainRequestBody$inboundSchema` instead. */
  export const inboundSchema = ChangeProductionInstanceDomainRequestBody$inboundSchema;
  /** @deprecated use `ChangeProductionInstanceDomainRequestBody$outboundSchema` instead. */
  export const outboundSchema = ChangeProductionInstanceDomainRequestBody$outboundSchema;
  /** @deprecated use `ChangeProductionInstanceDomainRequestBody$Outbound` instead. */
  export type Outbound = ChangeProductionInstanceDomainRequestBody$Outbound;
}

export function changeProductionInstanceDomainRequestBodyToJSON(
  changeProductionInstanceDomainRequestBody: ChangeProductionInstanceDomainRequestBody,
): string {
  return JSON.stringify(
    ChangeProductionInstanceDomainRequestBody$outboundSchema.parse(changeProductionInstanceDomainRequestBody),
  );
}

export function changeProductionInstanceDomainRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ChangeProductionInstanceDomainRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    x => ChangeProductionInstanceDomainRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChangeProductionInstanceDomainRequestBody' from JSON`,
  );
}
