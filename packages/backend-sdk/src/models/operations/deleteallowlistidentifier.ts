/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteAllowlistIdentifierRequest = {
  /**
   * The ID of the identifier to delete from the allow-list
   */
  identifierId: string;
};

/** @internal */
export const DeleteAllowlistIdentifierRequest$inboundSchema: z.ZodType<
  DeleteAllowlistIdentifierRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "identifier_id": "identifierId",
  });
});

/** @internal */
export type DeleteAllowlistIdentifierRequest$Outbound = {
  identifier_id: string;
};

/** @internal */
export const DeleteAllowlistIdentifierRequest$outboundSchema: z.ZodType<
  DeleteAllowlistIdentifierRequest$Outbound,
  z.ZodTypeDef,
  DeleteAllowlistIdentifierRequest
> = z.object({
  identifierId: z.string(),
}).transform((v) => {
  return remap$(v, {
    identifierId: "identifier_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAllowlistIdentifierRequest$ {
  /** @deprecated use `DeleteAllowlistIdentifierRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteAllowlistIdentifierRequest$inboundSchema;
  /** @deprecated use `DeleteAllowlistIdentifierRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteAllowlistIdentifierRequest$outboundSchema;
  /** @deprecated use `DeleteAllowlistIdentifierRequest$Outbound` instead. */
  export type Outbound = DeleteAllowlistIdentifierRequest$Outbound;
}

export function deleteAllowlistIdentifierRequestToJSON(
  deleteAllowlistIdentifierRequest: DeleteAllowlistIdentifierRequest,
): string {
  return JSON.stringify(
    DeleteAllowlistIdentifierRequest$outboundSchema.parse(
      deleteAllowlistIdentifierRequest,
    ),
  );
}

export function deleteAllowlistIdentifierRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteAllowlistIdentifierRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteAllowlistIdentifierRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteAllowlistIdentifierRequest' from JSON`,
  );
}
