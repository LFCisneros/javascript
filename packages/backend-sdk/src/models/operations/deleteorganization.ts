/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type DeleteOrganizationRequest = {
  /**
   * The ID of the organization to delete
   */
  organizationId: string;
};

/** @internal */
export const DeleteOrganizationRequest$inboundSchema: z.ZodType<DeleteOrganizationRequest, z.ZodTypeDef, unknown> = z
  .object({
    organization_id: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      organization_id: 'organizationId',
    });
  });

/** @internal */
export type DeleteOrganizationRequest$Outbound = {
  organization_id: string;
};

/** @internal */
export const DeleteOrganizationRequest$outboundSchema: z.ZodType<
  DeleteOrganizationRequest$Outbound,
  z.ZodTypeDef,
  DeleteOrganizationRequest
> = z
  .object({
    organizationId: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      organizationId: 'organization_id',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteOrganizationRequest$ {
  /** @deprecated use `DeleteOrganizationRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteOrganizationRequest$inboundSchema;
  /** @deprecated use `DeleteOrganizationRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteOrganizationRequest$outboundSchema;
  /** @deprecated use `DeleteOrganizationRequest$Outbound` instead. */
  export type Outbound = DeleteOrganizationRequest$Outbound;
}

export function deleteOrganizationRequestToJSON(deleteOrganizationRequest: DeleteOrganizationRequest): string {
  return JSON.stringify(DeleteOrganizationRequest$outboundSchema.parse(deleteOrganizationRequest));
}

export function deleteOrganizationRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteOrganizationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => DeleteOrganizationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteOrganizationRequest' from JSON`,
  );
}
