/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter sessions by the provided status
 */
export const Status = {
  Abandoned: "abandoned",
  Active: "active",
  Ended: "ended",
  Expired: "expired",
  Removed: "removed",
  Replaced: "replaced",
  Revoked: "revoked",
} as const;
/**
 * Filter sessions by the provided status
 */
export type Status = ClosedEnum<typeof Status>;

export type GetSessionListRequest = {
  /**
   * List sessions for the given client
   */
  clientId?: string | undefined;
  /**
   * List sessions for the given user
   */
  userId?: string | undefined;
  /**
   * Filter sessions by the provided status
   */
  status?: Status | undefined;
  /**
   * Whether to paginate the results.
   *
   * @remarks
   * If true, the results will be paginated.
   * If false, the results will not be paginated.
   */
  paginated?: boolean | undefined;
  /**
   * Applies a limit to the number of results returned.
   *
   * @remarks
   * Can be used for paginating the results together with `offset`.
   */
  limit?: number | undefined;
  /**
   * Skip the first `offset` results when paginating.
   *
   * @remarks
   * Needs to be an integer greater or equal to zero.
   * To be used in conjunction with `limit`.
   */
  offset?: number | undefined;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const GetSessionListRequest$inboundSchema: z.ZodType<
  GetSessionListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  client_id: z.string().optional(),
  user_id: z.string().optional(),
  status: Status$inboundSchema.optional(),
  paginated: z.boolean().optional(),
  limit: z.number().int().default(10),
  offset: z.number().int().default(0),
}).transform((v) => {
  return remap$(v, {
    "client_id": "clientId",
    "user_id": "userId",
  });
});

/** @internal */
export type GetSessionListRequest$Outbound = {
  client_id?: string | undefined;
  user_id?: string | undefined;
  status?: string | undefined;
  paginated?: boolean | undefined;
  limit: number;
  offset: number;
};

/** @internal */
export const GetSessionListRequest$outboundSchema: z.ZodType<
  GetSessionListRequest$Outbound,
  z.ZodTypeDef,
  GetSessionListRequest
> = z.object({
  clientId: z.string().optional(),
  userId: z.string().optional(),
  status: Status$outboundSchema.optional(),
  paginated: z.boolean().optional(),
  limit: z.number().int().default(10),
  offset: z.number().int().default(0),
}).transform((v) => {
  return remap$(v, {
    clientId: "client_id",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSessionListRequest$ {
  /** @deprecated use `GetSessionListRequest$inboundSchema` instead. */
  export const inboundSchema = GetSessionListRequest$inboundSchema;
  /** @deprecated use `GetSessionListRequest$outboundSchema` instead. */
  export const outboundSchema = GetSessionListRequest$outboundSchema;
  /** @deprecated use `GetSessionListRequest$Outbound` instead. */
  export type Outbound = GetSessionListRequest$Outbound;
}

export function getSessionListRequestToJSON(
  getSessionListRequest: GetSessionListRequest,
): string {
  return JSON.stringify(
    GetSessionListRequest$outboundSchema.parse(getSessionListRequest),
  );
}

export function getSessionListRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSessionListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSessionListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSessionListRequest' from JSON`,
  );
}
