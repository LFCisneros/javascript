/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RevokeActorTokenRequest = {
  /**
   * The ID of the actor token to be revoked.
   */
  actorTokenId: string;
};

/** @internal */
export const RevokeActorTokenRequest$inboundSchema: z.ZodType<
  RevokeActorTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  actor_token_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "actor_token_id": "actorTokenId",
  });
});

/** @internal */
export type RevokeActorTokenRequest$Outbound = {
  actor_token_id: string;
};

/** @internal */
export const RevokeActorTokenRequest$outboundSchema: z.ZodType<
  RevokeActorTokenRequest$Outbound,
  z.ZodTypeDef,
  RevokeActorTokenRequest
> = z.object({
  actorTokenId: z.string(),
}).transform((v) => {
  return remap$(v, {
    actorTokenId: "actor_token_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RevokeActorTokenRequest$ {
  /** @deprecated use `RevokeActorTokenRequest$inboundSchema` instead. */
  export const inboundSchema = RevokeActorTokenRequest$inboundSchema;
  /** @deprecated use `RevokeActorTokenRequest$outboundSchema` instead. */
  export const outboundSchema = RevokeActorTokenRequest$outboundSchema;
  /** @deprecated use `RevokeActorTokenRequest$Outbound` instead. */
  export type Outbound = RevokeActorTokenRequest$Outbound;
}

export function revokeActorTokenRequestToJSON(
  revokeActorTokenRequest: RevokeActorTokenRequest,
): string {
  return JSON.stringify(
    RevokeActorTokenRequest$outboundSchema.parse(revokeActorTokenRequest),
  );
}

export function revokeActorTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<RevokeActorTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RevokeActorTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RevokeActorTokenRequest' from JSON`,
  );
}
