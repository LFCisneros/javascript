/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListSAMLConnectionsRequest = {
  /**
   * Applies a limit to the number of results returned.
   *
   * @remarks
   * Can be used for paginating the results together with `offset`.
   */
  limit?: number | undefined;
  /**
   * Skip the first `offset` results when paginating.
   *
   * @remarks
   * Needs to be an integer greater or equal to zero.
   * To be used in conjunction with `limit`.
   */
  offset?: number | undefined;
  /**
   * Returns SAML connections that have a name that matches the given query, via case-insensitive partial match.
   */
  query?: string | undefined;
  /**
   * Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username.
   *
   * @remarks
   * By prepending one of those values with + or -,
   * we can choose to sort in ascending (ASC) or descending (DESC) order.
   */
  orderBy?: string | undefined;
  /**
   * Returns SAML connections that have an associated organization ID to the
   *
   * @remarks
   * given organizations.
   * For each organization id, the `+` and `-` can be
   * prepended to the id, which denote whether the
   * respective organization should be included or
   * excluded from the result set.
   * Accepts up to 100 organization ids.
   */
  organizationId?: Array<string> | undefined;
};

/** @internal */
export const ListSAMLConnectionsRequest$inboundSchema: z.ZodType<
  ListSAMLConnectionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().default(10),
  offset: z.number().int().default(0),
  query: z.string().optional(),
  order_by: z.string().optional(),
  organization_id: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "order_by": "orderBy",
    "organization_id": "organizationId",
  });
});

/** @internal */
export type ListSAMLConnectionsRequest$Outbound = {
  limit: number;
  offset: number;
  query?: string | undefined;
  order_by?: string | undefined;
  organization_id?: Array<string> | undefined;
};

/** @internal */
export const ListSAMLConnectionsRequest$outboundSchema: z.ZodType<
  ListSAMLConnectionsRequest$Outbound,
  z.ZodTypeDef,
  ListSAMLConnectionsRequest
> = z.object({
  limit: z.number().int().default(10),
  offset: z.number().int().default(0),
  query: z.string().optional(),
  orderBy: z.string().optional(),
  organizationId: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    orderBy: "order_by",
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSAMLConnectionsRequest$ {
  /** @deprecated use `ListSAMLConnectionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListSAMLConnectionsRequest$inboundSchema;
  /** @deprecated use `ListSAMLConnectionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListSAMLConnectionsRequest$outboundSchema;
  /** @deprecated use `ListSAMLConnectionsRequest$Outbound` instead. */
  export type Outbound = ListSAMLConnectionsRequest$Outbound;
}

export function listSAMLConnectionsRequestToJSON(
  listSAMLConnectionsRequest: ListSAMLConnectionsRequest,
): string {
  return JSON.stringify(
    ListSAMLConnectionsRequest$outboundSchema.parse(listSAMLConnectionsRequest),
  );
}

export function listSAMLConnectionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSAMLConnectionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSAMLConnectionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSAMLConnectionsRequest' from JSON`,
  );
}
