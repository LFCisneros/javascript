/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type UserWeb3WalletDeleteRequest = {
  /**
   * The ID of the user that owns the web3 wallet
   */
  userId: string;
  /**
   * The ID of the web3 wallet identity to be deleted
   */
  web3WalletIdentificationId: string;
};

/** @internal */
export const UserWeb3WalletDeleteRequest$inboundSchema: z.ZodType<UserWeb3WalletDeleteRequest, z.ZodTypeDef, unknown> =
  z
    .object({
      user_id: z.string(),
      web3_wallet_identification_id: z.string(),
    })
    .transform(v => {
      return remap$(v, {
        user_id: 'userId',
        web3_wallet_identification_id: 'web3WalletIdentificationId',
      });
    });

/** @internal */
export type UserWeb3WalletDeleteRequest$Outbound = {
  user_id: string;
  web3_wallet_identification_id: string;
};

/** @internal */
export const UserWeb3WalletDeleteRequest$outboundSchema: z.ZodType<
  UserWeb3WalletDeleteRequest$Outbound,
  z.ZodTypeDef,
  UserWeb3WalletDeleteRequest
> = z
  .object({
    userId: z.string(),
    web3WalletIdentificationId: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      userId: 'user_id',
      web3WalletIdentificationId: 'web3_wallet_identification_id',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserWeb3WalletDeleteRequest$ {
  /** @deprecated use `UserWeb3WalletDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = UserWeb3WalletDeleteRequest$inboundSchema;
  /** @deprecated use `UserWeb3WalletDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = UserWeb3WalletDeleteRequest$outboundSchema;
  /** @deprecated use `UserWeb3WalletDeleteRequest$Outbound` instead. */
  export type Outbound = UserWeb3WalletDeleteRequest$Outbound;
}

export function userWeb3WalletDeleteRequestToJSON(userWeb3WalletDeleteRequest: UserWeb3WalletDeleteRequest): string {
  return JSON.stringify(UserWeb3WalletDeleteRequest$outboundSchema.parse(userWeb3WalletDeleteRequest));
}

export function userWeb3WalletDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<UserWeb3WalletDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => UserWeb3WalletDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserWeb3WalletDeleteRequest' from JSON`,
  );
}
