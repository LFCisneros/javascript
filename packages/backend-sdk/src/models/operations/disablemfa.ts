/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DisableMFARequest = {
  /**
   * The ID of the user whose MFA methods are to be disabled
   */
  userId: string;
};

/**
 * Successful operation.
 */
export type DisableMFAResponseBody = {
  userId?: string | undefined;
};

/** @internal */
export const DisableMFARequest$inboundSchema: z.ZodType<
  DisableMFARequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
  });
});

/** @internal */
export type DisableMFARequest$Outbound = {
  user_id: string;
};

/** @internal */
export const DisableMFARequest$outboundSchema: z.ZodType<
  DisableMFARequest$Outbound,
  z.ZodTypeDef,
  DisableMFARequest
> = z.object({
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisableMFARequest$ {
  /** @deprecated use `DisableMFARequest$inboundSchema` instead. */
  export const inboundSchema = DisableMFARequest$inboundSchema;
  /** @deprecated use `DisableMFARequest$outboundSchema` instead. */
  export const outboundSchema = DisableMFARequest$outboundSchema;
  /** @deprecated use `DisableMFARequest$Outbound` instead. */
  export type Outbound = DisableMFARequest$Outbound;
}

export function disableMFARequestToJSON(
  disableMFARequest: DisableMFARequest,
): string {
  return JSON.stringify(
    DisableMFARequest$outboundSchema.parse(disableMFARequest),
  );
}

export function disableMFARequestFromJSON(
  jsonString: string,
): SafeParseResult<DisableMFARequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisableMFARequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisableMFARequest' from JSON`,
  );
}

/** @internal */
export const DisableMFAResponseBody$inboundSchema: z.ZodType<
  DisableMFAResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
  });
});

/** @internal */
export type DisableMFAResponseBody$Outbound = {
  user_id?: string | undefined;
};

/** @internal */
export const DisableMFAResponseBody$outboundSchema: z.ZodType<
  DisableMFAResponseBody$Outbound,
  z.ZodTypeDef,
  DisableMFAResponseBody
> = z.object({
  userId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisableMFAResponseBody$ {
  /** @deprecated use `DisableMFAResponseBody$inboundSchema` instead. */
  export const inboundSchema = DisableMFAResponseBody$inboundSchema;
  /** @deprecated use `DisableMFAResponseBody$outboundSchema` instead. */
  export const outboundSchema = DisableMFAResponseBody$outboundSchema;
  /** @deprecated use `DisableMFAResponseBody$Outbound` instead. */
  export type Outbound = DisableMFAResponseBody$Outbound;
}

export function disableMFAResponseBodyToJSON(
  disableMFAResponseBody: DisableMFAResponseBody,
): string {
  return JSON.stringify(
    DisableMFAResponseBody$outboundSchema.parse(disableMFAResponseBody),
  );
}

export function disableMFAResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DisableMFAResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisableMFAResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisableMFAResponseBody' from JSON`,
  );
}
