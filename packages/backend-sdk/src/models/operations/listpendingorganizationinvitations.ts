/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListPendingOrganizationInvitationsRequest = {
  /**
   * The organization ID.
   */
  organizationId: string;
  /**
   * Applies a limit to the number of results returned.
   *
   * @remarks
   * Can be used for paginating the results together with `offset`.
   */
  limit?: number | undefined;
  /**
   * Skip the first `offset` results when paginating.
   *
   * @remarks
   * Needs to be an integer greater or equal to zero.
   * To be used in conjunction with `limit`.
   */
  offset?: number | undefined;
};

/** @internal */
export const ListPendingOrganizationInvitationsRequest$inboundSchema: z.ZodType<
  ListPendingOrganizationInvitationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string(),
  limit: z.number().int().default(10),
  offset: z.number().int().default(0),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
  });
});

/** @internal */
export type ListPendingOrganizationInvitationsRequest$Outbound = {
  organization_id: string;
  limit: number;
  offset: number;
};

/** @internal */
export const ListPendingOrganizationInvitationsRequest$outboundSchema:
  z.ZodType<
    ListPendingOrganizationInvitationsRequest$Outbound,
    z.ZodTypeDef,
    ListPendingOrganizationInvitationsRequest
  > = z.object({
    organizationId: z.string(),
    limit: z.number().int().default(10),
    offset: z.number().int().default(0),
  }).transform((v) => {
    return remap$(v, {
      organizationId: "organization_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPendingOrganizationInvitationsRequest$ {
  /** @deprecated use `ListPendingOrganizationInvitationsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListPendingOrganizationInvitationsRequest$inboundSchema;
  /** @deprecated use `ListPendingOrganizationInvitationsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListPendingOrganizationInvitationsRequest$outboundSchema;
  /** @deprecated use `ListPendingOrganizationInvitationsRequest$Outbound` instead. */
  export type Outbound = ListPendingOrganizationInvitationsRequest$Outbound;
}

export function listPendingOrganizationInvitationsRequestToJSON(
  listPendingOrganizationInvitationsRequest:
    ListPendingOrganizationInvitationsRequest,
): string {
  return JSON.stringify(
    ListPendingOrganizationInvitationsRequest$outboundSchema.parse(
      listPendingOrganizationInvitationsRequest,
    ),
  );
}

export function listPendingOrganizationInvitationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ListPendingOrganizationInvitationsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListPendingOrganizationInvitationsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListPendingOrganizationInvitationsRequest' from JSON`,
  );
}
