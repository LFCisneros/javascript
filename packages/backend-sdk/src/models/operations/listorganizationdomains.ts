/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type ListOrganizationDomainsRequest = {
  /**
   * The organization ID.
   */
  organizationId: string;
  /**
   * Filter domains by their verification status. `true` or `false`
   */
  verified?: string | undefined;
  /**
   * Filter domains by their enrollment mode
   */
  enrollmentMode?: string | undefined;
  /**
   * Applies a limit to the number of results returned.
   *
   * @remarks
   * Can be used for paginating the results together with `offset`.
   */
  limit?: number | undefined;
  /**
   * Skip the first `offset` results when paginating.
   *
   * @remarks
   * Needs to be an integer greater or equal to zero.
   * To be used in conjunction with `limit`.
   */
  offset?: number | undefined;
};

/** @internal */
export const ListOrganizationDomainsRequest$inboundSchema: z.ZodType<
  ListOrganizationDomainsRequest,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    organization_id: z.string(),
    verified: z.string().optional(),
    enrollment_mode: z.string().optional(),
    limit: z.number().int().default(10),
    offset: z.number().int().default(0),
  })
  .transform(v => {
    return remap$(v, {
      organization_id: 'organizationId',
      enrollment_mode: 'enrollmentMode',
    });
  });

/** @internal */
export type ListOrganizationDomainsRequest$Outbound = {
  organization_id: string;
  verified?: string | undefined;
  enrollment_mode?: string | undefined;
  limit: number;
  offset: number;
};

/** @internal */
export const ListOrganizationDomainsRequest$outboundSchema: z.ZodType<
  ListOrganizationDomainsRequest$Outbound,
  z.ZodTypeDef,
  ListOrganizationDomainsRequest
> = z
  .object({
    organizationId: z.string(),
    verified: z.string().optional(),
    enrollmentMode: z.string().optional(),
    limit: z.number().int().default(10),
    offset: z.number().int().default(0),
  })
  .transform(v => {
    return remap$(v, {
      organizationId: 'organization_id',
      enrollmentMode: 'enrollment_mode',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrganizationDomainsRequest$ {
  /** @deprecated use `ListOrganizationDomainsRequest$inboundSchema` instead. */
  export const inboundSchema = ListOrganizationDomainsRequest$inboundSchema;
  /** @deprecated use `ListOrganizationDomainsRequest$outboundSchema` instead. */
  export const outboundSchema = ListOrganizationDomainsRequest$outboundSchema;
  /** @deprecated use `ListOrganizationDomainsRequest$Outbound` instead. */
  export type Outbound = ListOrganizationDomainsRequest$Outbound;
}

export function listOrganizationDomainsRequestToJSON(
  listOrganizationDomainsRequest: ListOrganizationDomainsRequest,
): string {
  return JSON.stringify(ListOrganizationDomainsRequest$outboundSchema.parse(listOrganizationDomainsRequest));
}

export function listOrganizationDomainsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListOrganizationDomainsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => ListOrganizationDomainsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrganizationDomainsRequest' from JSON`,
  );
}
