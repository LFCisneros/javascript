/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type CreateRedirectURLRequestBody = {
  /**
   * The full url value prefixed with `https://` or a custom scheme e.g. `"https://my-app.com/oauth-callback"` or `"my-app://oauth-callback"`
   */
  url: string;
};

/** @internal */
export const CreateRedirectURLRequestBody$inboundSchema: z.ZodType<
  CreateRedirectURLRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
});

/** @internal */
export type CreateRedirectURLRequestBody$Outbound = {
  url: string;
};

/** @internal */
export const CreateRedirectURLRequestBody$outboundSchema: z.ZodType<
  CreateRedirectURLRequestBody$Outbound,
  z.ZodTypeDef,
  CreateRedirectURLRequestBody
> = z.object({
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRedirectURLRequestBody$ {
  /** @deprecated use `CreateRedirectURLRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateRedirectURLRequestBody$inboundSchema;
  /** @deprecated use `CreateRedirectURLRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateRedirectURLRequestBody$outboundSchema;
  /** @deprecated use `CreateRedirectURLRequestBody$Outbound` instead. */
  export type Outbound = CreateRedirectURLRequestBody$Outbound;
}

export function createRedirectURLRequestBodyToJSON(createRedirectURLRequestBody: CreateRedirectURLRequestBody): string {
  return JSON.stringify(CreateRedirectURLRequestBody$outboundSchema.parse(createRedirectURLRequestBody));
}

export function createRedirectURLRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateRedirectURLRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    x => CreateRedirectURLRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRedirectURLRequestBody' from JSON`,
  );
}
