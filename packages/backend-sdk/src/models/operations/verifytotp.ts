/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type VerifyTOTPRequestBody = {
  /**
   * The TOTP or backup code to verify
   */
  code: string;
};

export type VerifyTOTPRequest = {
  /**
   * The ID of the user for whom to verify the TOTP
   */
  userId: string;
  requestBody?: VerifyTOTPRequestBody | undefined;
};

export const CodeType = {
  Totp: 'totp',
  BackupCode: 'backup_code',
} as const;
export type CodeType = ClosedEnum<typeof CodeType>;

/**
 * The provided TOTP or backup code was correct.
 */
export type VerifyTOTPResponseBody = {
  verified?: boolean | undefined;
  codeType?: CodeType | undefined;
};

/** @internal */
export const VerifyTOTPRequestBody$inboundSchema: z.ZodType<VerifyTOTPRequestBody, z.ZodTypeDef, unknown> = z.object({
  code: z.string(),
});

/** @internal */
export type VerifyTOTPRequestBody$Outbound = {
  code: string;
};

/** @internal */
export const VerifyTOTPRequestBody$outboundSchema: z.ZodType<
  VerifyTOTPRequestBody$Outbound,
  z.ZodTypeDef,
  VerifyTOTPRequestBody
> = z.object({
  code: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyTOTPRequestBody$ {
  /** @deprecated use `VerifyTOTPRequestBody$inboundSchema` instead. */
  export const inboundSchema = VerifyTOTPRequestBody$inboundSchema;
  /** @deprecated use `VerifyTOTPRequestBody$outboundSchema` instead. */
  export const outboundSchema = VerifyTOTPRequestBody$outboundSchema;
  /** @deprecated use `VerifyTOTPRequestBody$Outbound` instead. */
  export type Outbound = VerifyTOTPRequestBody$Outbound;
}

export function verifyTOTPRequestBodyToJSON(verifyTOTPRequestBody: VerifyTOTPRequestBody): string {
  return JSON.stringify(VerifyTOTPRequestBody$outboundSchema.parse(verifyTOTPRequestBody));
}

export function verifyTOTPRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VerifyTOTPRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    x => VerifyTOTPRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyTOTPRequestBody' from JSON`,
  );
}

/** @internal */
export const VerifyTOTPRequest$inboundSchema: z.ZodType<VerifyTOTPRequest, z.ZodTypeDef, unknown> = z
  .object({
    user_id: z.string(),
    RequestBody: z.lazy(() => VerifyTOTPRequestBody$inboundSchema).optional(),
  })
  .transform(v => {
    return remap$(v, {
      user_id: 'userId',
      RequestBody: 'requestBody',
    });
  });

/** @internal */
export type VerifyTOTPRequest$Outbound = {
  user_id: string;
  RequestBody?: VerifyTOTPRequestBody$Outbound | undefined;
};

/** @internal */
export const VerifyTOTPRequest$outboundSchema: z.ZodType<VerifyTOTPRequest$Outbound, z.ZodTypeDef, VerifyTOTPRequest> =
  z
    .object({
      userId: z.string(),
      requestBody: z.lazy(() => VerifyTOTPRequestBody$outboundSchema).optional(),
    })
    .transform(v => {
      return remap$(v, {
        userId: 'user_id',
        requestBody: 'RequestBody',
      });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyTOTPRequest$ {
  /** @deprecated use `VerifyTOTPRequest$inboundSchema` instead. */
  export const inboundSchema = VerifyTOTPRequest$inboundSchema;
  /** @deprecated use `VerifyTOTPRequest$outboundSchema` instead. */
  export const outboundSchema = VerifyTOTPRequest$outboundSchema;
  /** @deprecated use `VerifyTOTPRequest$Outbound` instead. */
  export type Outbound = VerifyTOTPRequest$Outbound;
}

export function verifyTOTPRequestToJSON(verifyTOTPRequest: VerifyTOTPRequest): string {
  return JSON.stringify(VerifyTOTPRequest$outboundSchema.parse(verifyTOTPRequest));
}

export function verifyTOTPRequestFromJSON(jsonString: string): SafeParseResult<VerifyTOTPRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => VerifyTOTPRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyTOTPRequest' from JSON`,
  );
}

/** @internal */
export const CodeType$inboundSchema: z.ZodNativeEnum<typeof CodeType> = z.nativeEnum(CodeType);

/** @internal */
export const CodeType$outboundSchema: z.ZodNativeEnum<typeof CodeType> = CodeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CodeType$ {
  /** @deprecated use `CodeType$inboundSchema` instead. */
  export const inboundSchema = CodeType$inboundSchema;
  /** @deprecated use `CodeType$outboundSchema` instead. */
  export const outboundSchema = CodeType$outboundSchema;
}

/** @internal */
export const VerifyTOTPResponseBody$inboundSchema: z.ZodType<VerifyTOTPResponseBody, z.ZodTypeDef, unknown> = z
  .object({
    verified: z.boolean().optional(),
    code_type: CodeType$inboundSchema.optional(),
  })
  .transform(v => {
    return remap$(v, {
      code_type: 'codeType',
    });
  });

/** @internal */
export type VerifyTOTPResponseBody$Outbound = {
  verified?: boolean | undefined;
  code_type?: string | undefined;
};

/** @internal */
export const VerifyTOTPResponseBody$outboundSchema: z.ZodType<
  VerifyTOTPResponseBody$Outbound,
  z.ZodTypeDef,
  VerifyTOTPResponseBody
> = z
  .object({
    verified: z.boolean().optional(),
    codeType: CodeType$outboundSchema.optional(),
  })
  .transform(v => {
    return remap$(v, {
      codeType: 'code_type',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyTOTPResponseBody$ {
  /** @deprecated use `VerifyTOTPResponseBody$inboundSchema` instead. */
  export const inboundSchema = VerifyTOTPResponseBody$inboundSchema;
  /** @deprecated use `VerifyTOTPResponseBody$outboundSchema` instead. */
  export const outboundSchema = VerifyTOTPResponseBody$outboundSchema;
  /** @deprecated use `VerifyTOTPResponseBody$Outbound` instead. */
  export type Outbound = VerifyTOTPResponseBody$Outbound;
}

export function verifyTOTPResponseBodyToJSON(verifyTOTPResponseBody: VerifyTOTPResponseBody): string {
  return JSON.stringify(VerifyTOTPResponseBody$outboundSchema.parse(verifyTOTPResponseBody));
}

export function verifyTOTPResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<VerifyTOTPResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    x => VerifyTOTPResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyTOTPResponseBody' from JSON`,
  );
}
