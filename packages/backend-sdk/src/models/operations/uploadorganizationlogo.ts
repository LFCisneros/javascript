/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UploadOrganizationLogoFile = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type UploadOrganizationLogoRequestBody = {
  file: UploadOrganizationLogoFile | Blob;
  /**
   * The ID of the user that will be credited with the image upload.
   */
  uploaderUserId?: string | undefined;
};

export type UploadOrganizationLogoRequest = {
  /**
   * The ID of the organization for which to upload a logo
   */
  organizationId: string;
  requestBody?: UploadOrganizationLogoRequestBody | undefined;
};

/** @internal */
export const UploadOrganizationLogoFile$inboundSchema: z.ZodType<
  UploadOrganizationLogoFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/** @internal */
export type UploadOrganizationLogoFile$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const UploadOrganizationLogoFile$outboundSchema: z.ZodType<
  UploadOrganizationLogoFile$Outbound,
  z.ZodTypeDef,
  UploadOrganizationLogoFile
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadOrganizationLogoFile$ {
  /** @deprecated use `UploadOrganizationLogoFile$inboundSchema` instead. */
  export const inboundSchema = UploadOrganizationLogoFile$inboundSchema;
  /** @deprecated use `UploadOrganizationLogoFile$outboundSchema` instead. */
  export const outboundSchema = UploadOrganizationLogoFile$outboundSchema;
  /** @deprecated use `UploadOrganizationLogoFile$Outbound` instead. */
  export type Outbound = UploadOrganizationLogoFile$Outbound;
}

export function uploadOrganizationLogoFileToJSON(
  uploadOrganizationLogoFile: UploadOrganizationLogoFile,
): string {
  return JSON.stringify(
    UploadOrganizationLogoFile$outboundSchema.parse(uploadOrganizationLogoFile),
  );
}

export function uploadOrganizationLogoFileFromJSON(
  jsonString: string,
): SafeParseResult<UploadOrganizationLogoFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadOrganizationLogoFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadOrganizationLogoFile' from JSON`,
  );
}

/** @internal */
export const UploadOrganizationLogoRequestBody$inboundSchema: z.ZodType<
  UploadOrganizationLogoRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  file: z.lazy(() => UploadOrganizationLogoFile$inboundSchema),
  uploader_user_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "uploader_user_id": "uploaderUserId",
  });
});

/** @internal */
export type UploadOrganizationLogoRequestBody$Outbound = {
  file: UploadOrganizationLogoFile$Outbound | Blob;
  uploader_user_id?: string | undefined;
};

/** @internal */
export const UploadOrganizationLogoRequestBody$outboundSchema: z.ZodType<
  UploadOrganizationLogoRequestBody$Outbound,
  z.ZodTypeDef,
  UploadOrganizationLogoRequestBody
> = z.object({
  file: z.lazy(() => UploadOrganizationLogoFile$outboundSchema).or(
    blobLikeSchema,
  ),
  uploaderUserId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    uploaderUserId: "uploader_user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadOrganizationLogoRequestBody$ {
  /** @deprecated use `UploadOrganizationLogoRequestBody$inboundSchema` instead. */
  export const inboundSchema = UploadOrganizationLogoRequestBody$inboundSchema;
  /** @deprecated use `UploadOrganizationLogoRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UploadOrganizationLogoRequestBody$outboundSchema;
  /** @deprecated use `UploadOrganizationLogoRequestBody$Outbound` instead. */
  export type Outbound = UploadOrganizationLogoRequestBody$Outbound;
}

export function uploadOrganizationLogoRequestBodyToJSON(
  uploadOrganizationLogoRequestBody: UploadOrganizationLogoRequestBody,
): string {
  return JSON.stringify(
    UploadOrganizationLogoRequestBody$outboundSchema.parse(
      uploadOrganizationLogoRequestBody,
    ),
  );
}

export function uploadOrganizationLogoRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UploadOrganizationLogoRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadOrganizationLogoRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadOrganizationLogoRequestBody' from JSON`,
  );
}

/** @internal */
export const UploadOrganizationLogoRequest$inboundSchema: z.ZodType<
  UploadOrganizationLogoRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string(),
  RequestBody: z.lazy(() => UploadOrganizationLogoRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UploadOrganizationLogoRequest$Outbound = {
  organization_id: string;
  RequestBody?: UploadOrganizationLogoRequestBody$Outbound | undefined;
};

/** @internal */
export const UploadOrganizationLogoRequest$outboundSchema: z.ZodType<
  UploadOrganizationLogoRequest$Outbound,
  z.ZodTypeDef,
  UploadOrganizationLogoRequest
> = z.object({
  organizationId: z.string(),
  requestBody: z.lazy(() => UploadOrganizationLogoRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadOrganizationLogoRequest$ {
  /** @deprecated use `UploadOrganizationLogoRequest$inboundSchema` instead. */
  export const inboundSchema = UploadOrganizationLogoRequest$inboundSchema;
  /** @deprecated use `UploadOrganizationLogoRequest$outboundSchema` instead. */
  export const outboundSchema = UploadOrganizationLogoRequest$outboundSchema;
  /** @deprecated use `UploadOrganizationLogoRequest$Outbound` instead. */
  export type Outbound = UploadOrganizationLogoRequest$Outbound;
}

export function uploadOrganizationLogoRequestToJSON(
  uploadOrganizationLogoRequest: UploadOrganizationLogoRequest,
): string {
  return JSON.stringify(
    UploadOrganizationLogoRequest$outboundSchema.parse(
      uploadOrganizationLogoRequest,
    ),
  );
}

export function uploadOrganizationLogoRequestFromJSON(
  jsonString: string,
): SafeParseResult<UploadOrganizationLogoRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadOrganizationLogoRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadOrganizationLogoRequest' from JSON`,
  );
}
