/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

/**
 * The type of templates to list (email or SMS)
 */
export const TemplateType = {
  Email: 'email',
  Sms: 'sms',
} as const;
/**
 * The type of templates to list (email or SMS)
 */
export type TemplateType = ClosedEnum<typeof TemplateType>;

export type GetTemplateListRequest = {
  /**
   * The type of templates to list (email or SMS)
   */
  templateType: TemplateType;
  /**
   * Whether to paginate the results.
   *
   * @remarks
   * If true, the results will be paginated.
   * If false, the results will not be paginated.
   */
  paginated?: boolean | undefined;
  /**
   * Applies a limit to the number of results returned.
   *
   * @remarks
   * Can be used for paginating the results together with `offset`.
   */
  limit?: number | undefined;
  /**
   * Skip the first `offset` results when paginating.
   *
   * @remarks
   * Needs to be an integer greater or equal to zero.
   * To be used in conjunction with `limit`.
   */
  offset?: number | undefined;
};

/** @internal */
export const TemplateType$inboundSchema: z.ZodNativeEnum<typeof TemplateType> = z.nativeEnum(TemplateType);

/** @internal */
export const TemplateType$outboundSchema: z.ZodNativeEnum<typeof TemplateType> = TemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateType$ {
  /** @deprecated use `TemplateType$inboundSchema` instead. */
  export const inboundSchema = TemplateType$inboundSchema;
  /** @deprecated use `TemplateType$outboundSchema` instead. */
  export const outboundSchema = TemplateType$outboundSchema;
}

/** @internal */
export const GetTemplateListRequest$inboundSchema: z.ZodType<GetTemplateListRequest, z.ZodTypeDef, unknown> = z
  .object({
    template_type: TemplateType$inboundSchema,
    paginated: z.boolean().optional(),
    limit: z.number().int().default(10),
    offset: z.number().int().default(0),
  })
  .transform(v => {
    return remap$(v, {
      template_type: 'templateType',
    });
  });

/** @internal */
export type GetTemplateListRequest$Outbound = {
  template_type: string;
  paginated?: boolean | undefined;
  limit: number;
  offset: number;
};

/** @internal */
export const GetTemplateListRequest$outboundSchema: z.ZodType<
  GetTemplateListRequest$Outbound,
  z.ZodTypeDef,
  GetTemplateListRequest
> = z
  .object({
    templateType: TemplateType$outboundSchema,
    paginated: z.boolean().optional(),
    limit: z.number().int().default(10),
    offset: z.number().int().default(0),
  })
  .transform(v => {
    return remap$(v, {
      templateType: 'template_type',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTemplateListRequest$ {
  /** @deprecated use `GetTemplateListRequest$inboundSchema` instead. */
  export const inboundSchema = GetTemplateListRequest$inboundSchema;
  /** @deprecated use `GetTemplateListRequest$outboundSchema` instead. */
  export const outboundSchema = GetTemplateListRequest$outboundSchema;
  /** @deprecated use `GetTemplateListRequest$Outbound` instead. */
  export type Outbound = GetTemplateListRequest$Outbound;
}

export function getTemplateListRequestToJSON(getTemplateListRequest: GetTemplateListRequest): string {
  return JSON.stringify(GetTemplateListRequest$outboundSchema.parse(getTemplateListRequest));
}

export function getTemplateListRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTemplateListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => GetTemplateListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTemplateListRequest' from JSON`,
  );
}
