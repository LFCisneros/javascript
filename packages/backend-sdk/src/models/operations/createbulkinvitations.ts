/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The slug of the email template to use for the invitation email.
 */
export const CreateBulkInvitationsTemplateSlug = {
  Invitation: "invitation",
  WaitlistInvitation: "waitlist_invitation",
} as const;
/**
 * The slug of the email template to use for the invitation email.
 */
export type CreateBulkInvitationsTemplateSlug = ClosedEnum<
  typeof CreateBulkInvitationsTemplateSlug
>;

export type RequestBody = {
  /**
   * The email address the invitation will be sent to
   */
  emailAddress: string;
  /**
   * Metadata that will be attached to the newly created invitation.
   *
   * @remarks
   * The value of this property should be a well-formed JSON object.
   * Once the user accepts the invitation and signs up, these metadata will end up in the user's public metadata.
   */
  publicMetadata?: { [k: string]: any } | null | undefined;
  /**
   * The URL where the user is redirected upon visiting the invitation link, where they can accept the invitation. Required if you have implemented a [custom flow for handling application invitations](/docs/custom-flows/invitations).
   */
  redirectUrl?: string | null | undefined;
  /**
   * Optional flag which denotes whether an email invitation should be sent to the given email address.
   *
   * @remarks
   * Defaults to true.
   */
  notify?: boolean | null | undefined;
  /**
   * Whether an invitation should be created if there is already an existing invitation for this email
   *
   * @remarks
   * address, or it's claimed by another user.
   */
  ignoreExisting?: boolean | null | undefined;
  /**
   * The number of days the invitation will be valid for. By default, the invitation expires after 30 days.
   */
  expiresInDays?: number | null | undefined;
  /**
   * The slug of the email template to use for the invitation email.
   */
  templateSlug?: CreateBulkInvitationsTemplateSlug | undefined;
};

/** @internal */
export const CreateBulkInvitationsTemplateSlug$inboundSchema: z.ZodNativeEnum<
  typeof CreateBulkInvitationsTemplateSlug
> = z.nativeEnum(CreateBulkInvitationsTemplateSlug);

/** @internal */
export const CreateBulkInvitationsTemplateSlug$outboundSchema: z.ZodNativeEnum<
  typeof CreateBulkInvitationsTemplateSlug
> = CreateBulkInvitationsTemplateSlug$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBulkInvitationsTemplateSlug$ {
  /** @deprecated use `CreateBulkInvitationsTemplateSlug$inboundSchema` instead. */
  export const inboundSchema = CreateBulkInvitationsTemplateSlug$inboundSchema;
  /** @deprecated use `CreateBulkInvitationsTemplateSlug$outboundSchema` instead. */
  export const outboundSchema =
    CreateBulkInvitationsTemplateSlug$outboundSchema;
}

/** @internal */
export const RequestBody$inboundSchema: z.ZodType<
  RequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  email_address: z.string(),
  public_metadata: z.nullable(z.record(z.any())).optional(),
  redirect_url: z.nullable(z.string()).optional(),
  notify: z.nullable(z.boolean().default(true)),
  ignore_existing: z.nullable(z.boolean().default(false)),
  expires_in_days: z.nullable(z.number().int()).optional(),
  template_slug: CreateBulkInvitationsTemplateSlug$inboundSchema.default(
    "invitation",
  ),
}).transform((v) => {
  return remap$(v, {
    "email_address": "emailAddress",
    "public_metadata": "publicMetadata",
    "redirect_url": "redirectUrl",
    "ignore_existing": "ignoreExisting",
    "expires_in_days": "expiresInDays",
    "template_slug": "templateSlug",
  });
});

/** @internal */
export type RequestBody$Outbound = {
  email_address: string;
  public_metadata?: { [k: string]: any } | null | undefined;
  redirect_url?: string | null | undefined;
  notify: boolean | null;
  ignore_existing: boolean | null;
  expires_in_days?: number | null | undefined;
  template_slug: string;
};

/** @internal */
export const RequestBody$outboundSchema: z.ZodType<
  RequestBody$Outbound,
  z.ZodTypeDef,
  RequestBody
> = z.object({
  emailAddress: z.string(),
  publicMetadata: z.nullable(z.record(z.any())).optional(),
  redirectUrl: z.nullable(z.string()).optional(),
  notify: z.nullable(z.boolean().default(true)),
  ignoreExisting: z.nullable(z.boolean().default(false)),
  expiresInDays: z.nullable(z.number().int()).optional(),
  templateSlug: CreateBulkInvitationsTemplateSlug$outboundSchema.default(
    "invitation",
  ),
}).transform((v) => {
  return remap$(v, {
    emailAddress: "email_address",
    publicMetadata: "public_metadata",
    redirectUrl: "redirect_url",
    ignoreExisting: "ignore_existing",
    expiresInDays: "expires_in_days",
    templateSlug: "template_slug",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBody$ {
  /** @deprecated use `RequestBody$inboundSchema` instead. */
  export const inboundSchema = RequestBody$inboundSchema;
  /** @deprecated use `RequestBody$outboundSchema` instead. */
  export const outboundSchema = RequestBody$outboundSchema;
  /** @deprecated use `RequestBody$Outbound` instead. */
  export type Outbound = RequestBody$Outbound;
}

export function requestBodyToJSON(requestBody: RequestBody): string {
  return JSON.stringify(RequestBody$outboundSchema.parse(requestBody));
}

export function requestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestBody' from JSON`,
  );
}
