/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * JWT template claims in JSON format
 */
export type UpdateJWTTemplateClaims = {};

export type UpdateJWTTemplateRequestBody = {
  /**
   * JWT template name
   */
  name: string;
  /**
   * JWT template claims in JSON format
   */
  claims: UpdateJWTTemplateClaims;
  /**
   * JWT token lifetime
   */
  lifetime?: number | null | undefined;
  /**
   * JWT token allowed clock skew
   */
  allowedClockSkew?: number | null | undefined;
  /**
   * Whether a custom signing key/algorithm is also provided for this template
   */
  customSigningKey?: boolean | undefined;
  /**
   * The custom signing algorithm to use when minting JWTs. Required if `custom_signing_key` is `true`.
   */
  signingAlgorithm?: string | null | undefined;
  /**
   * The custom signing private key to use when minting JWTs. Required if `custom_signing_key` is `true`.
   */
  signingKey?: string | null | undefined;
};

export type UpdateJWTTemplateRequest = {
  /**
   * The ID of the JWT template to update
   */
  templateId: string;
  requestBody?: UpdateJWTTemplateRequestBody | undefined;
};

/** @internal */
export const UpdateJWTTemplateClaims$inboundSchema: z.ZodType<
  UpdateJWTTemplateClaims,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateJWTTemplateClaims$Outbound = {};

/** @internal */
export const UpdateJWTTemplateClaims$outboundSchema: z.ZodType<
  UpdateJWTTemplateClaims$Outbound,
  z.ZodTypeDef,
  UpdateJWTTemplateClaims
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateJWTTemplateClaims$ {
  /** @deprecated use `UpdateJWTTemplateClaims$inboundSchema` instead. */
  export const inboundSchema = UpdateJWTTemplateClaims$inboundSchema;
  /** @deprecated use `UpdateJWTTemplateClaims$outboundSchema` instead. */
  export const outboundSchema = UpdateJWTTemplateClaims$outboundSchema;
  /** @deprecated use `UpdateJWTTemplateClaims$Outbound` instead. */
  export type Outbound = UpdateJWTTemplateClaims$Outbound;
}

export function updateJWTTemplateClaimsToJSON(
  updateJWTTemplateClaims: UpdateJWTTemplateClaims,
): string {
  return JSON.stringify(
    UpdateJWTTemplateClaims$outboundSchema.parse(updateJWTTemplateClaims),
  );
}

export function updateJWTTemplateClaimsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateJWTTemplateClaims, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateJWTTemplateClaims$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateJWTTemplateClaims' from JSON`,
  );
}

/** @internal */
export const UpdateJWTTemplateRequestBody$inboundSchema: z.ZodType<
  UpdateJWTTemplateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  claims: z.lazy(() => UpdateJWTTemplateClaims$inboundSchema),
  lifetime: z.nullable(z.number()).optional(),
  allowed_clock_skew: z.nullable(z.number()).optional(),
  custom_signing_key: z.boolean().optional(),
  signing_algorithm: z.nullable(z.string()).optional(),
  signing_key: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "allowed_clock_skew": "allowedClockSkew",
    "custom_signing_key": "customSigningKey",
    "signing_algorithm": "signingAlgorithm",
    "signing_key": "signingKey",
  });
});

/** @internal */
export type UpdateJWTTemplateRequestBody$Outbound = {
  name: string;
  claims: UpdateJWTTemplateClaims$Outbound;
  lifetime?: number | null | undefined;
  allowed_clock_skew?: number | null | undefined;
  custom_signing_key?: boolean | undefined;
  signing_algorithm?: string | null | undefined;
  signing_key?: string | null | undefined;
};

/** @internal */
export const UpdateJWTTemplateRequestBody$outboundSchema: z.ZodType<
  UpdateJWTTemplateRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateJWTTemplateRequestBody
> = z.object({
  name: z.string(),
  claims: z.lazy(() => UpdateJWTTemplateClaims$outboundSchema),
  lifetime: z.nullable(z.number()).optional(),
  allowedClockSkew: z.nullable(z.number()).optional(),
  customSigningKey: z.boolean().optional(),
  signingAlgorithm: z.nullable(z.string()).optional(),
  signingKey: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    allowedClockSkew: "allowed_clock_skew",
    customSigningKey: "custom_signing_key",
    signingAlgorithm: "signing_algorithm",
    signingKey: "signing_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateJWTTemplateRequestBody$ {
  /** @deprecated use `UpdateJWTTemplateRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateJWTTemplateRequestBody$inboundSchema;
  /** @deprecated use `UpdateJWTTemplateRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateJWTTemplateRequestBody$outboundSchema;
  /** @deprecated use `UpdateJWTTemplateRequestBody$Outbound` instead. */
  export type Outbound = UpdateJWTTemplateRequestBody$Outbound;
}

export function updateJWTTemplateRequestBodyToJSON(
  updateJWTTemplateRequestBody: UpdateJWTTemplateRequestBody,
): string {
  return JSON.stringify(
    UpdateJWTTemplateRequestBody$outboundSchema.parse(
      updateJWTTemplateRequestBody,
    ),
  );
}

export function updateJWTTemplateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateJWTTemplateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateJWTTemplateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateJWTTemplateRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateJWTTemplateRequest$inboundSchema: z.ZodType<
  UpdateJWTTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  template_id: z.string(),
  RequestBody: z.lazy(() => UpdateJWTTemplateRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "template_id": "templateId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateJWTTemplateRequest$Outbound = {
  template_id: string;
  RequestBody?: UpdateJWTTemplateRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateJWTTemplateRequest$outboundSchema: z.ZodType<
  UpdateJWTTemplateRequest$Outbound,
  z.ZodTypeDef,
  UpdateJWTTemplateRequest
> = z.object({
  templateId: z.string(),
  requestBody: z.lazy(() => UpdateJWTTemplateRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    templateId: "template_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateJWTTemplateRequest$ {
  /** @deprecated use `UpdateJWTTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateJWTTemplateRequest$inboundSchema;
  /** @deprecated use `UpdateJWTTemplateRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateJWTTemplateRequest$outboundSchema;
  /** @deprecated use `UpdateJWTTemplateRequest$Outbound` instead. */
  export type Outbound = UpdateJWTTemplateRequest$Outbound;
}

export function updateJWTTemplateRequestToJSON(
  updateJWTTemplateRequest: UpdateJWTTemplateRequest,
): string {
  return JSON.stringify(
    UpdateJWTTemplateRequest$outboundSchema.parse(updateJWTTemplateRequest),
  );
}

export function updateJWTTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateJWTTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateJWTTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateJWTTemplateRequest' from JSON`,
  );
}
