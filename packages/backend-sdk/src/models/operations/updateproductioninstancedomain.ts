/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateProductionInstanceDomainRequestBody = {
  /**
   * The new home URL of the production instance e.g. https://www.example.com
   */
  homeUrl?: string | undefined;
  /**
   * Whether the domain is a secondary app.
   */
  isSecondary?: boolean | undefined;
};

/** @internal */
export const UpdateProductionInstanceDomainRequestBody$inboundSchema: z.ZodType<
  UpdateProductionInstanceDomainRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  home_url: z.string().optional(),
  is_secondary: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "home_url": "homeUrl",
    "is_secondary": "isSecondary",
  });
});

/** @internal */
export type UpdateProductionInstanceDomainRequestBody$Outbound = {
  home_url?: string | undefined;
  is_secondary?: boolean | undefined;
};

/** @internal */
export const UpdateProductionInstanceDomainRequestBody$outboundSchema:
  z.ZodType<
    UpdateProductionInstanceDomainRequestBody$Outbound,
    z.ZodTypeDef,
    UpdateProductionInstanceDomainRequestBody
  > = z.object({
    homeUrl: z.string().optional(),
    isSecondary: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      homeUrl: "home_url",
      isSecondary: "is_secondary",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProductionInstanceDomainRequestBody$ {
  /** @deprecated use `UpdateProductionInstanceDomainRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateProductionInstanceDomainRequestBody$inboundSchema;
  /** @deprecated use `UpdateProductionInstanceDomainRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateProductionInstanceDomainRequestBody$outboundSchema;
  /** @deprecated use `UpdateProductionInstanceDomainRequestBody$Outbound` instead. */
  export type Outbound = UpdateProductionInstanceDomainRequestBody$Outbound;
}

export function updateProductionInstanceDomainRequestBodyToJSON(
  updateProductionInstanceDomainRequestBody:
    UpdateProductionInstanceDomainRequestBody,
): string {
  return JSON.stringify(
    UpdateProductionInstanceDomainRequestBody$outboundSchema.parse(
      updateProductionInstanceDomainRequestBody,
    ),
  );
}

export function updateProductionInstanceDomainRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateProductionInstanceDomainRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateProductionInstanceDomainRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateProductionInstanceDomainRequestBody' from JSON`,
  );
}
