/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type DeleteOrganizationDomainRequest = {
  /**
   * The ID of the organization the domain belongs to
   */
  organizationId: string;
  /**
   * The ID of the domain
   */
  domainId: string;
};

/** @internal */
export const DeleteOrganizationDomainRequest$inboundSchema: z.ZodType<
  DeleteOrganizationDomainRequest,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    organization_id: z.string(),
    domain_id: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      organization_id: 'organizationId',
      domain_id: 'domainId',
    });
  });

/** @internal */
export type DeleteOrganizationDomainRequest$Outbound = {
  organization_id: string;
  domain_id: string;
};

/** @internal */
export const DeleteOrganizationDomainRequest$outboundSchema: z.ZodType<
  DeleteOrganizationDomainRequest$Outbound,
  z.ZodTypeDef,
  DeleteOrganizationDomainRequest
> = z
  .object({
    organizationId: z.string(),
    domainId: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      organizationId: 'organization_id',
      domainId: 'domain_id',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteOrganizationDomainRequest$ {
  /** @deprecated use `DeleteOrganizationDomainRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteOrganizationDomainRequest$inboundSchema;
  /** @deprecated use `DeleteOrganizationDomainRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteOrganizationDomainRequest$outboundSchema;
  /** @deprecated use `DeleteOrganizationDomainRequest$Outbound` instead. */
  export type Outbound = DeleteOrganizationDomainRequest$Outbound;
}

export function deleteOrganizationDomainRequestToJSON(
  deleteOrganizationDomainRequest: DeleteOrganizationDomainRequest,
): string {
  return JSON.stringify(DeleteOrganizationDomainRequest$outboundSchema.parse(deleteOrganizationDomainRequest));
}

export function deleteOrganizationDomainRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteOrganizationDomainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => DeleteOrganizationDomainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteOrganizationDomainRequest' from JSON`,
  );
}
