/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateOrganizationMembershipMetadataRequestBody = {
  /**
   * Metadata saved on the organization membership, that is visible to both your frontend and backend.
   *
   * @remarks
   * The new object will be merged with the existing value.
   */
  publicMetadata?: { [k: string]: any } | undefined;
  /**
   * Metadata saved on the organization membership that is only visible to your backend.
   *
   * @remarks
   * The new object will be merged with the existing value.
   */
  privateMetadata?: { [k: string]: any } | undefined;
};

export type UpdateOrganizationMembershipMetadataRequest = {
  /**
   * The ID of the organization the membership belongs to
   */
  organizationId: string;
  /**
   * The ID of the user that this membership belongs to
   */
  userId: string;
  requestBody?: UpdateOrganizationMembershipMetadataRequestBody | undefined;
};

/** @internal */
export const UpdateOrganizationMembershipMetadataRequestBody$inboundSchema:
  z.ZodType<
    UpdateOrganizationMembershipMetadataRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    public_metadata: z.record(z.any()).optional(),
    private_metadata: z.record(z.any()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "public_metadata": "publicMetadata",
      "private_metadata": "privateMetadata",
    });
  });

/** @internal */
export type UpdateOrganizationMembershipMetadataRequestBody$Outbound = {
  public_metadata?: { [k: string]: any } | undefined;
  private_metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const UpdateOrganizationMembershipMetadataRequestBody$outboundSchema:
  z.ZodType<
    UpdateOrganizationMembershipMetadataRequestBody$Outbound,
    z.ZodTypeDef,
    UpdateOrganizationMembershipMetadataRequestBody
  > = z.object({
    publicMetadata: z.record(z.any()).optional(),
    privateMetadata: z.record(z.any()).optional(),
  }).transform((v) => {
    return remap$(v, {
      publicMetadata: "public_metadata",
      privateMetadata: "private_metadata",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOrganizationMembershipMetadataRequestBody$ {
  /** @deprecated use `UpdateOrganizationMembershipMetadataRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateOrganizationMembershipMetadataRequestBody$inboundSchema;
  /** @deprecated use `UpdateOrganizationMembershipMetadataRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOrganizationMembershipMetadataRequestBody$outboundSchema;
  /** @deprecated use `UpdateOrganizationMembershipMetadataRequestBody$Outbound` instead. */
  export type Outbound =
    UpdateOrganizationMembershipMetadataRequestBody$Outbound;
}

export function updateOrganizationMembershipMetadataRequestBodyToJSON(
  updateOrganizationMembershipMetadataRequestBody:
    UpdateOrganizationMembershipMetadataRequestBody,
): string {
  return JSON.stringify(
    UpdateOrganizationMembershipMetadataRequestBody$outboundSchema.parse(
      updateOrganizationMembershipMetadataRequestBody,
    ),
  );
}

export function updateOrganizationMembershipMetadataRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateOrganizationMembershipMetadataRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateOrganizationMembershipMetadataRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateOrganizationMembershipMetadataRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateOrganizationMembershipMetadataRequest$inboundSchema:
  z.ZodType<
    UpdateOrganizationMembershipMetadataRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    organization_id: z.string(),
    user_id: z.string(),
    RequestBody: z.lazy(() =>
      UpdateOrganizationMembershipMetadataRequestBody$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "organization_id": "organizationId",
      "user_id": "userId",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type UpdateOrganizationMembershipMetadataRequest$Outbound = {
  organization_id: string;
  user_id: string;
  RequestBody?:
    | UpdateOrganizationMembershipMetadataRequestBody$Outbound
    | undefined;
};

/** @internal */
export const UpdateOrganizationMembershipMetadataRequest$outboundSchema:
  z.ZodType<
    UpdateOrganizationMembershipMetadataRequest$Outbound,
    z.ZodTypeDef,
    UpdateOrganizationMembershipMetadataRequest
  > = z.object({
    organizationId: z.string(),
    userId: z.string(),
    requestBody: z.lazy(() =>
      UpdateOrganizationMembershipMetadataRequestBody$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      organizationId: "organization_id",
      userId: "user_id",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOrganizationMembershipMetadataRequest$ {
  /** @deprecated use `UpdateOrganizationMembershipMetadataRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateOrganizationMembershipMetadataRequest$inboundSchema;
  /** @deprecated use `UpdateOrganizationMembershipMetadataRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOrganizationMembershipMetadataRequest$outboundSchema;
  /** @deprecated use `UpdateOrganizationMembershipMetadataRequest$Outbound` instead. */
  export type Outbound = UpdateOrganizationMembershipMetadataRequest$Outbound;
}

export function updateOrganizationMembershipMetadataRequestToJSON(
  updateOrganizationMembershipMetadataRequest:
    UpdateOrganizationMembershipMetadataRequest,
): string {
  return JSON.stringify(
    UpdateOrganizationMembershipMetadataRequest$outboundSchema.parse(
      updateOrganizationMembershipMetadataRequest,
    ),
  );
}

export function updateOrganizationMembershipMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateOrganizationMembershipMetadataRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateOrganizationMembershipMetadataRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateOrganizationMembershipMetadataRequest' from JSON`,
  );
}
