/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type UpdateSignUpRequestBody = {
  /**
   * The ID of the guest attempting to sign up as used in your external systems or your previous authentication solution.
   *
   * @remarks
   * This will be copied to the resulting user when the sign-up is completed.
   */
  externalId?: string | null | undefined;
  /**
   * If true, the sign-up will be marked as a custom action.
   */
  customAction?: boolean | null | undefined;
};

export type UpdateSignUpRequest = {
  /**
   * The ID of the sign-up to update
   */
  id: string;
  requestBody?: UpdateSignUpRequestBody | undefined;
};

/** @internal */
export const UpdateSignUpRequestBody$inboundSchema: z.ZodType<UpdateSignUpRequestBody, z.ZodTypeDef, unknown> = z
  .object({
    external_id: z.nullable(z.string()).optional(),
    custom_action: z.nullable(z.boolean()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      external_id: 'externalId',
      custom_action: 'customAction',
    });
  });

/** @internal */
export type UpdateSignUpRequestBody$Outbound = {
  external_id?: string | null | undefined;
  custom_action?: boolean | null | undefined;
};

/** @internal */
export const UpdateSignUpRequestBody$outboundSchema: z.ZodType<
  UpdateSignUpRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateSignUpRequestBody
> = z
  .object({
    externalId: z.nullable(z.string()).optional(),
    customAction: z.nullable(z.boolean()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      externalId: 'external_id',
      customAction: 'custom_action',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSignUpRequestBody$ {
  /** @deprecated use `UpdateSignUpRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateSignUpRequestBody$inboundSchema;
  /** @deprecated use `UpdateSignUpRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateSignUpRequestBody$outboundSchema;
  /** @deprecated use `UpdateSignUpRequestBody$Outbound` instead. */
  export type Outbound = UpdateSignUpRequestBody$Outbound;
}

export function updateSignUpRequestBodyToJSON(updateSignUpRequestBody: UpdateSignUpRequestBody): string {
  return JSON.stringify(UpdateSignUpRequestBody$outboundSchema.parse(updateSignUpRequestBody));
}

export function updateSignUpRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSignUpRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    x => UpdateSignUpRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSignUpRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateSignUpRequest$inboundSchema: z.ZodType<UpdateSignUpRequest, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    RequestBody: z.lazy(() => UpdateSignUpRequestBody$inboundSchema).optional(),
  })
  .transform(v => {
    return remap$(v, {
      RequestBody: 'requestBody',
    });
  });

/** @internal */
export type UpdateSignUpRequest$Outbound = {
  id: string;
  RequestBody?: UpdateSignUpRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateSignUpRequest$outboundSchema: z.ZodType<
  UpdateSignUpRequest$Outbound,
  z.ZodTypeDef,
  UpdateSignUpRequest
> = z
  .object({
    id: z.string(),
    requestBody: z.lazy(() => UpdateSignUpRequestBody$outboundSchema).optional(),
  })
  .transform(v => {
    return remap$(v, {
      requestBody: 'RequestBody',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSignUpRequest$ {
  /** @deprecated use `UpdateSignUpRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSignUpRequest$inboundSchema;
  /** @deprecated use `UpdateSignUpRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSignUpRequest$outboundSchema;
  /** @deprecated use `UpdateSignUpRequest$Outbound` instead. */
  export type Outbound = UpdateSignUpRequest$Outbound;
}

export function updateSignUpRequestToJSON(updateSignUpRequest: UpdateSignUpRequest): string {
  return JSON.stringify(UpdateSignUpRequest$outboundSchema.parse(updateSignUpRequest));
}

export function updateSignUpRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSignUpRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => UpdateSignUpRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSignUpRequest' from JSON`,
  );
}
