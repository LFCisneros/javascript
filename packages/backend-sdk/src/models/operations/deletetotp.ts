/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type DeleteTOTPRequest = {
  /**
   * The ID of the user whose TOTPs are to be deleted
   */
  userId: string;
};

/**
 * Successful operation.
 */
export type DeleteTOTPResponseBody = {
  userId?: string | undefined;
};

/** @internal */
export const DeleteTOTPRequest$inboundSchema: z.ZodType<DeleteTOTPRequest, z.ZodTypeDef, unknown> = z
  .object({
    user_id: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      user_id: 'userId',
    });
  });

/** @internal */
export type DeleteTOTPRequest$Outbound = {
  user_id: string;
};

/** @internal */
export const DeleteTOTPRequest$outboundSchema: z.ZodType<DeleteTOTPRequest$Outbound, z.ZodTypeDef, DeleteTOTPRequest> =
  z
    .object({
      userId: z.string(),
    })
    .transform(v => {
      return remap$(v, {
        userId: 'user_id',
      });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTOTPRequest$ {
  /** @deprecated use `DeleteTOTPRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteTOTPRequest$inboundSchema;
  /** @deprecated use `DeleteTOTPRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteTOTPRequest$outboundSchema;
  /** @deprecated use `DeleteTOTPRequest$Outbound` instead. */
  export type Outbound = DeleteTOTPRequest$Outbound;
}

export function deleteTOTPRequestToJSON(deleteTOTPRequest: DeleteTOTPRequest): string {
  return JSON.stringify(DeleteTOTPRequest$outboundSchema.parse(deleteTOTPRequest));
}

export function deleteTOTPRequestFromJSON(jsonString: string): SafeParseResult<DeleteTOTPRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => DeleteTOTPRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTOTPRequest' from JSON`,
  );
}

/** @internal */
export const DeleteTOTPResponseBody$inboundSchema: z.ZodType<DeleteTOTPResponseBody, z.ZodTypeDef, unknown> = z
  .object({
    user_id: z.string().optional(),
  })
  .transform(v => {
    return remap$(v, {
      user_id: 'userId',
    });
  });

/** @internal */
export type DeleteTOTPResponseBody$Outbound = {
  user_id?: string | undefined;
};

/** @internal */
export const DeleteTOTPResponseBody$outboundSchema: z.ZodType<
  DeleteTOTPResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteTOTPResponseBody
> = z
  .object({
    userId: z.string().optional(),
  })
  .transform(v => {
    return remap$(v, {
      userId: 'user_id',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTOTPResponseBody$ {
  /** @deprecated use `DeleteTOTPResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteTOTPResponseBody$inboundSchema;
  /** @deprecated use `DeleteTOTPResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteTOTPResponseBody$outboundSchema;
  /** @deprecated use `DeleteTOTPResponseBody$Outbound` instead. */
  export type Outbound = DeleteTOTPResponseBody$Outbound;
}

export function deleteTOTPResponseBodyToJSON(deleteTOTPResponseBody: DeleteTOTPResponseBody): string {
  return JSON.stringify(DeleteTOTPResponseBody$outboundSchema.parse(deleteTOTPResponseBody));
}

export function deleteTOTPResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTOTPResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    x => DeleteTOTPResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTOTPResponseBody' from JSON`,
  );
}
