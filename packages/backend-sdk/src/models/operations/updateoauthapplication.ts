/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type UpdateOAuthApplicationRequestBody = {
  /**
   * The new name of the OAuth application.
   *
   * @remarks
   * Max length: 256
   */
  name?: string | null | undefined;
  /**
   * An array of redirect URIs of the new OAuth application
   */
  redirectUris?: Array<string> | null | undefined;
  /**
   * The new callback URL of the OAuth application
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  callbackUrl?: string | null | undefined;
  /**
   * Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
   */
  scopes?: string | null | undefined;
  /**
   * If true, this client is public and you can use the Proof Key of Code Exchange (PKCE) flow.
   */
  public?: boolean | null | undefined;
};

export type UpdateOAuthApplicationRequest = {
  /**
   * The ID of the OAuth application to update
   */
  oauthApplicationId: string;
  requestBody: UpdateOAuthApplicationRequestBody;
};

/** @internal */
export const UpdateOAuthApplicationRequestBody$inboundSchema: z.ZodType<
  UpdateOAuthApplicationRequestBody,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    name: z.nullable(z.string()).optional(),
    redirect_uris: z.nullable(z.array(z.string())).optional(),
    callback_url: z.nullable(z.string()).optional(),
    scopes: z.nullable(z.string().default('profile email')),
    public: z.nullable(z.boolean()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      redirect_uris: 'redirectUris',
      callback_url: 'callbackUrl',
    });
  });

/** @internal */
export type UpdateOAuthApplicationRequestBody$Outbound = {
  name?: string | null | undefined;
  redirect_uris?: Array<string> | null | undefined;
  callback_url?: string | null | undefined;
  scopes: string | null;
  public?: boolean | null | undefined;
};

/** @internal */
export const UpdateOAuthApplicationRequestBody$outboundSchema: z.ZodType<
  UpdateOAuthApplicationRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateOAuthApplicationRequestBody
> = z
  .object({
    name: z.nullable(z.string()).optional(),
    redirectUris: z.nullable(z.array(z.string())).optional(),
    callbackUrl: z.nullable(z.string()).optional(),
    scopes: z.nullable(z.string().default('profile email')),
    public: z.nullable(z.boolean()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      redirectUris: 'redirect_uris',
      callbackUrl: 'callback_url',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOAuthApplicationRequestBody$ {
  /** @deprecated use `UpdateOAuthApplicationRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateOAuthApplicationRequestBody$inboundSchema;
  /** @deprecated use `UpdateOAuthApplicationRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateOAuthApplicationRequestBody$outboundSchema;
  /** @deprecated use `UpdateOAuthApplicationRequestBody$Outbound` instead. */
  export type Outbound = UpdateOAuthApplicationRequestBody$Outbound;
}

export function updateOAuthApplicationRequestBodyToJSON(
  updateOAuthApplicationRequestBody: UpdateOAuthApplicationRequestBody,
): string {
  return JSON.stringify(UpdateOAuthApplicationRequestBody$outboundSchema.parse(updateOAuthApplicationRequestBody));
}

export function updateOAuthApplicationRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOAuthApplicationRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    x => UpdateOAuthApplicationRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOAuthApplicationRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateOAuthApplicationRequest$inboundSchema: z.ZodType<
  UpdateOAuthApplicationRequest,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    oauth_application_id: z.string(),
    RequestBody: z.lazy(() => UpdateOAuthApplicationRequestBody$inboundSchema),
  })
  .transform(v => {
    return remap$(v, {
      oauth_application_id: 'oauthApplicationId',
      RequestBody: 'requestBody',
    });
  });

/** @internal */
export type UpdateOAuthApplicationRequest$Outbound = {
  oauth_application_id: string;
  RequestBody: UpdateOAuthApplicationRequestBody$Outbound;
};

/** @internal */
export const UpdateOAuthApplicationRequest$outboundSchema: z.ZodType<
  UpdateOAuthApplicationRequest$Outbound,
  z.ZodTypeDef,
  UpdateOAuthApplicationRequest
> = z
  .object({
    oauthApplicationId: z.string(),
    requestBody: z.lazy(() => UpdateOAuthApplicationRequestBody$outboundSchema),
  })
  .transform(v => {
    return remap$(v, {
      oauthApplicationId: 'oauth_application_id',
      requestBody: 'RequestBody',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOAuthApplicationRequest$ {
  /** @deprecated use `UpdateOAuthApplicationRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateOAuthApplicationRequest$inboundSchema;
  /** @deprecated use `UpdateOAuthApplicationRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateOAuthApplicationRequest$outboundSchema;
  /** @deprecated use `UpdateOAuthApplicationRequest$Outbound` instead. */
  export type Outbound = UpdateOAuthApplicationRequest$Outbound;
}

export function updateOAuthApplicationRequestToJSON(
  updateOAuthApplicationRequest: UpdateOAuthApplicationRequest,
): string {
  return JSON.stringify(UpdateOAuthApplicationRequest$outboundSchema.parse(updateOAuthApplicationRequest));
}

export function updateOAuthApplicationRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOAuthApplicationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => UpdateOAuthApplicationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOAuthApplicationRequest' from JSON`,
  );
}
