/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type UpdateInstanceOrganizationSettingsRequestBody = {
  enabled?: boolean | null | undefined;
  maxAllowedMemberships?: number | null | undefined;
  adminDeleteEnabled?: boolean | null | undefined;
  domainsEnabled?: boolean | null | undefined;
  /**
   * Specify which enrollment modes to enable for your Organization Domains.
   *
   * @remarks
   * Supported modes are 'automatic_invitation' & 'automatic_suggestion'.
   */
  domainsEnrollmentModes?: Array<string> | undefined;
  /**
   * Specify what the default organization role is for an organization creator.
   */
  creatorRoleId?: string | null | undefined;
  /**
   * Specify what the default organization role is for the organization domains.
   */
  domainsDefaultRoleId?: string | null | undefined;
};

/** @internal */
export const UpdateInstanceOrganizationSettingsRequestBody$inboundSchema: z.ZodType<
  UpdateInstanceOrganizationSettingsRequestBody,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    enabled: z.nullable(z.boolean()).optional(),
    max_allowed_memberships: z.nullable(z.number().int()).optional(),
    admin_delete_enabled: z.nullable(z.boolean()).optional(),
    domains_enabled: z.nullable(z.boolean()).optional(),
    domains_enrollment_modes: z.array(z.string()).optional(),
    creator_role_id: z.nullable(z.string()).optional(),
    domains_default_role_id: z.nullable(z.string()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      max_allowed_memberships: 'maxAllowedMemberships',
      admin_delete_enabled: 'adminDeleteEnabled',
      domains_enabled: 'domainsEnabled',
      domains_enrollment_modes: 'domainsEnrollmentModes',
      creator_role_id: 'creatorRoleId',
      domains_default_role_id: 'domainsDefaultRoleId',
    });
  });

/** @internal */
export type UpdateInstanceOrganizationSettingsRequestBody$Outbound = {
  enabled?: boolean | null | undefined;
  max_allowed_memberships?: number | null | undefined;
  admin_delete_enabled?: boolean | null | undefined;
  domains_enabled?: boolean | null | undefined;
  domains_enrollment_modes?: Array<string> | undefined;
  creator_role_id?: string | null | undefined;
  domains_default_role_id?: string | null | undefined;
};

/** @internal */
export const UpdateInstanceOrganizationSettingsRequestBody$outboundSchema: z.ZodType<
  UpdateInstanceOrganizationSettingsRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateInstanceOrganizationSettingsRequestBody
> = z
  .object({
    enabled: z.nullable(z.boolean()).optional(),
    maxAllowedMemberships: z.nullable(z.number().int()).optional(),
    adminDeleteEnabled: z.nullable(z.boolean()).optional(),
    domainsEnabled: z.nullable(z.boolean()).optional(),
    domainsEnrollmentModes: z.array(z.string()).optional(),
    creatorRoleId: z.nullable(z.string()).optional(),
    domainsDefaultRoleId: z.nullable(z.string()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      maxAllowedMemberships: 'max_allowed_memberships',
      adminDeleteEnabled: 'admin_delete_enabled',
      domainsEnabled: 'domains_enabled',
      domainsEnrollmentModes: 'domains_enrollment_modes',
      creatorRoleId: 'creator_role_id',
      domainsDefaultRoleId: 'domains_default_role_id',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstanceOrganizationSettingsRequestBody$ {
  /** @deprecated use `UpdateInstanceOrganizationSettingsRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateInstanceOrganizationSettingsRequestBody$inboundSchema;
  /** @deprecated use `UpdateInstanceOrganizationSettingsRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateInstanceOrganizationSettingsRequestBody$outboundSchema;
  /** @deprecated use `UpdateInstanceOrganizationSettingsRequestBody$Outbound` instead. */
  export type Outbound = UpdateInstanceOrganizationSettingsRequestBody$Outbound;
}

export function updateInstanceOrganizationSettingsRequestBodyToJSON(
  updateInstanceOrganizationSettingsRequestBody: UpdateInstanceOrganizationSettingsRequestBody,
): string {
  return JSON.stringify(
    UpdateInstanceOrganizationSettingsRequestBody$outboundSchema.parse(updateInstanceOrganizationSettingsRequestBody),
  );
}

export function updateInstanceOrganizationSettingsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstanceOrganizationSettingsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    x => UpdateInstanceOrganizationSettingsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstanceOrganizationSettingsRequestBody' from JSON`,
  );
}
