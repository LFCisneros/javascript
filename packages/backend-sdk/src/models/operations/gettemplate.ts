/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

/**
 * The type of templates to retrieve (email or SMS)
 */
export const PathParamTemplateType = {
  Email: 'email',
  Sms: 'sms',
} as const;
/**
 * The type of templates to retrieve (email or SMS)
 */
export type PathParamTemplateType = ClosedEnum<typeof PathParamTemplateType>;

export type GetTemplateRequest = {
  /**
   * The type of templates to retrieve (email or SMS)
   */
  templateType: PathParamTemplateType;
  /**
   * The slug (i.e. machine-friendly name) of the template to retrieve
   */
  slug: string;
};

/** @internal */
export const PathParamTemplateType$inboundSchema: z.ZodNativeEnum<typeof PathParamTemplateType> =
  z.nativeEnum(PathParamTemplateType);

/** @internal */
export const PathParamTemplateType$outboundSchema: z.ZodNativeEnum<typeof PathParamTemplateType> =
  PathParamTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PathParamTemplateType$ {
  /** @deprecated use `PathParamTemplateType$inboundSchema` instead. */
  export const inboundSchema = PathParamTemplateType$inboundSchema;
  /** @deprecated use `PathParamTemplateType$outboundSchema` instead. */
  export const outboundSchema = PathParamTemplateType$outboundSchema;
}

/** @internal */
export const GetTemplateRequest$inboundSchema: z.ZodType<GetTemplateRequest, z.ZodTypeDef, unknown> = z
  .object({
    template_type: PathParamTemplateType$inboundSchema,
    slug: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      template_type: 'templateType',
    });
  });

/** @internal */
export type GetTemplateRequest$Outbound = {
  template_type: string;
  slug: string;
};

/** @internal */
export const GetTemplateRequest$outboundSchema: z.ZodType<
  GetTemplateRequest$Outbound,
  z.ZodTypeDef,
  GetTemplateRequest
> = z
  .object({
    templateType: PathParamTemplateType$outboundSchema,
    slug: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      templateType: 'template_type',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTemplateRequest$ {
  /** @deprecated use `GetTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = GetTemplateRequest$inboundSchema;
  /** @deprecated use `GetTemplateRequest$outboundSchema` instead. */
  export const outboundSchema = GetTemplateRequest$outboundSchema;
  /** @deprecated use `GetTemplateRequest$Outbound` instead. */
  export type Outbound = GetTemplateRequest$Outbound;
}

export function getTemplateRequestToJSON(getTemplateRequest: GetTemplateRequest): string {
  return JSON.stringify(GetTemplateRequest$outboundSchema.parse(getTemplateRequest));
}

export function getTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => GetTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTemplateRequest' from JSON`,
  );
}
