/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * JWT template claims in JSON format
 */
export type Claims = {};

export type CreateJWTTemplateRequestBody = {
  /**
   * JWT template name
   */
  name: string;
  /**
   * JWT template claims in JSON format
   */
  claims: Claims;
  /**
   * JWT token lifetime
   */
  lifetime?: number | null | undefined;
  /**
   * JWT token allowed clock skew
   */
  allowedClockSkew?: number | null | undefined;
  /**
   * Whether a custom signing key/algorithm is also provided for this template
   */
  customSigningKey?: boolean | undefined;
  /**
   * The custom signing algorithm to use when minting JWTs. Required if `custom_signing_key` is `true`.
   */
  signingAlgorithm?: string | null | undefined;
  /**
   * The custom signing private key to use when minting JWTs. Required if `custom_signing_key` is `true`.
   */
  signingKey?: string | null | undefined;
};

/** @internal */
export const Claims$inboundSchema: z.ZodType<Claims, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Claims$Outbound = {};

/** @internal */
export const Claims$outboundSchema: z.ZodType<
  Claims$Outbound,
  z.ZodTypeDef,
  Claims
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Claims$ {
  /** @deprecated use `Claims$inboundSchema` instead. */
  export const inboundSchema = Claims$inboundSchema;
  /** @deprecated use `Claims$outboundSchema` instead. */
  export const outboundSchema = Claims$outboundSchema;
  /** @deprecated use `Claims$Outbound` instead. */
  export type Outbound = Claims$Outbound;
}

export function claimsToJSON(claims: Claims): string {
  return JSON.stringify(Claims$outboundSchema.parse(claims));
}

export function claimsFromJSON(
  jsonString: string,
): SafeParseResult<Claims, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Claims$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Claims' from JSON`,
  );
}

/** @internal */
export const CreateJWTTemplateRequestBody$inboundSchema: z.ZodType<
  CreateJWTTemplateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  claims: z.lazy(() => Claims$inboundSchema),
  lifetime: z.nullable(z.number()).optional(),
  allowed_clock_skew: z.nullable(z.number()).optional(),
  custom_signing_key: z.boolean().optional(),
  signing_algorithm: z.nullable(z.string()).optional(),
  signing_key: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "allowed_clock_skew": "allowedClockSkew",
    "custom_signing_key": "customSigningKey",
    "signing_algorithm": "signingAlgorithm",
    "signing_key": "signingKey",
  });
});

/** @internal */
export type CreateJWTTemplateRequestBody$Outbound = {
  name: string;
  claims: Claims$Outbound;
  lifetime?: number | null | undefined;
  allowed_clock_skew?: number | null | undefined;
  custom_signing_key?: boolean | undefined;
  signing_algorithm?: string | null | undefined;
  signing_key?: string | null | undefined;
};

/** @internal */
export const CreateJWTTemplateRequestBody$outboundSchema: z.ZodType<
  CreateJWTTemplateRequestBody$Outbound,
  z.ZodTypeDef,
  CreateJWTTemplateRequestBody
> = z.object({
  name: z.string(),
  claims: z.lazy(() => Claims$outboundSchema),
  lifetime: z.nullable(z.number()).optional(),
  allowedClockSkew: z.nullable(z.number()).optional(),
  customSigningKey: z.boolean().optional(),
  signingAlgorithm: z.nullable(z.string()).optional(),
  signingKey: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    allowedClockSkew: "allowed_clock_skew",
    customSigningKey: "custom_signing_key",
    signingAlgorithm: "signing_algorithm",
    signingKey: "signing_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateJWTTemplateRequestBody$ {
  /** @deprecated use `CreateJWTTemplateRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateJWTTemplateRequestBody$inboundSchema;
  /** @deprecated use `CreateJWTTemplateRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateJWTTemplateRequestBody$outboundSchema;
  /** @deprecated use `CreateJWTTemplateRequestBody$Outbound` instead. */
  export type Outbound = CreateJWTTemplateRequestBody$Outbound;
}

export function createJWTTemplateRequestBodyToJSON(
  createJWTTemplateRequestBody: CreateJWTTemplateRequestBody,
): string {
  return JSON.stringify(
    CreateJWTTemplateRequestBody$outboundSchema.parse(
      createJWTTemplateRequestBody,
    ),
  );
}

export function createJWTTemplateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateJWTTemplateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateJWTTemplateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateJWTTemplateRequestBody' from JSON`,
  );
}
