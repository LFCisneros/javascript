/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VerifyDomainProxyRequestBody = {
  /**
   * The ID of the domain that will be updated.
   */
  domainId?: string | undefined;
  /**
   * The full URL of the proxy which will forward requests to the Clerk Frontend API for this domain. e.g. https://example.com/__clerk
   */
  proxyUrl?: string | undefined;
};

/** @internal */
export const VerifyDomainProxyRequestBody$inboundSchema: z.ZodType<
  VerifyDomainProxyRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain_id: z.string().optional(),
  proxy_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "domain_id": "domainId",
    "proxy_url": "proxyUrl",
  });
});

/** @internal */
export type VerifyDomainProxyRequestBody$Outbound = {
  domain_id?: string | undefined;
  proxy_url?: string | undefined;
};

/** @internal */
export const VerifyDomainProxyRequestBody$outboundSchema: z.ZodType<
  VerifyDomainProxyRequestBody$Outbound,
  z.ZodTypeDef,
  VerifyDomainProxyRequestBody
> = z.object({
  domainId: z.string().optional(),
  proxyUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    domainId: "domain_id",
    proxyUrl: "proxy_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyDomainProxyRequestBody$ {
  /** @deprecated use `VerifyDomainProxyRequestBody$inboundSchema` instead. */
  export const inboundSchema = VerifyDomainProxyRequestBody$inboundSchema;
  /** @deprecated use `VerifyDomainProxyRequestBody$outboundSchema` instead. */
  export const outboundSchema = VerifyDomainProxyRequestBody$outboundSchema;
  /** @deprecated use `VerifyDomainProxyRequestBody$Outbound` instead. */
  export type Outbound = VerifyDomainProxyRequestBody$Outbound;
}

export function verifyDomainProxyRequestBodyToJSON(
  verifyDomainProxyRequestBody: VerifyDomainProxyRequestBody,
): string {
  return JSON.stringify(
    VerifyDomainProxyRequestBody$outboundSchema.parse(
      verifyDomainProxyRequestBody,
    ),
  );
}

export function verifyDomainProxyRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VerifyDomainProxyRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyDomainProxyRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyDomainProxyRequestBody' from JSON`,
  );
}
