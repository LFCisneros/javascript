/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type GetClientRequest = {
  /**
   * Client ID.
   */
  clientId: string;
};

/** @internal */
export const GetClientRequest$inboundSchema: z.ZodType<GetClientRequest, z.ZodTypeDef, unknown> = z
  .object({
    client_id: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      client_id: 'clientId',
    });
  });

/** @internal */
export type GetClientRequest$Outbound = {
  client_id: string;
};

/** @internal */
export const GetClientRequest$outboundSchema: z.ZodType<GetClientRequest$Outbound, z.ZodTypeDef, GetClientRequest> = z
  .object({
    clientId: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      clientId: 'client_id',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientRequest$ {
  /** @deprecated use `GetClientRequest$inboundSchema` instead. */
  export const inboundSchema = GetClientRequest$inboundSchema;
  /** @deprecated use `GetClientRequest$outboundSchema` instead. */
  export const outboundSchema = GetClientRequest$outboundSchema;
  /** @deprecated use `GetClientRequest$Outbound` instead. */
  export type Outbound = GetClientRequest$Outbound;
}

export function getClientRequestToJSON(getClientRequest: GetClientRequest): string {
  return JSON.stringify(GetClientRequest$outboundSchema.parse(getClientRequest));
}

export function getClientRequestFromJSON(jsonString: string): SafeParseResult<GetClientRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => GetClientRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientRequest' from JSON`,
  );
}
