/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Parameters.
 */
export type VerifyClientRequestBody = {
  /**
   * A JWT that represents the active client.
   */
  token: string;
};

/** @internal */
export const VerifyClientRequestBody$inboundSchema: z.ZodType<
  VerifyClientRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
});

/** @internal */
export type VerifyClientRequestBody$Outbound = {
  token: string;
};

/** @internal */
export const VerifyClientRequestBody$outboundSchema: z.ZodType<
  VerifyClientRequestBody$Outbound,
  z.ZodTypeDef,
  VerifyClientRequestBody
> = z.object({
  token: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyClientRequestBody$ {
  /** @deprecated use `VerifyClientRequestBody$inboundSchema` instead. */
  export const inboundSchema = VerifyClientRequestBody$inboundSchema;
  /** @deprecated use `VerifyClientRequestBody$outboundSchema` instead. */
  export const outboundSchema = VerifyClientRequestBody$outboundSchema;
  /** @deprecated use `VerifyClientRequestBody$Outbound` instead. */
  export type Outbound = VerifyClientRequestBody$Outbound;
}

export function verifyClientRequestBodyToJSON(
  verifyClientRequestBody: VerifyClientRequestBody,
): string {
  return JSON.stringify(
    VerifyClientRequestBody$outboundSchema.parse(verifyClientRequestBody),
  );
}

export function verifyClientRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VerifyClientRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyClientRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyClientRequestBody' from JSON`,
  );
}
