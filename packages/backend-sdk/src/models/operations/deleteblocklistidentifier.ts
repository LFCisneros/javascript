/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteBlocklistIdentifierRequest = {
  /**
   * The ID of the identifier to delete from the block-list
   */
  identifierId: string;
};

/** @internal */
export const DeleteBlocklistIdentifierRequest$inboundSchema: z.ZodType<
  DeleteBlocklistIdentifierRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "identifier_id": "identifierId",
  });
});

/** @internal */
export type DeleteBlocklistIdentifierRequest$Outbound = {
  identifier_id: string;
};

/** @internal */
export const DeleteBlocklistIdentifierRequest$outboundSchema: z.ZodType<
  DeleteBlocklistIdentifierRequest$Outbound,
  z.ZodTypeDef,
  DeleteBlocklistIdentifierRequest
> = z.object({
  identifierId: z.string(),
}).transform((v) => {
  return remap$(v, {
    identifierId: "identifier_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteBlocklistIdentifierRequest$ {
  /** @deprecated use `DeleteBlocklistIdentifierRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteBlocklistIdentifierRequest$inboundSchema;
  /** @deprecated use `DeleteBlocklistIdentifierRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteBlocklistIdentifierRequest$outboundSchema;
  /** @deprecated use `DeleteBlocklistIdentifierRequest$Outbound` instead. */
  export type Outbound = DeleteBlocklistIdentifierRequest$Outbound;
}

export function deleteBlocklistIdentifierRequestToJSON(
  deleteBlocklistIdentifierRequest: DeleteBlocklistIdentifierRequest,
): string {
  return JSON.stringify(
    DeleteBlocklistIdentifierRequest$outboundSchema.parse(
      deleteBlocklistIdentifierRequest,
    ),
  );
}

export function deleteBlocklistIdentifierRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteBlocklistIdentifierRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteBlocklistIdentifierRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteBlocklistIdentifierRequest' from JSON`,
  );
}
