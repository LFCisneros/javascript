/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The IdP provider of the connection.
 */
export const Provider = {
  SamlCustom: "saml_custom",
  SamlOkta: "saml_okta",
  SamlGoogle: "saml_google",
  SamlMicrosoft: "saml_microsoft",
} as const;
/**
 * The IdP provider of the connection.
 */
export type Provider = ClosedEnum<typeof Provider>;

/**
 * Define the attribute name mapping between Identity Provider and Clerk's user properties
 */
export type AttributeMapping = {
  userId?: string | undefined;
  emailAddress?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
};

export type CreateSAMLConnectionRequestBody = {
  /**
   * The name to use as a label for this SAML Connection
   */
  name: string;
  /**
   * The domain of your organization. Sign in flows using an email with this domain, will use this SAML Connection.
   */
  domain: string;
  /**
   * The IdP provider of the connection.
   */
  provider: Provider;
  /**
   * The Entity ID as provided by the IdP
   */
  idpEntityId?: string | null | undefined;
  /**
   * The Single-Sign On URL as provided by the IdP
   */
  idpSsoUrl?: string | null | undefined;
  /**
   * The X.509 certificate as provided by the IdP
   */
  idpCertificate?: string | null | undefined;
  /**
   * The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties
   */
  idpMetadataUrl?: string | null | undefined;
  /**
   * The XML content of the IdP metadata file. If present, it takes priority over the corresponding individual properties
   */
  idpMetadata?: string | null | undefined;
  /**
   * The ID of the organization to which users of this SAML Connection will be added
   */
  organizationId?: string | null | undefined;
  /**
   * Define the attribute name mapping between Identity Provider and Clerk's user properties
   */
  attributeMapping?: AttributeMapping | null | undefined;
};

/** @internal */
export const Provider$inboundSchema: z.ZodNativeEnum<typeof Provider> = z
  .nativeEnum(Provider);

/** @internal */
export const Provider$outboundSchema: z.ZodNativeEnum<typeof Provider> =
  Provider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Provider$ {
  /** @deprecated use `Provider$inboundSchema` instead. */
  export const inboundSchema = Provider$inboundSchema;
  /** @deprecated use `Provider$outboundSchema` instead. */
  export const outboundSchema = Provider$outboundSchema;
}

/** @internal */
export const AttributeMapping$inboundSchema: z.ZodType<
  AttributeMapping,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string().optional(),
  email_address: z.string().optional(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "email_address": "emailAddress",
    "first_name": "firstName",
    "last_name": "lastName",
  });
});

/** @internal */
export type AttributeMapping$Outbound = {
  user_id?: string | undefined;
  email_address?: string | undefined;
  first_name?: string | undefined;
  last_name?: string | undefined;
};

/** @internal */
export const AttributeMapping$outboundSchema: z.ZodType<
  AttributeMapping$Outbound,
  z.ZodTypeDef,
  AttributeMapping
> = z.object({
  userId: z.string().optional(),
  emailAddress: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    emailAddress: "email_address",
    firstName: "first_name",
    lastName: "last_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttributeMapping$ {
  /** @deprecated use `AttributeMapping$inboundSchema` instead. */
  export const inboundSchema = AttributeMapping$inboundSchema;
  /** @deprecated use `AttributeMapping$outboundSchema` instead. */
  export const outboundSchema = AttributeMapping$outboundSchema;
  /** @deprecated use `AttributeMapping$Outbound` instead. */
  export type Outbound = AttributeMapping$Outbound;
}

export function attributeMappingToJSON(
  attributeMapping: AttributeMapping,
): string {
  return JSON.stringify(
    AttributeMapping$outboundSchema.parse(attributeMapping),
  );
}

export function attributeMappingFromJSON(
  jsonString: string,
): SafeParseResult<AttributeMapping, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttributeMapping$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttributeMapping' from JSON`,
  );
}

/** @internal */
export const CreateSAMLConnectionRequestBody$inboundSchema: z.ZodType<
  CreateSAMLConnectionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  domain: z.string(),
  provider: Provider$inboundSchema,
  idp_entity_id: z.nullable(z.string()).optional(),
  idp_sso_url: z.nullable(z.string()).optional(),
  idp_certificate: z.nullable(z.string()).optional(),
  idp_metadata_url: z.nullable(z.string()).optional(),
  idp_metadata: z.nullable(z.string()).optional(),
  organization_id: z.nullable(z.string()).optional(),
  attribute_mapping: z.nullable(z.lazy(() => AttributeMapping$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "idp_entity_id": "idpEntityId",
    "idp_sso_url": "idpSsoUrl",
    "idp_certificate": "idpCertificate",
    "idp_metadata_url": "idpMetadataUrl",
    "idp_metadata": "idpMetadata",
    "organization_id": "organizationId",
    "attribute_mapping": "attributeMapping",
  });
});

/** @internal */
export type CreateSAMLConnectionRequestBody$Outbound = {
  name: string;
  domain: string;
  provider: string;
  idp_entity_id?: string | null | undefined;
  idp_sso_url?: string | null | undefined;
  idp_certificate?: string | null | undefined;
  idp_metadata_url?: string | null | undefined;
  idp_metadata?: string | null | undefined;
  organization_id?: string | null | undefined;
  attribute_mapping?: AttributeMapping$Outbound | null | undefined;
};

/** @internal */
export const CreateSAMLConnectionRequestBody$outboundSchema: z.ZodType<
  CreateSAMLConnectionRequestBody$Outbound,
  z.ZodTypeDef,
  CreateSAMLConnectionRequestBody
> = z.object({
  name: z.string(),
  domain: z.string(),
  provider: Provider$outboundSchema,
  idpEntityId: z.nullable(z.string()).optional(),
  idpSsoUrl: z.nullable(z.string()).optional(),
  idpCertificate: z.nullable(z.string()).optional(),
  idpMetadataUrl: z.nullable(z.string()).optional(),
  idpMetadata: z.nullable(z.string()).optional(),
  organizationId: z.nullable(z.string()).optional(),
  attributeMapping: z.nullable(z.lazy(() => AttributeMapping$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    idpEntityId: "idp_entity_id",
    idpSsoUrl: "idp_sso_url",
    idpCertificate: "idp_certificate",
    idpMetadataUrl: "idp_metadata_url",
    idpMetadata: "idp_metadata",
    organizationId: "organization_id",
    attributeMapping: "attribute_mapping",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSAMLConnectionRequestBody$ {
  /** @deprecated use `CreateSAMLConnectionRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateSAMLConnectionRequestBody$inboundSchema;
  /** @deprecated use `CreateSAMLConnectionRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateSAMLConnectionRequestBody$outboundSchema;
  /** @deprecated use `CreateSAMLConnectionRequestBody$Outbound` instead. */
  export type Outbound = CreateSAMLConnectionRequestBody$Outbound;
}

export function createSAMLConnectionRequestBodyToJSON(
  createSAMLConnectionRequestBody: CreateSAMLConnectionRequestBody,
): string {
  return JSON.stringify(
    CreateSAMLConnectionRequestBody$outboundSchema.parse(
      createSAMLConnectionRequestBody,
    ),
  );
}

export function createSAMLConnectionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateSAMLConnectionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSAMLConnectionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSAMLConnectionRequestBody' from JSON`,
  );
}
