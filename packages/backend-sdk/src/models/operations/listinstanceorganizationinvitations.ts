/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter organization invitations based on their status
 */
export const ListInstanceOrganizationInvitationsQueryParamStatus = {
  Pending: "pending",
  Accepted: "accepted",
  Revoked: "revoked",
} as const;
/**
 * Filter organization invitations based on their status
 */
export type ListInstanceOrganizationInvitationsQueryParamStatus = ClosedEnum<
  typeof ListInstanceOrganizationInvitationsQueryParamStatus
>;

export type ListInstanceOrganizationInvitationsRequest = {
  /**
   * Allows to return organization invitations in a particular order.
   *
   * @remarks
   * At the moment, you can order the returned organization invitations either by their `created_at` or `email_address`.
   * In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.
   * For example, if you want organization invitations to be returned in descending order according to their `created_at` property, you can use `-created_at`.
   * If you don't use `+` or `-`, then `+` is implied.
   * Defaults to `-created_at`.
   */
  orderBy?: string | undefined;
  /**
   * Filter organization invitations based on their status
   */
  status?: ListInstanceOrganizationInvitationsQueryParamStatus | undefined;
  /**
   * Filter organization invitations based on their `email_address`
   */
  query?: string | undefined;
  /**
   * Applies a limit to the number of results returned.
   *
   * @remarks
   * Can be used for paginating the results together with `offset`.
   */
  limit?: number | undefined;
  /**
   * Skip the first `offset` results when paginating.
   *
   * @remarks
   * Needs to be an integer greater or equal to zero.
   * To be used in conjunction with `limit`.
   */
  offset?: number | undefined;
};

/** @internal */
export const ListInstanceOrganizationInvitationsQueryParamStatus$inboundSchema:
  z.ZodNativeEnum<typeof ListInstanceOrganizationInvitationsQueryParamStatus> =
    z.nativeEnum(ListInstanceOrganizationInvitationsQueryParamStatus);

/** @internal */
export const ListInstanceOrganizationInvitationsQueryParamStatus$outboundSchema:
  z.ZodNativeEnum<typeof ListInstanceOrganizationInvitationsQueryParamStatus> =
    ListInstanceOrganizationInvitationsQueryParamStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstanceOrganizationInvitationsQueryParamStatus$ {
  /** @deprecated use `ListInstanceOrganizationInvitationsQueryParamStatus$inboundSchema` instead. */
  export const inboundSchema =
    ListInstanceOrganizationInvitationsQueryParamStatus$inboundSchema;
  /** @deprecated use `ListInstanceOrganizationInvitationsQueryParamStatus$outboundSchema` instead. */
  export const outboundSchema =
    ListInstanceOrganizationInvitationsQueryParamStatus$outboundSchema;
}

/** @internal */
export const ListInstanceOrganizationInvitationsRequest$inboundSchema:
  z.ZodType<ListInstanceOrganizationInvitationsRequest, z.ZodTypeDef, unknown> =
    z.object({
      order_by: z.string().default("-created_at"),
      status: ListInstanceOrganizationInvitationsQueryParamStatus$inboundSchema
        .optional(),
      query: z.string().optional(),
      limit: z.number().int().default(10),
      offset: z.number().int().default(0),
    }).transform((v) => {
      return remap$(v, {
        "order_by": "orderBy",
      });
    });

/** @internal */
export type ListInstanceOrganizationInvitationsRequest$Outbound = {
  order_by: string;
  status?: string | undefined;
  query?: string | undefined;
  limit: number;
  offset: number;
};

/** @internal */
export const ListInstanceOrganizationInvitationsRequest$outboundSchema:
  z.ZodType<
    ListInstanceOrganizationInvitationsRequest$Outbound,
    z.ZodTypeDef,
    ListInstanceOrganizationInvitationsRequest
  > = z.object({
    orderBy: z.string().default("-created_at"),
    status: ListInstanceOrganizationInvitationsQueryParamStatus$outboundSchema
      .optional(),
    query: z.string().optional(),
    limit: z.number().int().default(10),
    offset: z.number().int().default(0),
  }).transform((v) => {
    return remap$(v, {
      orderBy: "order_by",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstanceOrganizationInvitationsRequest$ {
  /** @deprecated use `ListInstanceOrganizationInvitationsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListInstanceOrganizationInvitationsRequest$inboundSchema;
  /** @deprecated use `ListInstanceOrganizationInvitationsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListInstanceOrganizationInvitationsRequest$outboundSchema;
  /** @deprecated use `ListInstanceOrganizationInvitationsRequest$Outbound` instead. */
  export type Outbound = ListInstanceOrganizationInvitationsRequest$Outbound;
}

export function listInstanceOrganizationInvitationsRequestToJSON(
  listInstanceOrganizationInvitationsRequest:
    ListInstanceOrganizationInvitationsRequest,
): string {
  return JSON.stringify(
    ListInstanceOrganizationInvitationsRequest$outboundSchema.parse(
      listInstanceOrganizationInvitationsRequest,
    ),
  );
}

export function listInstanceOrganizationInvitationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ListInstanceOrganizationInvitationsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListInstanceOrganizationInvitationsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListInstanceOrganizationInvitationsRequest' from JSON`,
  );
}
