/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type RevokeOrganizationInvitationRequestBody = {
  /**
   * The ID of the user that revokes the invitation.
   *
   * @remarks
   * Must be an administrator in the organization.
   */
  requestingUserId?: string | null | undefined;
};

export type RevokeOrganizationInvitationRequest = {
  /**
   * The organization ID.
   */
  organizationId: string;
  /**
   * The organization invitation ID.
   */
  invitationId: string;
  requestBody?: RevokeOrganizationInvitationRequestBody | undefined;
};

/** @internal */
export const RevokeOrganizationInvitationRequestBody$inboundSchema: z.ZodType<
  RevokeOrganizationInvitationRequestBody,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    requesting_user_id: z.nullable(z.string()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      requesting_user_id: 'requestingUserId',
    });
  });

/** @internal */
export type RevokeOrganizationInvitationRequestBody$Outbound = {
  requesting_user_id?: string | null | undefined;
};

/** @internal */
export const RevokeOrganizationInvitationRequestBody$outboundSchema: z.ZodType<
  RevokeOrganizationInvitationRequestBody$Outbound,
  z.ZodTypeDef,
  RevokeOrganizationInvitationRequestBody
> = z
  .object({
    requestingUserId: z.nullable(z.string()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      requestingUserId: 'requesting_user_id',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RevokeOrganizationInvitationRequestBody$ {
  /** @deprecated use `RevokeOrganizationInvitationRequestBody$inboundSchema` instead. */
  export const inboundSchema = RevokeOrganizationInvitationRequestBody$inboundSchema;
  /** @deprecated use `RevokeOrganizationInvitationRequestBody$outboundSchema` instead. */
  export const outboundSchema = RevokeOrganizationInvitationRequestBody$outboundSchema;
  /** @deprecated use `RevokeOrganizationInvitationRequestBody$Outbound` instead. */
  export type Outbound = RevokeOrganizationInvitationRequestBody$Outbound;
}

export function revokeOrganizationInvitationRequestBodyToJSON(
  revokeOrganizationInvitationRequestBody: RevokeOrganizationInvitationRequestBody,
): string {
  return JSON.stringify(
    RevokeOrganizationInvitationRequestBody$outboundSchema.parse(revokeOrganizationInvitationRequestBody),
  );
}

export function revokeOrganizationInvitationRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RevokeOrganizationInvitationRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    x => RevokeOrganizationInvitationRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RevokeOrganizationInvitationRequestBody' from JSON`,
  );
}

/** @internal */
export const RevokeOrganizationInvitationRequest$inboundSchema: z.ZodType<
  RevokeOrganizationInvitationRequest,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    organization_id: z.string(),
    invitation_id: z.string(),
    RequestBody: z.lazy(() => RevokeOrganizationInvitationRequestBody$inboundSchema).optional(),
  })
  .transform(v => {
    return remap$(v, {
      organization_id: 'organizationId',
      invitation_id: 'invitationId',
      RequestBody: 'requestBody',
    });
  });

/** @internal */
export type RevokeOrganizationInvitationRequest$Outbound = {
  organization_id: string;
  invitation_id: string;
  RequestBody?: RevokeOrganizationInvitationRequestBody$Outbound | undefined;
};

/** @internal */
export const RevokeOrganizationInvitationRequest$outboundSchema: z.ZodType<
  RevokeOrganizationInvitationRequest$Outbound,
  z.ZodTypeDef,
  RevokeOrganizationInvitationRequest
> = z
  .object({
    organizationId: z.string(),
    invitationId: z.string(),
    requestBody: z.lazy(() => RevokeOrganizationInvitationRequestBody$outboundSchema).optional(),
  })
  .transform(v => {
    return remap$(v, {
      organizationId: 'organization_id',
      invitationId: 'invitation_id',
      requestBody: 'RequestBody',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RevokeOrganizationInvitationRequest$ {
  /** @deprecated use `RevokeOrganizationInvitationRequest$inboundSchema` instead. */
  export const inboundSchema = RevokeOrganizationInvitationRequest$inboundSchema;
  /** @deprecated use `RevokeOrganizationInvitationRequest$outboundSchema` instead. */
  export const outboundSchema = RevokeOrganizationInvitationRequest$outboundSchema;
  /** @deprecated use `RevokeOrganizationInvitationRequest$Outbound` instead. */
  export type Outbound = RevokeOrganizationInvitationRequest$Outbound;
}

export function revokeOrganizationInvitationRequestToJSON(
  revokeOrganizationInvitationRequest: RevokeOrganizationInvitationRequest,
): string {
  return JSON.stringify(RevokeOrganizationInvitationRequest$outboundSchema.parse(revokeOrganizationInvitationRequest));
}

export function revokeOrganizationInvitationRequestFromJSON(
  jsonString: string,
): SafeParseResult<RevokeOrganizationInvitationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => RevokeOrganizationInvitationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RevokeOrganizationInvitationRequest' from JSON`,
  );
}
