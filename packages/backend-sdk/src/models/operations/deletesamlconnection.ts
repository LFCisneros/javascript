/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteSAMLConnectionRequest = {
  /**
   * The ID of the SAML Connection to delete
   */
  samlConnectionId: string;
};

/** @internal */
export const DeleteSAMLConnectionRequest$inboundSchema: z.ZodType<
  DeleteSAMLConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  saml_connection_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "saml_connection_id": "samlConnectionId",
  });
});

/** @internal */
export type DeleteSAMLConnectionRequest$Outbound = {
  saml_connection_id: string;
};

/** @internal */
export const DeleteSAMLConnectionRequest$outboundSchema: z.ZodType<
  DeleteSAMLConnectionRequest$Outbound,
  z.ZodTypeDef,
  DeleteSAMLConnectionRequest
> = z.object({
  samlConnectionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    samlConnectionId: "saml_connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSAMLConnectionRequest$ {
  /** @deprecated use `DeleteSAMLConnectionRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteSAMLConnectionRequest$inboundSchema;
  /** @deprecated use `DeleteSAMLConnectionRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteSAMLConnectionRequest$outboundSchema;
  /** @deprecated use `DeleteSAMLConnectionRequest$Outbound` instead. */
  export type Outbound = DeleteSAMLConnectionRequest$Outbound;
}

export function deleteSAMLConnectionRequestToJSON(
  deleteSAMLConnectionRequest: DeleteSAMLConnectionRequest,
): string {
  return JSON.stringify(
    DeleteSAMLConnectionRequest$outboundSchema.parse(
      deleteSAMLConnectionRequest,
    ),
  );
}

export function deleteSAMLConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSAMLConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteSAMLConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSAMLConnectionRequest' from JSON`,
  );
}
