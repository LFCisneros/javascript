/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreatePhoneNumberRequestBody = {
  /**
   * The ID representing the user
   */
  userId: string;
  /**
   * The new phone number. Must adhere to the E.164 standard for phone number format.
   */
  phoneNumber: string;
  /**
   * When created, the phone number will be marked as verified.
   */
  verified?: boolean | null | undefined;
  /**
   * Create this phone number as the primary phone number for the user. Default: false, unless it is the first phone number.
   */
  primary?: boolean | null | undefined;
  /**
   * Create this phone number as reserved for multi-factor authentication. The phone number must also be verified.
   *
   * @remarks
   * If there are no other reserved second factors, the phone number will be set as the default second factor.
   */
  reservedForSecondFactor?: boolean | null | undefined;
};

/** @internal */
export const CreatePhoneNumberRequestBody$inboundSchema: z.ZodType<
  CreatePhoneNumberRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string(),
  phone_number: z.string(),
  verified: z.nullable(z.boolean()).optional(),
  primary: z.nullable(z.boolean()).optional(),
  reserved_for_second_factor: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "phone_number": "phoneNumber",
    "reserved_for_second_factor": "reservedForSecondFactor",
  });
});

/** @internal */
export type CreatePhoneNumberRequestBody$Outbound = {
  user_id: string;
  phone_number: string;
  verified?: boolean | null | undefined;
  primary?: boolean | null | undefined;
  reserved_for_second_factor?: boolean | null | undefined;
};

/** @internal */
export const CreatePhoneNumberRequestBody$outboundSchema: z.ZodType<
  CreatePhoneNumberRequestBody$Outbound,
  z.ZodTypeDef,
  CreatePhoneNumberRequestBody
> = z.object({
  userId: z.string(),
  phoneNumber: z.string(),
  verified: z.nullable(z.boolean()).optional(),
  primary: z.nullable(z.boolean()).optional(),
  reservedForSecondFactor: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    phoneNumber: "phone_number",
    reservedForSecondFactor: "reserved_for_second_factor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePhoneNumberRequestBody$ {
  /** @deprecated use `CreatePhoneNumberRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreatePhoneNumberRequestBody$inboundSchema;
  /** @deprecated use `CreatePhoneNumberRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreatePhoneNumberRequestBody$outboundSchema;
  /** @deprecated use `CreatePhoneNumberRequestBody$Outbound` instead. */
  export type Outbound = CreatePhoneNumberRequestBody$Outbound;
}

export function createPhoneNumberRequestBodyToJSON(
  createPhoneNumberRequestBody: CreatePhoneNumberRequestBody,
): string {
  return JSON.stringify(
    CreatePhoneNumberRequestBody$outboundSchema.parse(
      createPhoneNumberRequestBody,
    ),
  );
}

export function createPhoneNumberRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreatePhoneNumberRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePhoneNumberRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePhoneNumberRequestBody' from JSON`,
  );
}
