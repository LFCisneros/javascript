/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

/**
 * Filter organization invitations based on their status
 */
export const QueryParamStatus = {
  Pending: 'pending',
  Accepted: 'accepted',
  Revoked: 'revoked',
} as const;
/**
 * Filter organization invitations based on their status
 */
export type QueryParamStatus = ClosedEnum<typeof QueryParamStatus>;

export type UsersGetOrganizationInvitationsRequest = {
  /**
   * The ID of the user whose organization invitations we want to retrieve
   */
  userId: string;
  /**
   * Applies a limit to the number of results returned.
   *
   * @remarks
   * Can be used for paginating the results together with `offset`.
   */
  limit?: number | undefined;
  /**
   * Skip the first `offset` results when paginating.
   *
   * @remarks
   * Needs to be an integer greater or equal to zero.
   * To be used in conjunction with `limit`.
   */
  offset?: number | undefined;
  /**
   * Filter organization invitations based on their status
   */
  status?: QueryParamStatus | undefined;
};

/** @internal */
export const QueryParamStatus$inboundSchema: z.ZodNativeEnum<typeof QueryParamStatus> = z.nativeEnum(QueryParamStatus);

/** @internal */
export const QueryParamStatus$outboundSchema: z.ZodNativeEnum<typeof QueryParamStatus> = QueryParamStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamStatus$ {
  /** @deprecated use `QueryParamStatus$inboundSchema` instead. */
  export const inboundSchema = QueryParamStatus$inboundSchema;
  /** @deprecated use `QueryParamStatus$outboundSchema` instead. */
  export const outboundSchema = QueryParamStatus$outboundSchema;
}

/** @internal */
export const UsersGetOrganizationInvitationsRequest$inboundSchema: z.ZodType<
  UsersGetOrganizationInvitationsRequest,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    user_id: z.string(),
    limit: z.number().int().default(10),
    offset: z.number().int().default(0),
    status: QueryParamStatus$inboundSchema.optional(),
  })
  .transform(v => {
    return remap$(v, {
      user_id: 'userId',
    });
  });

/** @internal */
export type UsersGetOrganizationInvitationsRequest$Outbound = {
  user_id: string;
  limit: number;
  offset: number;
  status?: string | undefined;
};

/** @internal */
export const UsersGetOrganizationInvitationsRequest$outboundSchema: z.ZodType<
  UsersGetOrganizationInvitationsRequest$Outbound,
  z.ZodTypeDef,
  UsersGetOrganizationInvitationsRequest
> = z
  .object({
    userId: z.string(),
    limit: z.number().int().default(10),
    offset: z.number().int().default(0),
    status: QueryParamStatus$outboundSchema.optional(),
  })
  .transform(v => {
    return remap$(v, {
      userId: 'user_id',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersGetOrganizationInvitationsRequest$ {
  /** @deprecated use `UsersGetOrganizationInvitationsRequest$inboundSchema` instead. */
  export const inboundSchema = UsersGetOrganizationInvitationsRequest$inboundSchema;
  /** @deprecated use `UsersGetOrganizationInvitationsRequest$outboundSchema` instead. */
  export const outboundSchema = UsersGetOrganizationInvitationsRequest$outboundSchema;
  /** @deprecated use `UsersGetOrganizationInvitationsRequest$Outbound` instead. */
  export type Outbound = UsersGetOrganizationInvitationsRequest$Outbound;
}

export function usersGetOrganizationInvitationsRequestToJSON(
  usersGetOrganizationInvitationsRequest: UsersGetOrganizationInvitationsRequest,
): string {
  return JSON.stringify(
    UsersGetOrganizationInvitationsRequest$outboundSchema.parse(usersGetOrganizationInvitationsRequest),
  );
}

export function usersGetOrganizationInvitationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UsersGetOrganizationInvitationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    x => UsersGetOrganizationInvitationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersGetOrganizationInvitationsRequest' from JSON`,
  );
}
