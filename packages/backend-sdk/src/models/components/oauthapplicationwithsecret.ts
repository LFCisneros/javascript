/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export const OAuthApplicationWithSecretObject = {
  OauthApplication: 'oauth_application',
} as const;
export type OAuthApplicationWithSecretObject = ClosedEnum<typeof OAuthApplicationWithSecretObject>;

export type OAuthApplicationWithSecret = {
  object: OAuthApplicationWithSecretObject;
  id: string;
  instanceId: string;
  name: string;
  clientId: string;
  public: boolean;
  scopes: string;
  redirectUris: Array<string>;
  /**
   * Deprecated: Use redirect_uris instead.
   *
   * @remarks
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  callbackUrl: string;
  authorizeUrl: string;
  tokenFetchUrl: string;
  userInfoUrl: string;
  discoveryUrl: string;
  tokenIntrospectionUrl: string;
  /**
   * Unix timestamp of creation.
   *
   * @remarks
   */
  createdAt: number;
  /**
   * Unix timestamp of last update.
   *
   * @remarks
   */
  updatedAt: number;
  /**
   * Empty if public client.
   *
   * @remarks
   */
  clientSecret?: string | undefined;
};

/** @internal */
export const OAuthApplicationWithSecretObject$inboundSchema: z.ZodNativeEnum<typeof OAuthApplicationWithSecretObject> =
  z.nativeEnum(OAuthApplicationWithSecretObject);

/** @internal */
export const OAuthApplicationWithSecretObject$outboundSchema: z.ZodNativeEnum<typeof OAuthApplicationWithSecretObject> =
  OAuthApplicationWithSecretObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OAuthApplicationWithSecretObject$ {
  /** @deprecated use `OAuthApplicationWithSecretObject$inboundSchema` instead. */
  export const inboundSchema = OAuthApplicationWithSecretObject$inboundSchema;
  /** @deprecated use `OAuthApplicationWithSecretObject$outboundSchema` instead. */
  export const outboundSchema = OAuthApplicationWithSecretObject$outboundSchema;
}

/** @internal */
export const OAuthApplicationWithSecret$inboundSchema: z.ZodType<OAuthApplicationWithSecret, z.ZodTypeDef, unknown> = z
  .object({
    object: OAuthApplicationWithSecretObject$inboundSchema,
    id: z.string(),
    instance_id: z.string(),
    name: z.string(),
    client_id: z.string(),
    public: z.boolean(),
    scopes: z.string(),
    redirect_uris: z.array(z.string()),
    callback_url: z.string(),
    authorize_url: z.string(),
    token_fetch_url: z.string(),
    user_info_url: z.string(),
    discovery_url: z.string(),
    token_introspection_url: z.string(),
    created_at: z.number().int(),
    updated_at: z.number().int(),
    client_secret: z.string().optional(),
  })
  .transform(v => {
    return remap$(v, {
      instance_id: 'instanceId',
      client_id: 'clientId',
      redirect_uris: 'redirectUris',
      callback_url: 'callbackUrl',
      authorize_url: 'authorizeUrl',
      token_fetch_url: 'tokenFetchUrl',
      user_info_url: 'userInfoUrl',
      discovery_url: 'discoveryUrl',
      token_introspection_url: 'tokenIntrospectionUrl',
      created_at: 'createdAt',
      updated_at: 'updatedAt',
      client_secret: 'clientSecret',
    });
  });

/** @internal */
export type OAuthApplicationWithSecret$Outbound = {
  object: string;
  id: string;
  instance_id: string;
  name: string;
  client_id: string;
  public: boolean;
  scopes: string;
  redirect_uris: Array<string>;
  callback_url: string;
  authorize_url: string;
  token_fetch_url: string;
  user_info_url: string;
  discovery_url: string;
  token_introspection_url: string;
  created_at: number;
  updated_at: number;
  client_secret?: string | undefined;
};

/** @internal */
export const OAuthApplicationWithSecret$outboundSchema: z.ZodType<
  OAuthApplicationWithSecret$Outbound,
  z.ZodTypeDef,
  OAuthApplicationWithSecret
> = z
  .object({
    object: OAuthApplicationWithSecretObject$outboundSchema,
    id: z.string(),
    instanceId: z.string(),
    name: z.string(),
    clientId: z.string(),
    public: z.boolean(),
    scopes: z.string(),
    redirectUris: z.array(z.string()),
    callbackUrl: z.string(),
    authorizeUrl: z.string(),
    tokenFetchUrl: z.string(),
    userInfoUrl: z.string(),
    discoveryUrl: z.string(),
    tokenIntrospectionUrl: z.string(),
    createdAt: z.number().int(),
    updatedAt: z.number().int(),
    clientSecret: z.string().optional(),
  })
  .transform(v => {
    return remap$(v, {
      instanceId: 'instance_id',
      clientId: 'client_id',
      redirectUris: 'redirect_uris',
      callbackUrl: 'callback_url',
      authorizeUrl: 'authorize_url',
      tokenFetchUrl: 'token_fetch_url',
      userInfoUrl: 'user_info_url',
      discoveryUrl: 'discovery_url',
      tokenIntrospectionUrl: 'token_introspection_url',
      createdAt: 'created_at',
      updatedAt: 'updated_at',
      clientSecret: 'client_secret',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OAuthApplicationWithSecret$ {
  /** @deprecated use `OAuthApplicationWithSecret$inboundSchema` instead. */
  export const inboundSchema = OAuthApplicationWithSecret$inboundSchema;
  /** @deprecated use `OAuthApplicationWithSecret$outboundSchema` instead. */
  export const outboundSchema = OAuthApplicationWithSecret$outboundSchema;
  /** @deprecated use `OAuthApplicationWithSecret$Outbound` instead. */
  export type Outbound = OAuthApplicationWithSecret$Outbound;
}

export function oAuthApplicationWithSecretToJSON(oAuthApplicationWithSecret: OAuthApplicationWithSecret): string {
  return JSON.stringify(OAuthApplicationWithSecret$outboundSchema.parse(oAuthApplicationWithSecret));
}

export function oAuthApplicationWithSecretFromJSON(
  jsonString: string,
): SafeParseResult<OAuthApplicationWithSecret, SDKValidationError> {
  return safeParse(
    jsonString,
    x => OAuthApplicationWithSecret$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OAuthApplicationWithSecret' from JSON`,
  );
}
