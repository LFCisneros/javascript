/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const SignInTokenObject = {
  SignInToken: "sign_in_token",
} as const;
export type SignInTokenObject = ClosedEnum<typeof SignInTokenObject>;

export const SignInTokenStatus = {
  Pending: "pending",
  Accepted: "accepted",
  Revoked: "revoked",
} as const;
export type SignInTokenStatus = ClosedEnum<typeof SignInTokenStatus>;

/**
 * Success
 */
export type SignInToken = {
  object: SignInTokenObject;
  id: string;
  status: SignInTokenStatus;
  userId: string;
  token?: string | undefined;
  url?: string | null | undefined;
  /**
   * Unix timestamp of creation.
   *
   * @remarks
   */
  createdAt: number;
  /**
   * Unix timestamp of last update.
   *
   * @remarks
   */
  updatedAt: number;
};

/** @internal */
export const SignInTokenObject$inboundSchema: z.ZodNativeEnum<
  typeof SignInTokenObject
> = z.nativeEnum(SignInTokenObject);

/** @internal */
export const SignInTokenObject$outboundSchema: z.ZodNativeEnum<
  typeof SignInTokenObject
> = SignInTokenObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignInTokenObject$ {
  /** @deprecated use `SignInTokenObject$inboundSchema` instead. */
  export const inboundSchema = SignInTokenObject$inboundSchema;
  /** @deprecated use `SignInTokenObject$outboundSchema` instead. */
  export const outboundSchema = SignInTokenObject$outboundSchema;
}

/** @internal */
export const SignInTokenStatus$inboundSchema: z.ZodNativeEnum<
  typeof SignInTokenStatus
> = z.nativeEnum(SignInTokenStatus);

/** @internal */
export const SignInTokenStatus$outboundSchema: z.ZodNativeEnum<
  typeof SignInTokenStatus
> = SignInTokenStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignInTokenStatus$ {
  /** @deprecated use `SignInTokenStatus$inboundSchema` instead. */
  export const inboundSchema = SignInTokenStatus$inboundSchema;
  /** @deprecated use `SignInTokenStatus$outboundSchema` instead. */
  export const outboundSchema = SignInTokenStatus$outboundSchema;
}

/** @internal */
export const SignInToken$inboundSchema: z.ZodType<
  SignInToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: SignInTokenObject$inboundSchema,
  id: z.string(),
  status: SignInTokenStatus$inboundSchema,
  user_id: z.string(),
  token: z.string().optional(),
  url: z.nullable(z.string()).optional(),
  created_at: z.number().int(),
  updated_at: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type SignInToken$Outbound = {
  object: string;
  id: string;
  status: string;
  user_id: string;
  token?: string | undefined;
  url?: string | null | undefined;
  created_at: number;
  updated_at: number;
};

/** @internal */
export const SignInToken$outboundSchema: z.ZodType<
  SignInToken$Outbound,
  z.ZodTypeDef,
  SignInToken
> = z.object({
  object: SignInTokenObject$outboundSchema,
  id: z.string(),
  status: SignInTokenStatus$outboundSchema,
  userId: z.string(),
  token: z.string().optional(),
  url: z.nullable(z.string()).optional(),
  createdAt: z.number().int(),
  updatedAt: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignInToken$ {
  /** @deprecated use `SignInToken$inboundSchema` instead. */
  export const inboundSchema = SignInToken$inboundSchema;
  /** @deprecated use `SignInToken$outboundSchema` instead. */
  export const outboundSchema = SignInToken$outboundSchema;
  /** @deprecated use `SignInToken$Outbound` instead. */
  export type Outbound = SignInToken$Outbound;
}

export function signInTokenToJSON(signInToken: SignInToken): string {
  return JSON.stringify(SignInToken$outboundSchema.parse(signInToken));
}

export function signInTokenFromJSON(
  jsonString: string,
): SafeParseResult<SignInToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SignInToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignInToken' from JSON`,
  );
}
