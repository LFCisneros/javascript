/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

/**
 * String representing the object's type. Objects of the same type share the same value.
 */
export const InstanceSettingsObject = {
  InstanceSettings: 'instance_settings',
} as const;
/**
 * String representing the object's type. Objects of the same type share the same value.
 */
export type InstanceSettingsObject = ClosedEnum<typeof InstanceSettingsObject>;

/**
 * InstanceSettings Server API
 */
export type InstanceSettings = {
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object?: InstanceSettingsObject | undefined;
  id?: string | undefined;
  restrictedToAllowlist?: boolean | undefined;
  fromEmailAddress?: string | undefined;
  progressiveSignUp?: boolean | undefined;
  enhancedEmailDeliverability?: boolean | undefined;
};

/** @internal */
export const InstanceSettingsObject$inboundSchema: z.ZodNativeEnum<typeof InstanceSettingsObject> =
  z.nativeEnum(InstanceSettingsObject);

/** @internal */
export const InstanceSettingsObject$outboundSchema: z.ZodNativeEnum<typeof InstanceSettingsObject> =
  InstanceSettingsObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstanceSettingsObject$ {
  /** @deprecated use `InstanceSettingsObject$inboundSchema` instead. */
  export const inboundSchema = InstanceSettingsObject$inboundSchema;
  /** @deprecated use `InstanceSettingsObject$outboundSchema` instead. */
  export const outboundSchema = InstanceSettingsObject$outboundSchema;
}

/** @internal */
export const InstanceSettings$inboundSchema: z.ZodType<InstanceSettings, z.ZodTypeDef, unknown> = z
  .object({
    object: InstanceSettingsObject$inboundSchema.optional(),
    id: z.string().optional(),
    restricted_to_allowlist: z.boolean().optional(),
    from_email_address: z.string().optional(),
    progressive_sign_up: z.boolean().optional(),
    enhanced_email_deliverability: z.boolean().optional(),
  })
  .transform(v => {
    return remap$(v, {
      restricted_to_allowlist: 'restrictedToAllowlist',
      from_email_address: 'fromEmailAddress',
      progressive_sign_up: 'progressiveSignUp',
      enhanced_email_deliverability: 'enhancedEmailDeliverability',
    });
  });

/** @internal */
export type InstanceSettings$Outbound = {
  object?: string | undefined;
  id?: string | undefined;
  restricted_to_allowlist?: boolean | undefined;
  from_email_address?: string | undefined;
  progressive_sign_up?: boolean | undefined;
  enhanced_email_deliverability?: boolean | undefined;
};

/** @internal */
export const InstanceSettings$outboundSchema: z.ZodType<InstanceSettings$Outbound, z.ZodTypeDef, InstanceSettings> = z
  .object({
    object: InstanceSettingsObject$outboundSchema.optional(),
    id: z.string().optional(),
    restrictedToAllowlist: z.boolean().optional(),
    fromEmailAddress: z.string().optional(),
    progressiveSignUp: z.boolean().optional(),
    enhancedEmailDeliverability: z.boolean().optional(),
  })
  .transform(v => {
    return remap$(v, {
      restrictedToAllowlist: 'restricted_to_allowlist',
      fromEmailAddress: 'from_email_address',
      progressiveSignUp: 'progressive_sign_up',
      enhancedEmailDeliverability: 'enhanced_email_deliverability',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstanceSettings$ {
  /** @deprecated use `InstanceSettings$inboundSchema` instead. */
  export const inboundSchema = InstanceSettings$inboundSchema;
  /** @deprecated use `InstanceSettings$outboundSchema` instead. */
  export const outboundSchema = InstanceSettings$outboundSchema;
  /** @deprecated use `InstanceSettings$Outbound` instead. */
  export type Outbound = InstanceSettings$Outbound;
}

export function instanceSettingsToJSON(instanceSettings: InstanceSettings): string {
  return JSON.stringify(InstanceSettings$outboundSchema.parse(instanceSettings));
}

export function instanceSettingsFromJSON(jsonString: string): SafeParseResult<InstanceSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    x => InstanceSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstanceSettings' from JSON`,
  );
}
