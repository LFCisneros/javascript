/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const NextAction = {
  NeedsPrepare: "needs_prepare",
  NeedsAttempt: "needs_attempt",
  Unknown: "",
} as const;
export type NextAction = ClosedEnum<typeof NextAction>;

export type SignUpVerification = {
  nextAction?: NextAction | undefined;
  supportedStrategies?: Array<string> | undefined;
  additionalProperties?: { [k: string]: any };
};

/** @internal */
export const NextAction$inboundSchema: z.ZodNativeEnum<typeof NextAction> = z
  .nativeEnum(NextAction);

/** @internal */
export const NextAction$outboundSchema: z.ZodNativeEnum<typeof NextAction> =
  NextAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NextAction$ {
  /** @deprecated use `NextAction$inboundSchema` instead. */
  export const inboundSchema = NextAction$inboundSchema;
  /** @deprecated use `NextAction$outboundSchema` instead. */
  export const outboundSchema = NextAction$outboundSchema;
}

/** @internal */
export const SignUpVerification$inboundSchema: z.ZodType<
  SignUpVerification,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    next_action: NextAction$inboundSchema.optional(),
    supported_strategies: z.array(z.string()).optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "next_action": "nextAction",
    "supported_strategies": "supportedStrategies",
  });
});

/** @internal */
export type SignUpVerification$Outbound = {
  next_action?: string | undefined;
  supported_strategies?: Array<string> | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const SignUpVerification$outboundSchema: z.ZodType<
  SignUpVerification$Outbound,
  z.ZodTypeDef,
  SignUpVerification
> = z.object({
  nextAction: NextAction$outboundSchema.optional(),
  supportedStrategies: z.array(z.string()).optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      nextAction: "next_action",
      supportedStrategies: "supported_strategies",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignUpVerification$ {
  /** @deprecated use `SignUpVerification$inboundSchema` instead. */
  export const inboundSchema = SignUpVerification$inboundSchema;
  /** @deprecated use `SignUpVerification$outboundSchema` instead. */
  export const outboundSchema = SignUpVerification$outboundSchema;
  /** @deprecated use `SignUpVerification$Outbound` instead. */
  export type Outbound = SignUpVerification$Outbound;
}

export function signUpVerificationToJSON(
  signUpVerification: SignUpVerification,
): string {
  return JSON.stringify(
    SignUpVerification$outboundSchema.parse(signUpVerification),
  );
}

export function signUpVerificationFromJSON(
  jsonString: string,
): SafeParseResult<SignUpVerification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SignUpVerification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignUpVerification' from JSON`,
  );
}
