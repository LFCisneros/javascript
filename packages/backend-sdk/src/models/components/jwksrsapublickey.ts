/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export const JWKSRsaPublicKeyKty = {
  Rsa: 'RSA',
} as const;
export type JWKSRsaPublicKeyKty = ClosedEnum<typeof JWKSRsaPublicKeyKty>;

export type JWKSRsaPublicKey = {
  kid: string;
  alg: string;
  use: string;
  kty: JWKSRsaPublicKeyKty;
  n: string;
  e: string;
  x5c?: Array<string> | undefined;
  x5t?: string | undefined;
  x5tNumberS256?: string | undefined;
  x5u?: string | undefined;
};

/** @internal */
export const JWKSRsaPublicKeyKty$inboundSchema: z.ZodNativeEnum<typeof JWKSRsaPublicKeyKty> =
  z.nativeEnum(JWKSRsaPublicKeyKty);

/** @internal */
export const JWKSRsaPublicKeyKty$outboundSchema: z.ZodNativeEnum<typeof JWKSRsaPublicKeyKty> =
  JWKSRsaPublicKeyKty$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JWKSRsaPublicKeyKty$ {
  /** @deprecated use `JWKSRsaPublicKeyKty$inboundSchema` instead. */
  export const inboundSchema = JWKSRsaPublicKeyKty$inboundSchema;
  /** @deprecated use `JWKSRsaPublicKeyKty$outboundSchema` instead. */
  export const outboundSchema = JWKSRsaPublicKeyKty$outboundSchema;
}

/** @internal */
export const JWKSRsaPublicKey$inboundSchema: z.ZodType<JWKSRsaPublicKey, z.ZodTypeDef, unknown> = z
  .object({
    kid: z.string(),
    alg: z.string(),
    use: z.string(),
    kty: JWKSRsaPublicKeyKty$inboundSchema,
    n: z.string(),
    e: z.string(),
    x5c: z.array(z.string()).optional(),
    x5t: z.string().optional(),
    'x5t#S256': z.string().optional(),
    x5u: z.string().optional(),
  })
  .transform(v => {
    return remap$(v, {
      'x5t#S256': 'x5tNumberS256',
    });
  });

/** @internal */
export type JWKSRsaPublicKey$Outbound = {
  kid: string;
  alg: string;
  use: string;
  kty: string;
  n: string;
  e: string;
  x5c?: Array<string> | undefined;
  x5t?: string | undefined;
  'x5t#S256'?: string | undefined;
  x5u?: string | undefined;
};

/** @internal */
export const JWKSRsaPublicKey$outboundSchema: z.ZodType<JWKSRsaPublicKey$Outbound, z.ZodTypeDef, JWKSRsaPublicKey> = z
  .object({
    kid: z.string(),
    alg: z.string(),
    use: z.string(),
    kty: JWKSRsaPublicKeyKty$outboundSchema,
    n: z.string(),
    e: z.string(),
    x5c: z.array(z.string()).optional(),
    x5t: z.string().optional(),
    x5tNumberS256: z.string().optional(),
    x5u: z.string().optional(),
  })
  .transform(v => {
    return remap$(v, {
      x5tNumberS256: 'x5t#S256',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JWKSRsaPublicKey$ {
  /** @deprecated use `JWKSRsaPublicKey$inboundSchema` instead. */
  export const inboundSchema = JWKSRsaPublicKey$inboundSchema;
  /** @deprecated use `JWKSRsaPublicKey$outboundSchema` instead. */
  export const outboundSchema = JWKSRsaPublicKey$outboundSchema;
  /** @deprecated use `JWKSRsaPublicKey$Outbound` instead. */
  export type Outbound = JWKSRsaPublicKey$Outbound;
}

export function jwksRsaPublicKeyToJSON(jwksRsaPublicKey: JWKSRsaPublicKey): string {
  return JSON.stringify(JWKSRsaPublicKey$outboundSchema.parse(jwksRsaPublicKey));
}

export function jwksRsaPublicKeyFromJSON(jsonString: string): SafeParseResult<JWKSRsaPublicKey, SDKValidationError> {
  return safeParse(
    jsonString,
    x => JWKSRsaPublicKey$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JWKSRsaPublicKey' from JSON`,
  );
}
