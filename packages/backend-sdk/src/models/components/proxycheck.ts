/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export const ProxyCheckObject = {
  ProxyCheck: 'proxy_check',
} as const;
export type ProxyCheckObject = ClosedEnum<typeof ProxyCheckObject>;

/**
 * Health check information about a domain's proxy configuration validation attempt.
 */
export type ProxyCheck = {
  object: ProxyCheckObject;
  id: string;
  domainId: string;
  /**
   * Unix timestamp of last run.
   *
   * @remarks
   */
  lastRunAt: number | null;
  proxyUrl: string;
  successful: boolean;
  /**
   * Unix timestamp of creation.
   *
   * @remarks
   */
  createdAt: number;
  /**
   * Unix timestamp of last update.
   *
   * @remarks
   */
  updatedAt: number;
};

/** @internal */
export const ProxyCheckObject$inboundSchema: z.ZodNativeEnum<typeof ProxyCheckObject> = z.nativeEnum(ProxyCheckObject);

/** @internal */
export const ProxyCheckObject$outboundSchema: z.ZodNativeEnum<typeof ProxyCheckObject> = ProxyCheckObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProxyCheckObject$ {
  /** @deprecated use `ProxyCheckObject$inboundSchema` instead. */
  export const inboundSchema = ProxyCheckObject$inboundSchema;
  /** @deprecated use `ProxyCheckObject$outboundSchema` instead. */
  export const outboundSchema = ProxyCheckObject$outboundSchema;
}

/** @internal */
export const ProxyCheck$inboundSchema: z.ZodType<ProxyCheck, z.ZodTypeDef, unknown> = z
  .object({
    object: ProxyCheckObject$inboundSchema,
    id: z.string(),
    domain_id: z.string(),
    last_run_at: z.nullable(z.number().int()),
    proxy_url: z.string(),
    successful: z.boolean(),
    created_at: z.number().int(),
    updated_at: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      domain_id: 'domainId',
      last_run_at: 'lastRunAt',
      proxy_url: 'proxyUrl',
      created_at: 'createdAt',
      updated_at: 'updatedAt',
    });
  });

/** @internal */
export type ProxyCheck$Outbound = {
  object: string;
  id: string;
  domain_id: string;
  last_run_at: number | null;
  proxy_url: string;
  successful: boolean;
  created_at: number;
  updated_at: number;
};

/** @internal */
export const ProxyCheck$outboundSchema: z.ZodType<ProxyCheck$Outbound, z.ZodTypeDef, ProxyCheck> = z
  .object({
    object: ProxyCheckObject$outboundSchema,
    id: z.string(),
    domainId: z.string(),
    lastRunAt: z.nullable(z.number().int()),
    proxyUrl: z.string(),
    successful: z.boolean(),
    createdAt: z.number().int(),
    updatedAt: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      domainId: 'domain_id',
      lastRunAt: 'last_run_at',
      proxyUrl: 'proxy_url',
      createdAt: 'created_at',
      updatedAt: 'updated_at',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProxyCheck$ {
  /** @deprecated use `ProxyCheck$inboundSchema` instead. */
  export const inboundSchema = ProxyCheck$inboundSchema;
  /** @deprecated use `ProxyCheck$outboundSchema` instead. */
  export const outboundSchema = ProxyCheck$outboundSchema;
  /** @deprecated use `ProxyCheck$Outbound` instead. */
  export type Outbound = ProxyCheck$Outbound;
}

export function proxyCheckToJSON(proxyCheck: ProxyCheck): string {
  return JSON.stringify(ProxyCheck$outboundSchema.parse(proxyCheck));
}

export function proxyCheckFromJSON(jsonString: string): SafeParseResult<ProxyCheck, SDKValidationError> {
  return safeParse(
    jsonString,
    x => ProxyCheck$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProxyCheck' from JSON`,
  );
}
