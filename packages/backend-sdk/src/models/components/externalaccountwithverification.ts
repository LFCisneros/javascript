/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * String representing the object's type. Objects of the same type share the same value.
 */
export const ExternalAccountWithVerificationObject = {
  ExternalAccount: "external_account",
  FacebookAccount: "facebook_account",
  GoogleAccount: "google_account",
} as const;
/**
 * String representing the object's type. Objects of the same type share the same value.
 */
export type ExternalAccountWithVerificationObject = ClosedEnum<
  typeof ExternalAccountWithVerificationObject
>;

export const GoogleOneTapVerificationStatus = {
  Unverified: "unverified",
  Verified: "verified",
} as const;
export type GoogleOneTapVerificationStatus = ClosedEnum<
  typeof GoogleOneTapVerificationStatus
>;

export const GoogleOneTapVerificationStrategy = {
  GoogleOneTap: "google_one_tap",
} as const;
export type GoogleOneTapVerificationStrategy = ClosedEnum<
  typeof GoogleOneTapVerificationStrategy
>;

export type ClerkErrorErrorExternalAccountWithVerificationMeta = {};

export type GoogleOneTapErrorClerkError = {
  message: string;
  longMessage: string;
  code: string;
  meta?: ClerkErrorErrorExternalAccountWithVerificationMeta | undefined;
  clerkTraceId?: string | undefined;
};

export type GoogleOneTapVerificationError = GoogleOneTapErrorClerkError;

export type GoogleOneTap = {
  status: GoogleOneTapVerificationStatus;
  strategy: GoogleOneTapVerificationStrategy;
  expireAt: number | null;
  attempts: number | null;
  verifiedAtClient?: string | null | undefined;
  error?: GoogleOneTapErrorClerkError | null | undefined;
};

export const OauthVerificationStatus = {
  Unverified: "unverified",
  Verified: "verified",
  Failed: "failed",
  Expired: "expired",
  Transferable: "transferable",
} as const;
export type OauthVerificationStatus = OpenEnum<typeof OauthVerificationStatus>;

export type ClerkErrorErrorMeta = {};

export type OauthErrorClerkError = {
  message: string;
  longMessage: string;
  code: string;
  meta?: ClerkErrorErrorMeta | undefined;
  clerkTraceId?: string | undefined;
};

export type VerificationError = OauthErrorClerkError;

export type Oauth = {
  status: OauthVerificationStatus;
  strategy: string;
  externalVerificationRedirectUrl?: string | undefined;
  error?: OauthErrorClerkError | null | undefined;
  expireAt: number;
  attempts: number | null;
  verifiedAtClient?: string | null | undefined;
};

export type ExternalAccountWithVerificationVerification = GoogleOneTap | Oauth;

export type ExternalAccountWithVerification = {
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: ExternalAccountWithVerificationObject;
  id: string;
  provider: string;
  identificationId: string;
  /**
   * The unique ID of the user in the external provider's system
   */
  providerUserId: string;
  approvedScopes: string;
  emailAddress: string;
  firstName: string;
  lastName: string;
  /**
   * Please use `image_url` instead
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  avatarUrl?: string | undefined;
  imageUrl?: string | null | undefined;
  username?: string | null | undefined;
  publicMetadata: { [k: string]: any };
  label?: string | null | undefined;
  /**
   * Unix timestamp of creation
   *
   * @remarks
   */
  createdAt: number;
  /**
   * Unix timestamp of creation
   *
   * @remarks
   */
  updatedAt: number;
  verification: GoogleOneTap | Oauth | null;
  additionalProperties?: { [k: string]: any };
};

/** @internal */
export const ExternalAccountWithVerificationObject$inboundSchema:
  z.ZodNativeEnum<typeof ExternalAccountWithVerificationObject> = z.nativeEnum(
    ExternalAccountWithVerificationObject,
  );

/** @internal */
export const ExternalAccountWithVerificationObject$outboundSchema:
  z.ZodNativeEnum<typeof ExternalAccountWithVerificationObject> =
    ExternalAccountWithVerificationObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalAccountWithVerificationObject$ {
  /** @deprecated use `ExternalAccountWithVerificationObject$inboundSchema` instead. */
  export const inboundSchema =
    ExternalAccountWithVerificationObject$inboundSchema;
  /** @deprecated use `ExternalAccountWithVerificationObject$outboundSchema` instead. */
  export const outboundSchema =
    ExternalAccountWithVerificationObject$outboundSchema;
}

/** @internal */
export const GoogleOneTapVerificationStatus$inboundSchema: z.ZodNativeEnum<
  typeof GoogleOneTapVerificationStatus
> = z.nativeEnum(GoogleOneTapVerificationStatus);

/** @internal */
export const GoogleOneTapVerificationStatus$outboundSchema: z.ZodNativeEnum<
  typeof GoogleOneTapVerificationStatus
> = GoogleOneTapVerificationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GoogleOneTapVerificationStatus$ {
  /** @deprecated use `GoogleOneTapVerificationStatus$inboundSchema` instead. */
  export const inboundSchema = GoogleOneTapVerificationStatus$inboundSchema;
  /** @deprecated use `GoogleOneTapVerificationStatus$outboundSchema` instead. */
  export const outboundSchema = GoogleOneTapVerificationStatus$outboundSchema;
}

/** @internal */
export const GoogleOneTapVerificationStrategy$inboundSchema: z.ZodNativeEnum<
  typeof GoogleOneTapVerificationStrategy
> = z.nativeEnum(GoogleOneTapVerificationStrategy);

/** @internal */
export const GoogleOneTapVerificationStrategy$outboundSchema: z.ZodNativeEnum<
  typeof GoogleOneTapVerificationStrategy
> = GoogleOneTapVerificationStrategy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GoogleOneTapVerificationStrategy$ {
  /** @deprecated use `GoogleOneTapVerificationStrategy$inboundSchema` instead. */
  export const inboundSchema = GoogleOneTapVerificationStrategy$inboundSchema;
  /** @deprecated use `GoogleOneTapVerificationStrategy$outboundSchema` instead. */
  export const outboundSchema = GoogleOneTapVerificationStrategy$outboundSchema;
}

/** @internal */
export const ClerkErrorErrorExternalAccountWithVerificationMeta$inboundSchema:
  z.ZodType<
    ClerkErrorErrorExternalAccountWithVerificationMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type ClerkErrorErrorExternalAccountWithVerificationMeta$Outbound = {};

/** @internal */
export const ClerkErrorErrorExternalAccountWithVerificationMeta$outboundSchema:
  z.ZodType<
    ClerkErrorErrorExternalAccountWithVerificationMeta$Outbound,
    z.ZodTypeDef,
    ClerkErrorErrorExternalAccountWithVerificationMeta
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClerkErrorErrorExternalAccountWithVerificationMeta$ {
  /** @deprecated use `ClerkErrorErrorExternalAccountWithVerificationMeta$inboundSchema` instead. */
  export const inboundSchema =
    ClerkErrorErrorExternalAccountWithVerificationMeta$inboundSchema;
  /** @deprecated use `ClerkErrorErrorExternalAccountWithVerificationMeta$outboundSchema` instead. */
  export const outboundSchema =
    ClerkErrorErrorExternalAccountWithVerificationMeta$outboundSchema;
  /** @deprecated use `ClerkErrorErrorExternalAccountWithVerificationMeta$Outbound` instead. */
  export type Outbound =
    ClerkErrorErrorExternalAccountWithVerificationMeta$Outbound;
}

export function clerkErrorErrorExternalAccountWithVerificationMetaToJSON(
  clerkErrorErrorExternalAccountWithVerificationMeta:
    ClerkErrorErrorExternalAccountWithVerificationMeta,
): string {
  return JSON.stringify(
    ClerkErrorErrorExternalAccountWithVerificationMeta$outboundSchema.parse(
      clerkErrorErrorExternalAccountWithVerificationMeta,
    ),
  );
}

export function clerkErrorErrorExternalAccountWithVerificationMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  ClerkErrorErrorExternalAccountWithVerificationMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ClerkErrorErrorExternalAccountWithVerificationMeta$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ClerkErrorErrorExternalAccountWithVerificationMeta' from JSON`,
  );
}

/** @internal */
export const GoogleOneTapErrorClerkError$inboundSchema: z.ZodType<
  GoogleOneTapErrorClerkError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  long_message: z.string(),
  code: z.string(),
  meta: z.lazy(() =>
    ClerkErrorErrorExternalAccountWithVerificationMeta$inboundSchema
  ).optional(),
  clerk_trace_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "long_message": "longMessage",
    "clerk_trace_id": "clerkTraceId",
  });
});

/** @internal */
export type GoogleOneTapErrorClerkError$Outbound = {
  message: string;
  long_message: string;
  code: string;
  meta?:
    | ClerkErrorErrorExternalAccountWithVerificationMeta$Outbound
    | undefined;
  clerk_trace_id?: string | undefined;
};

/** @internal */
export const GoogleOneTapErrorClerkError$outboundSchema: z.ZodType<
  GoogleOneTapErrorClerkError$Outbound,
  z.ZodTypeDef,
  GoogleOneTapErrorClerkError
> = z.object({
  message: z.string(),
  longMessage: z.string(),
  code: z.string(),
  meta: z.lazy(() =>
    ClerkErrorErrorExternalAccountWithVerificationMeta$outboundSchema
  ).optional(),
  clerkTraceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    longMessage: "long_message",
    clerkTraceId: "clerk_trace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GoogleOneTapErrorClerkError$ {
  /** @deprecated use `GoogleOneTapErrorClerkError$inboundSchema` instead. */
  export const inboundSchema = GoogleOneTapErrorClerkError$inboundSchema;
  /** @deprecated use `GoogleOneTapErrorClerkError$outboundSchema` instead. */
  export const outboundSchema = GoogleOneTapErrorClerkError$outboundSchema;
  /** @deprecated use `GoogleOneTapErrorClerkError$Outbound` instead. */
  export type Outbound = GoogleOneTapErrorClerkError$Outbound;
}

export function googleOneTapErrorClerkErrorToJSON(
  googleOneTapErrorClerkError: GoogleOneTapErrorClerkError,
): string {
  return JSON.stringify(
    GoogleOneTapErrorClerkError$outboundSchema.parse(
      googleOneTapErrorClerkError,
    ),
  );
}

export function googleOneTapErrorClerkErrorFromJSON(
  jsonString: string,
): SafeParseResult<GoogleOneTapErrorClerkError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GoogleOneTapErrorClerkError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GoogleOneTapErrorClerkError' from JSON`,
  );
}

/** @internal */
export const GoogleOneTapVerificationError$inboundSchema: z.ZodType<
  GoogleOneTapVerificationError,
  z.ZodTypeDef,
  unknown
> = z.lazy(() => GoogleOneTapErrorClerkError$inboundSchema);

/** @internal */
export type GoogleOneTapVerificationError$Outbound =
  GoogleOneTapErrorClerkError$Outbound;

/** @internal */
export const GoogleOneTapVerificationError$outboundSchema: z.ZodType<
  GoogleOneTapVerificationError$Outbound,
  z.ZodTypeDef,
  GoogleOneTapVerificationError
> = z.lazy(() => GoogleOneTapErrorClerkError$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GoogleOneTapVerificationError$ {
  /** @deprecated use `GoogleOneTapVerificationError$inboundSchema` instead. */
  export const inboundSchema = GoogleOneTapVerificationError$inboundSchema;
  /** @deprecated use `GoogleOneTapVerificationError$outboundSchema` instead. */
  export const outboundSchema = GoogleOneTapVerificationError$outboundSchema;
  /** @deprecated use `GoogleOneTapVerificationError$Outbound` instead. */
  export type Outbound = GoogleOneTapVerificationError$Outbound;
}

export function googleOneTapVerificationErrorToJSON(
  googleOneTapVerificationError: GoogleOneTapVerificationError,
): string {
  return JSON.stringify(
    GoogleOneTapVerificationError$outboundSchema.parse(
      googleOneTapVerificationError,
    ),
  );
}

export function googleOneTapVerificationErrorFromJSON(
  jsonString: string,
): SafeParseResult<GoogleOneTapVerificationError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GoogleOneTapVerificationError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GoogleOneTapVerificationError' from JSON`,
  );
}

/** @internal */
export const GoogleOneTap$inboundSchema: z.ZodType<
  GoogleOneTap,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: GoogleOneTapVerificationStatus$inboundSchema,
  strategy: GoogleOneTapVerificationStrategy$inboundSchema,
  expire_at: z.nullable(z.number().int()),
  attempts: z.nullable(z.number().int()),
  verified_at_client: z.nullable(z.string()).optional(),
  error: z.nullable(z.lazy(() => GoogleOneTapErrorClerkError$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "expire_at": "expireAt",
    "verified_at_client": "verifiedAtClient",
  });
});

/** @internal */
export type GoogleOneTap$Outbound = {
  status: string;
  strategy: string;
  expire_at: number | null;
  attempts: number | null;
  verified_at_client?: string | null | undefined;
  error?: GoogleOneTapErrorClerkError$Outbound | null | undefined;
};

/** @internal */
export const GoogleOneTap$outboundSchema: z.ZodType<
  GoogleOneTap$Outbound,
  z.ZodTypeDef,
  GoogleOneTap
> = z.object({
  status: GoogleOneTapVerificationStatus$outboundSchema,
  strategy: GoogleOneTapVerificationStrategy$outboundSchema,
  expireAt: z.nullable(z.number().int()),
  attempts: z.nullable(z.number().int()),
  verifiedAtClient: z.nullable(z.string()).optional(),
  error: z.nullable(z.lazy(() => GoogleOneTapErrorClerkError$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    expireAt: "expire_at",
    verifiedAtClient: "verified_at_client",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GoogleOneTap$ {
  /** @deprecated use `GoogleOneTap$inboundSchema` instead. */
  export const inboundSchema = GoogleOneTap$inboundSchema;
  /** @deprecated use `GoogleOneTap$outboundSchema` instead. */
  export const outboundSchema = GoogleOneTap$outboundSchema;
  /** @deprecated use `GoogleOneTap$Outbound` instead. */
  export type Outbound = GoogleOneTap$Outbound;
}

export function googleOneTapToJSON(googleOneTap: GoogleOneTap): string {
  return JSON.stringify(GoogleOneTap$outboundSchema.parse(googleOneTap));
}

export function googleOneTapFromJSON(
  jsonString: string,
): SafeParseResult<GoogleOneTap, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GoogleOneTap$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GoogleOneTap' from JSON`,
  );
}

/** @internal */
export const OauthVerificationStatus$inboundSchema: z.ZodType<
  OauthVerificationStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OauthVerificationStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OauthVerificationStatus$outboundSchema: z.ZodType<
  OauthVerificationStatus,
  z.ZodTypeDef,
  OauthVerificationStatus
> = z.union([
  z.nativeEnum(OauthVerificationStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OauthVerificationStatus$ {
  /** @deprecated use `OauthVerificationStatus$inboundSchema` instead. */
  export const inboundSchema = OauthVerificationStatus$inboundSchema;
  /** @deprecated use `OauthVerificationStatus$outboundSchema` instead. */
  export const outboundSchema = OauthVerificationStatus$outboundSchema;
}

/** @internal */
export const ClerkErrorErrorMeta$inboundSchema: z.ZodType<
  ClerkErrorErrorMeta,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ClerkErrorErrorMeta$Outbound = {};

/** @internal */
export const ClerkErrorErrorMeta$outboundSchema: z.ZodType<
  ClerkErrorErrorMeta$Outbound,
  z.ZodTypeDef,
  ClerkErrorErrorMeta
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClerkErrorErrorMeta$ {
  /** @deprecated use `ClerkErrorErrorMeta$inboundSchema` instead. */
  export const inboundSchema = ClerkErrorErrorMeta$inboundSchema;
  /** @deprecated use `ClerkErrorErrorMeta$outboundSchema` instead. */
  export const outboundSchema = ClerkErrorErrorMeta$outboundSchema;
  /** @deprecated use `ClerkErrorErrorMeta$Outbound` instead. */
  export type Outbound = ClerkErrorErrorMeta$Outbound;
}

export function clerkErrorErrorMetaToJSON(
  clerkErrorErrorMeta: ClerkErrorErrorMeta,
): string {
  return JSON.stringify(
    ClerkErrorErrorMeta$outboundSchema.parse(clerkErrorErrorMeta),
  );
}

export function clerkErrorErrorMetaFromJSON(
  jsonString: string,
): SafeParseResult<ClerkErrorErrorMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClerkErrorErrorMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClerkErrorErrorMeta' from JSON`,
  );
}

/** @internal */
export const OauthErrorClerkError$inboundSchema: z.ZodType<
  OauthErrorClerkError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  long_message: z.string(),
  code: z.string(),
  meta: z.lazy(() => ClerkErrorErrorMeta$inboundSchema).optional(),
  clerk_trace_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "long_message": "longMessage",
    "clerk_trace_id": "clerkTraceId",
  });
});

/** @internal */
export type OauthErrorClerkError$Outbound = {
  message: string;
  long_message: string;
  code: string;
  meta?: ClerkErrorErrorMeta$Outbound | undefined;
  clerk_trace_id?: string | undefined;
};

/** @internal */
export const OauthErrorClerkError$outboundSchema: z.ZodType<
  OauthErrorClerkError$Outbound,
  z.ZodTypeDef,
  OauthErrorClerkError
> = z.object({
  message: z.string(),
  longMessage: z.string(),
  code: z.string(),
  meta: z.lazy(() => ClerkErrorErrorMeta$outboundSchema).optional(),
  clerkTraceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    longMessage: "long_message",
    clerkTraceId: "clerk_trace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OauthErrorClerkError$ {
  /** @deprecated use `OauthErrorClerkError$inboundSchema` instead. */
  export const inboundSchema = OauthErrorClerkError$inboundSchema;
  /** @deprecated use `OauthErrorClerkError$outboundSchema` instead. */
  export const outboundSchema = OauthErrorClerkError$outboundSchema;
  /** @deprecated use `OauthErrorClerkError$Outbound` instead. */
  export type Outbound = OauthErrorClerkError$Outbound;
}

export function oauthErrorClerkErrorToJSON(
  oauthErrorClerkError: OauthErrorClerkError,
): string {
  return JSON.stringify(
    OauthErrorClerkError$outboundSchema.parse(oauthErrorClerkError),
  );
}

export function oauthErrorClerkErrorFromJSON(
  jsonString: string,
): SafeParseResult<OauthErrorClerkError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OauthErrorClerkError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OauthErrorClerkError' from JSON`,
  );
}

/** @internal */
export const VerificationError$inboundSchema: z.ZodType<
  VerificationError,
  z.ZodTypeDef,
  unknown
> = z.lazy(() => OauthErrorClerkError$inboundSchema);

/** @internal */
export type VerificationError$Outbound = OauthErrorClerkError$Outbound;

/** @internal */
export const VerificationError$outboundSchema: z.ZodType<
  VerificationError$Outbound,
  z.ZodTypeDef,
  VerificationError
> = z.lazy(() => OauthErrorClerkError$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerificationError$ {
  /** @deprecated use `VerificationError$inboundSchema` instead. */
  export const inboundSchema = VerificationError$inboundSchema;
  /** @deprecated use `VerificationError$outboundSchema` instead. */
  export const outboundSchema = VerificationError$outboundSchema;
  /** @deprecated use `VerificationError$Outbound` instead. */
  export type Outbound = VerificationError$Outbound;
}

export function verificationErrorToJSON(
  verificationError: VerificationError,
): string {
  return JSON.stringify(
    VerificationError$outboundSchema.parse(verificationError),
  );
}

export function verificationErrorFromJSON(
  jsonString: string,
): SafeParseResult<VerificationError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerificationError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerificationError' from JSON`,
  );
}

/** @internal */
export const Oauth$inboundSchema: z.ZodType<Oauth, z.ZodTypeDef, unknown> = z
  .object({
    status: OauthVerificationStatus$inboundSchema,
    strategy: z.string(),
    external_verification_redirect_url: z.string().optional(),
    error: z.nullable(z.lazy(() => OauthErrorClerkError$inboundSchema))
      .optional(),
    expire_at: z.number().int(),
    attempts: z.nullable(z.number().int()),
    verified_at_client: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "external_verification_redirect_url": "externalVerificationRedirectUrl",
      "expire_at": "expireAt",
      "verified_at_client": "verifiedAtClient",
    });
  });

/** @internal */
export type Oauth$Outbound = {
  status: string;
  strategy: string;
  external_verification_redirect_url?: string | undefined;
  error?: OauthErrorClerkError$Outbound | null | undefined;
  expire_at: number;
  attempts: number | null;
  verified_at_client?: string | null | undefined;
};

/** @internal */
export const Oauth$outboundSchema: z.ZodType<
  Oauth$Outbound,
  z.ZodTypeDef,
  Oauth
> = z.object({
  status: OauthVerificationStatus$outboundSchema,
  strategy: z.string(),
  externalVerificationRedirectUrl: z.string().optional(),
  error: z.nullable(z.lazy(() => OauthErrorClerkError$outboundSchema))
    .optional(),
  expireAt: z.number().int(),
  attempts: z.nullable(z.number().int()),
  verifiedAtClient: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    externalVerificationRedirectUrl: "external_verification_redirect_url",
    expireAt: "expire_at",
    verifiedAtClient: "verified_at_client",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Oauth$ {
  /** @deprecated use `Oauth$inboundSchema` instead. */
  export const inboundSchema = Oauth$inboundSchema;
  /** @deprecated use `Oauth$outboundSchema` instead. */
  export const outboundSchema = Oauth$outboundSchema;
  /** @deprecated use `Oauth$Outbound` instead. */
  export type Outbound = Oauth$Outbound;
}

export function oauthToJSON(oauth: Oauth): string {
  return JSON.stringify(Oauth$outboundSchema.parse(oauth));
}

export function oauthFromJSON(
  jsonString: string,
): SafeParseResult<Oauth, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Oauth$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Oauth' from JSON`,
  );
}

/** @internal */
export const ExternalAccountWithVerificationVerification$inboundSchema:
  z.ZodType<
    ExternalAccountWithVerificationVerification,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => GoogleOneTap$inboundSchema),
    z.lazy(() => Oauth$inboundSchema),
  ]);

/** @internal */
export type ExternalAccountWithVerificationVerification$Outbound =
  | GoogleOneTap$Outbound
  | Oauth$Outbound;

/** @internal */
export const ExternalAccountWithVerificationVerification$outboundSchema:
  z.ZodType<
    ExternalAccountWithVerificationVerification$Outbound,
    z.ZodTypeDef,
    ExternalAccountWithVerificationVerification
  > = z.union([
    z.lazy(() => GoogleOneTap$outboundSchema),
    z.lazy(() => Oauth$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalAccountWithVerificationVerification$ {
  /** @deprecated use `ExternalAccountWithVerificationVerification$inboundSchema` instead. */
  export const inboundSchema =
    ExternalAccountWithVerificationVerification$inboundSchema;
  /** @deprecated use `ExternalAccountWithVerificationVerification$outboundSchema` instead. */
  export const outboundSchema =
    ExternalAccountWithVerificationVerification$outboundSchema;
  /** @deprecated use `ExternalAccountWithVerificationVerification$Outbound` instead. */
  export type Outbound = ExternalAccountWithVerificationVerification$Outbound;
}

export function externalAccountWithVerificationVerificationToJSON(
  externalAccountWithVerificationVerification:
    ExternalAccountWithVerificationVerification,
): string {
  return JSON.stringify(
    ExternalAccountWithVerificationVerification$outboundSchema.parse(
      externalAccountWithVerificationVerification,
    ),
  );
}

export function externalAccountWithVerificationVerificationFromJSON(
  jsonString: string,
): SafeParseResult<
  ExternalAccountWithVerificationVerification,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ExternalAccountWithVerificationVerification$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ExternalAccountWithVerificationVerification' from JSON`,
  );
}

/** @internal */
export const ExternalAccountWithVerification$inboundSchema: z.ZodType<
  ExternalAccountWithVerification,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    object: ExternalAccountWithVerificationObject$inboundSchema,
    id: z.string(),
    provider: z.string(),
    identification_id: z.string(),
    provider_user_id: z.string(),
    approved_scopes: z.string(),
    email_address: z.string(),
    first_name: z.string(),
    last_name: z.string(),
    avatar_url: z.string().optional(),
    image_url: z.nullable(z.string()).optional(),
    username: z.nullable(z.string()).optional(),
    public_metadata: z.record(z.any()),
    label: z.nullable(z.string()).optional(),
    created_at: z.number().int(),
    updated_at: z.number().int(),
    verification: z.nullable(
      z.union([
        z.lazy(() => GoogleOneTap$inboundSchema),
        z.lazy(() => Oauth$inboundSchema),
      ]),
    ),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "identification_id": "identificationId",
    "provider_user_id": "providerUserId",
    "approved_scopes": "approvedScopes",
    "email_address": "emailAddress",
    "first_name": "firstName",
    "last_name": "lastName",
    "avatar_url": "avatarUrl",
    "image_url": "imageUrl",
    "public_metadata": "publicMetadata",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ExternalAccountWithVerification$Outbound = {
  object: string;
  id: string;
  provider: string;
  identification_id: string;
  provider_user_id: string;
  approved_scopes: string;
  email_address: string;
  first_name: string;
  last_name: string;
  avatar_url?: string | undefined;
  image_url?: string | null | undefined;
  username?: string | null | undefined;
  public_metadata: { [k: string]: any };
  label?: string | null | undefined;
  created_at: number;
  updated_at: number;
  verification: GoogleOneTap$Outbound | Oauth$Outbound | null;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const ExternalAccountWithVerification$outboundSchema: z.ZodType<
  ExternalAccountWithVerification$Outbound,
  z.ZodTypeDef,
  ExternalAccountWithVerification
> = z.object({
  object: ExternalAccountWithVerificationObject$outboundSchema,
  id: z.string(),
  provider: z.string(),
  identificationId: z.string(),
  providerUserId: z.string(),
  approvedScopes: z.string(),
  emailAddress: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  avatarUrl: z.string().optional(),
  imageUrl: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  publicMetadata: z.record(z.any()),
  label: z.nullable(z.string()).optional(),
  createdAt: z.number().int(),
  updatedAt: z.number().int(),
  verification: z.nullable(
    z.union([
      z.lazy(() => GoogleOneTap$outboundSchema),
      z.lazy(() => Oauth$outboundSchema),
    ]),
  ),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      identificationId: "identification_id",
      providerUserId: "provider_user_id",
      approvedScopes: "approved_scopes",
      emailAddress: "email_address",
      firstName: "first_name",
      lastName: "last_name",
      avatarUrl: "avatar_url",
      imageUrl: "image_url",
      publicMetadata: "public_metadata",
      createdAt: "created_at",
      updatedAt: "updated_at",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalAccountWithVerification$ {
  /** @deprecated use `ExternalAccountWithVerification$inboundSchema` instead. */
  export const inboundSchema = ExternalAccountWithVerification$inboundSchema;
  /** @deprecated use `ExternalAccountWithVerification$outboundSchema` instead. */
  export const outboundSchema = ExternalAccountWithVerification$outboundSchema;
  /** @deprecated use `ExternalAccountWithVerification$Outbound` instead. */
  export type Outbound = ExternalAccountWithVerification$Outbound;
}

export function externalAccountWithVerificationToJSON(
  externalAccountWithVerification: ExternalAccountWithVerification,
): string {
  return JSON.stringify(
    ExternalAccountWithVerification$outboundSchema.parse(
      externalAccountWithVerification,
    ),
  );
}

export function externalAccountWithVerificationFromJSON(
  jsonString: string,
): SafeParseResult<ExternalAccountWithVerification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExternalAccountWithVerification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalAccountWithVerification' from JSON`,
  );
}
