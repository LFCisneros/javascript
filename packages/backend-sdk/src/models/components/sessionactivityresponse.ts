/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type SessionActivityResponse = {
  object: string;
  id: string;
  deviceType?: string | undefined;
  isMobile: boolean;
  browserName?: string | undefined;
  browserVersion?: string | undefined;
  ipAddress?: string | undefined;
  city?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const SessionActivityResponse$inboundSchema: z.ZodType<SessionActivityResponse, z.ZodTypeDef, unknown> = z
  .object({
    object: z.string(),
    id: z.string(),
    device_type: z.string().optional(),
    is_mobile: z.boolean(),
    browser_name: z.string().optional(),
    browser_version: z.string().optional(),
    ip_address: z.string().optional(),
    city: z.string().optional(),
    country: z.string().optional(),
  })
  .transform(v => {
    return remap$(v, {
      device_type: 'deviceType',
      is_mobile: 'isMobile',
      browser_name: 'browserName',
      browser_version: 'browserVersion',
      ip_address: 'ipAddress',
    });
  });

/** @internal */
export type SessionActivityResponse$Outbound = {
  object: string;
  id: string;
  device_type?: string | undefined;
  is_mobile: boolean;
  browser_name?: string | undefined;
  browser_version?: string | undefined;
  ip_address?: string | undefined;
  city?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const SessionActivityResponse$outboundSchema: z.ZodType<
  SessionActivityResponse$Outbound,
  z.ZodTypeDef,
  SessionActivityResponse
> = z
  .object({
    object: z.string(),
    id: z.string(),
    deviceType: z.string().optional(),
    isMobile: z.boolean(),
    browserName: z.string().optional(),
    browserVersion: z.string().optional(),
    ipAddress: z.string().optional(),
    city: z.string().optional(),
    country: z.string().optional(),
  })
  .transform(v => {
    return remap$(v, {
      deviceType: 'device_type',
      isMobile: 'is_mobile',
      browserName: 'browser_name',
      browserVersion: 'browser_version',
      ipAddress: 'ip_address',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionActivityResponse$ {
  /** @deprecated use `SessionActivityResponse$inboundSchema` instead. */
  export const inboundSchema = SessionActivityResponse$inboundSchema;
  /** @deprecated use `SessionActivityResponse$outboundSchema` instead. */
  export const outboundSchema = SessionActivityResponse$outboundSchema;
  /** @deprecated use `SessionActivityResponse$Outbound` instead. */
  export type Outbound = SessionActivityResponse$Outbound;
}

export function sessionActivityResponseToJSON(sessionActivityResponse: SessionActivityResponse): string {
  return JSON.stringify(SessionActivityResponse$outboundSchema.parse(sessionActivityResponse));
}

export function sessionActivityResponseFromJSON(
  jsonString: string,
): SafeParseResult<SessionActivityResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    x => SessionActivityResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionActivityResponse' from JSON`,
  );
}
