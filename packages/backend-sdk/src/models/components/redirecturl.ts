/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export const RedirectURLObject = {
  RedirectUrl: 'redirect_url',
} as const;
export type RedirectURLObject = ClosedEnum<typeof RedirectURLObject>;

/**
 * List of Redirect URLs
 */
export type RedirectURL = {
  object: RedirectURLObject;
  id: string;
  url: string;
  /**
   * Unix timestamp of creation.
   *
   * @remarks
   */
  createdAt: number;
  /**
   * Unix timestamp of last update.
   *
   * @remarks
   */
  updatedAt: number;
};

/** @internal */
export const RedirectURLObject$inboundSchema: z.ZodNativeEnum<typeof RedirectURLObject> =
  z.nativeEnum(RedirectURLObject);

/** @internal */
export const RedirectURLObject$outboundSchema: z.ZodNativeEnum<typeof RedirectURLObject> =
  RedirectURLObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectURLObject$ {
  /** @deprecated use `RedirectURLObject$inboundSchema` instead. */
  export const inboundSchema = RedirectURLObject$inboundSchema;
  /** @deprecated use `RedirectURLObject$outboundSchema` instead. */
  export const outboundSchema = RedirectURLObject$outboundSchema;
}

/** @internal */
export const RedirectURL$inboundSchema: z.ZodType<RedirectURL, z.ZodTypeDef, unknown> = z
  .object({
    object: RedirectURLObject$inboundSchema,
    id: z.string(),
    url: z.string(),
    created_at: z.number().int(),
    updated_at: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      created_at: 'createdAt',
      updated_at: 'updatedAt',
    });
  });

/** @internal */
export type RedirectURL$Outbound = {
  object: string;
  id: string;
  url: string;
  created_at: number;
  updated_at: number;
};

/** @internal */
export const RedirectURL$outboundSchema: z.ZodType<RedirectURL$Outbound, z.ZodTypeDef, RedirectURL> = z
  .object({
    object: RedirectURLObject$outboundSchema,
    id: z.string(),
    url: z.string(),
    createdAt: z.number().int(),
    updatedAt: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      createdAt: 'created_at',
      updatedAt: 'updated_at',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectURL$ {
  /** @deprecated use `RedirectURL$inboundSchema` instead. */
  export const inboundSchema = RedirectURL$inboundSchema;
  /** @deprecated use `RedirectURL$outboundSchema` instead. */
  export const outboundSchema = RedirectURL$outboundSchema;
  /** @deprecated use `RedirectURL$Outbound` instead. */
  export type Outbound = RedirectURL$Outbound;
}

export function redirectURLToJSON(redirectURL: RedirectURL): string {
  return JSON.stringify(RedirectURL$outboundSchema.parse(redirectURL));
}

export function redirectURLFromJSON(jsonString: string): SafeParseResult<RedirectURL, SDKValidationError> {
  return safeParse(
    jsonString,
    x => RedirectURL$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedirectURL' from JSON`,
  );
}
