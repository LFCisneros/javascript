/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export const OrganizationInvitationObject = {
  OrganizationInvitation: 'organization_invitation',
} as const;
/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export type OrganizationInvitationObject = ClosedEnum<typeof OrganizationInvitationObject>;

/**
 * An organization invitation
 */
export type OrganizationInvitation = {
  /**
   * String representing the object's type. Objects of the same type share the same value.
   *
   * @remarks
   */
  object: OrganizationInvitationObject;
  id: string;
  emailAddress: string;
  role: string;
  roleName: string;
  organizationId?: string | undefined;
  status?: string | undefined;
  publicMetadata: { [k: string]: any };
  privateMetadata?: { [k: string]: any } | undefined;
  url: string | null;
  /**
   * Unix timestamp of expiration.
   */
  expiresAt: number | null;
  /**
   * Unix timestamp of creation.
   */
  createdAt: number;
  /**
   * Unix timestamp of last update.
   */
  updatedAt: number;
};

/** @internal */
export const OrganizationInvitationObject$inboundSchema: z.ZodNativeEnum<typeof OrganizationInvitationObject> =
  z.nativeEnum(OrganizationInvitationObject);

/** @internal */
export const OrganizationInvitationObject$outboundSchema: z.ZodNativeEnum<typeof OrganizationInvitationObject> =
  OrganizationInvitationObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationInvitationObject$ {
  /** @deprecated use `OrganizationInvitationObject$inboundSchema` instead. */
  export const inboundSchema = OrganizationInvitationObject$inboundSchema;
  /** @deprecated use `OrganizationInvitationObject$outboundSchema` instead. */
  export const outboundSchema = OrganizationInvitationObject$outboundSchema;
}

/** @internal */
export const OrganizationInvitation$inboundSchema: z.ZodType<OrganizationInvitation, z.ZodTypeDef, unknown> = z
  .object({
    object: OrganizationInvitationObject$inboundSchema,
    id: z.string(),
    email_address: z.string(),
    role: z.string(),
    role_name: z.string(),
    organization_id: z.string().optional(),
    status: z.string().optional(),
    public_metadata: z.record(z.any()),
    private_metadata: z.record(z.any()).optional(),
    url: z.nullable(z.string()),
    expires_at: z.nullable(z.number().int()),
    created_at: z.number().int(),
    updated_at: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      email_address: 'emailAddress',
      role_name: 'roleName',
      organization_id: 'organizationId',
      public_metadata: 'publicMetadata',
      private_metadata: 'privateMetadata',
      expires_at: 'expiresAt',
      created_at: 'createdAt',
      updated_at: 'updatedAt',
    });
  });

/** @internal */
export type OrganizationInvitation$Outbound = {
  object: string;
  id: string;
  email_address: string;
  role: string;
  role_name: string;
  organization_id?: string | undefined;
  status?: string | undefined;
  public_metadata: { [k: string]: any };
  private_metadata?: { [k: string]: any } | undefined;
  url: string | null;
  expires_at: number | null;
  created_at: number;
  updated_at: number;
};

/** @internal */
export const OrganizationInvitation$outboundSchema: z.ZodType<
  OrganizationInvitation$Outbound,
  z.ZodTypeDef,
  OrganizationInvitation
> = z
  .object({
    object: OrganizationInvitationObject$outboundSchema,
    id: z.string(),
    emailAddress: z.string(),
    role: z.string(),
    roleName: z.string(),
    organizationId: z.string().optional(),
    status: z.string().optional(),
    publicMetadata: z.record(z.any()),
    privateMetadata: z.record(z.any()).optional(),
    url: z.nullable(z.string()),
    expiresAt: z.nullable(z.number().int()),
    createdAt: z.number().int(),
    updatedAt: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      emailAddress: 'email_address',
      roleName: 'role_name',
      organizationId: 'organization_id',
      publicMetadata: 'public_metadata',
      privateMetadata: 'private_metadata',
      expiresAt: 'expires_at',
      createdAt: 'created_at',
      updatedAt: 'updated_at',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationInvitation$ {
  /** @deprecated use `OrganizationInvitation$inboundSchema` instead. */
  export const inboundSchema = OrganizationInvitation$inboundSchema;
  /** @deprecated use `OrganizationInvitation$outboundSchema` instead. */
  export const outboundSchema = OrganizationInvitation$outboundSchema;
  /** @deprecated use `OrganizationInvitation$Outbound` instead. */
  export type Outbound = OrganizationInvitation$Outbound;
}

export function organizationInvitationToJSON(organizationInvitation: OrganizationInvitation): string {
  return JSON.stringify(OrganizationInvitation$outboundSchema.parse(organizationInvitation));
}

export function organizationInvitationFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationInvitation, SDKValidationError> {
  return safeParse(
    jsonString,
    x => OrganizationInvitation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationInvitation' from JSON`,
  );
}
