/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export const Web3WalletObject = {
  Web3Wallet: "web3_wallet",
} as const;
/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export type Web3WalletObject = ClosedEnum<typeof Web3WalletObject>;

export const AdminVerificationWeb3WalletStatus = {
  Verified: "verified",
} as const;
export type AdminVerificationWeb3WalletStatus = ClosedEnum<
  typeof AdminVerificationWeb3WalletStatus
>;

export const AdminVerificationWeb3WalletStrategy = {
  Admin: "admin",
} as const;
export type AdminVerificationWeb3WalletStrategy = OpenEnum<
  typeof AdminVerificationWeb3WalletStrategy
>;

export type Web3WalletVerificationAdmin = {
  status: AdminVerificationWeb3WalletStatus;
  strategy: AdminVerificationWeb3WalletStrategy;
  attempts: number | null;
  expireAt: number | null;
  verifiedAtClient?: string | null | undefined;
};

export const Web3SignatureVerificationStatus = {
  Unverified: "unverified",
  Verified: "verified",
  Failed: "failed",
  Expired: "expired",
} as const;
export type Web3SignatureVerificationStatus = ClosedEnum<
  typeof Web3SignatureVerificationStatus
>;

export const Web3SignatureVerificationStrategy = {
  Web3MetamaskSignature: "web3_metamask_signature",
  Web3CoinbaseWalletSignature: "web3_coinbase_wallet_signature",
  Web3OkxWalletSignature: "web3_okx_wallet_signature",
} as const;
export type Web3SignatureVerificationStrategy = ClosedEnum<
  typeof Web3SignatureVerificationStrategy
>;

export type Web3Signature = {
  status: Web3SignatureVerificationStatus;
  strategy: Web3SignatureVerificationStrategy;
  nonce?: string | null | undefined;
  message?: string | null | undefined;
  attempts: number | null;
  expireAt: number | null;
  verifiedAtClient?: string | null | undefined;
};

export type Web3WalletVerification =
  | Web3WalletVerificationAdmin
  | Web3Signature;

export type Web3Wallet = {
  id?: string | undefined;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   *
   * @remarks
   */
  object: Web3WalletObject;
  web3Wallet: string;
  verification: Web3WalletVerificationAdmin | Web3Signature | null;
  /**
   * Unix timestamp of creation
   *
   * @remarks
   */
  createdAt: number;
  /**
   * Unix timestamp of creation
   *
   * @remarks
   */
  updatedAt: number;
};

/** @internal */
export const Web3WalletObject$inboundSchema: z.ZodNativeEnum<
  typeof Web3WalletObject
> = z.nativeEnum(Web3WalletObject);

/** @internal */
export const Web3WalletObject$outboundSchema: z.ZodNativeEnum<
  typeof Web3WalletObject
> = Web3WalletObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Web3WalletObject$ {
  /** @deprecated use `Web3WalletObject$inboundSchema` instead. */
  export const inboundSchema = Web3WalletObject$inboundSchema;
  /** @deprecated use `Web3WalletObject$outboundSchema` instead. */
  export const outboundSchema = Web3WalletObject$outboundSchema;
}

/** @internal */
export const AdminVerificationWeb3WalletStatus$inboundSchema: z.ZodNativeEnum<
  typeof AdminVerificationWeb3WalletStatus
> = z.nativeEnum(AdminVerificationWeb3WalletStatus);

/** @internal */
export const AdminVerificationWeb3WalletStatus$outboundSchema: z.ZodNativeEnum<
  typeof AdminVerificationWeb3WalletStatus
> = AdminVerificationWeb3WalletStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdminVerificationWeb3WalletStatus$ {
  /** @deprecated use `AdminVerificationWeb3WalletStatus$inboundSchema` instead. */
  export const inboundSchema = AdminVerificationWeb3WalletStatus$inboundSchema;
  /** @deprecated use `AdminVerificationWeb3WalletStatus$outboundSchema` instead. */
  export const outboundSchema =
    AdminVerificationWeb3WalletStatus$outboundSchema;
}

/** @internal */
export const AdminVerificationWeb3WalletStrategy$inboundSchema: z.ZodType<
  AdminVerificationWeb3WalletStrategy,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AdminVerificationWeb3WalletStrategy),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AdminVerificationWeb3WalletStrategy$outboundSchema: z.ZodType<
  AdminVerificationWeb3WalletStrategy,
  z.ZodTypeDef,
  AdminVerificationWeb3WalletStrategy
> = z.union([
  z.nativeEnum(AdminVerificationWeb3WalletStrategy),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdminVerificationWeb3WalletStrategy$ {
  /** @deprecated use `AdminVerificationWeb3WalletStrategy$inboundSchema` instead. */
  export const inboundSchema =
    AdminVerificationWeb3WalletStrategy$inboundSchema;
  /** @deprecated use `AdminVerificationWeb3WalletStrategy$outboundSchema` instead. */
  export const outboundSchema =
    AdminVerificationWeb3WalletStrategy$outboundSchema;
}

/** @internal */
export const Web3WalletVerificationAdmin$inboundSchema: z.ZodType<
  Web3WalletVerificationAdmin,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: AdminVerificationWeb3WalletStatus$inboundSchema,
  strategy: AdminVerificationWeb3WalletStrategy$inboundSchema,
  attempts: z.nullable(z.number().int()),
  expire_at: z.nullable(z.number().int()),
  verified_at_client: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "expire_at": "expireAt",
    "verified_at_client": "verifiedAtClient",
  });
});

/** @internal */
export type Web3WalletVerificationAdmin$Outbound = {
  status: string;
  strategy: string;
  attempts: number | null;
  expire_at: number | null;
  verified_at_client?: string | null | undefined;
};

/** @internal */
export const Web3WalletVerificationAdmin$outboundSchema: z.ZodType<
  Web3WalletVerificationAdmin$Outbound,
  z.ZodTypeDef,
  Web3WalletVerificationAdmin
> = z.object({
  status: AdminVerificationWeb3WalletStatus$outboundSchema,
  strategy: AdminVerificationWeb3WalletStrategy$outboundSchema,
  attempts: z.nullable(z.number().int()),
  expireAt: z.nullable(z.number().int()),
  verifiedAtClient: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    expireAt: "expire_at",
    verifiedAtClient: "verified_at_client",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Web3WalletVerificationAdmin$ {
  /** @deprecated use `Web3WalletVerificationAdmin$inboundSchema` instead. */
  export const inboundSchema = Web3WalletVerificationAdmin$inboundSchema;
  /** @deprecated use `Web3WalletVerificationAdmin$outboundSchema` instead. */
  export const outboundSchema = Web3WalletVerificationAdmin$outboundSchema;
  /** @deprecated use `Web3WalletVerificationAdmin$Outbound` instead. */
  export type Outbound = Web3WalletVerificationAdmin$Outbound;
}

export function web3WalletVerificationAdminToJSON(
  web3WalletVerificationAdmin: Web3WalletVerificationAdmin,
): string {
  return JSON.stringify(
    Web3WalletVerificationAdmin$outboundSchema.parse(
      web3WalletVerificationAdmin,
    ),
  );
}

export function web3WalletVerificationAdminFromJSON(
  jsonString: string,
): SafeParseResult<Web3WalletVerificationAdmin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Web3WalletVerificationAdmin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Web3WalletVerificationAdmin' from JSON`,
  );
}

/** @internal */
export const Web3SignatureVerificationStatus$inboundSchema: z.ZodNativeEnum<
  typeof Web3SignatureVerificationStatus
> = z.nativeEnum(Web3SignatureVerificationStatus);

/** @internal */
export const Web3SignatureVerificationStatus$outboundSchema: z.ZodNativeEnum<
  typeof Web3SignatureVerificationStatus
> = Web3SignatureVerificationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Web3SignatureVerificationStatus$ {
  /** @deprecated use `Web3SignatureVerificationStatus$inboundSchema` instead. */
  export const inboundSchema = Web3SignatureVerificationStatus$inboundSchema;
  /** @deprecated use `Web3SignatureVerificationStatus$outboundSchema` instead. */
  export const outboundSchema = Web3SignatureVerificationStatus$outboundSchema;
}

/** @internal */
export const Web3SignatureVerificationStrategy$inboundSchema: z.ZodNativeEnum<
  typeof Web3SignatureVerificationStrategy
> = z.nativeEnum(Web3SignatureVerificationStrategy);

/** @internal */
export const Web3SignatureVerificationStrategy$outboundSchema: z.ZodNativeEnum<
  typeof Web3SignatureVerificationStrategy
> = Web3SignatureVerificationStrategy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Web3SignatureVerificationStrategy$ {
  /** @deprecated use `Web3SignatureVerificationStrategy$inboundSchema` instead. */
  export const inboundSchema = Web3SignatureVerificationStrategy$inboundSchema;
  /** @deprecated use `Web3SignatureVerificationStrategy$outboundSchema` instead. */
  export const outboundSchema =
    Web3SignatureVerificationStrategy$outboundSchema;
}

/** @internal */
export const Web3Signature$inboundSchema: z.ZodType<
  Web3Signature,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: Web3SignatureVerificationStatus$inboundSchema,
  strategy: Web3SignatureVerificationStrategy$inboundSchema,
  nonce: z.nullable(z.string()).optional(),
  message: z.nullable(z.string()).optional(),
  attempts: z.nullable(z.number().int()),
  expire_at: z.nullable(z.number().int()),
  verified_at_client: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "expire_at": "expireAt",
    "verified_at_client": "verifiedAtClient",
  });
});

/** @internal */
export type Web3Signature$Outbound = {
  status: string;
  strategy: string;
  nonce?: string | null | undefined;
  message?: string | null | undefined;
  attempts: number | null;
  expire_at: number | null;
  verified_at_client?: string | null | undefined;
};

/** @internal */
export const Web3Signature$outboundSchema: z.ZodType<
  Web3Signature$Outbound,
  z.ZodTypeDef,
  Web3Signature
> = z.object({
  status: Web3SignatureVerificationStatus$outboundSchema,
  strategy: Web3SignatureVerificationStrategy$outboundSchema,
  nonce: z.nullable(z.string()).optional(),
  message: z.nullable(z.string()).optional(),
  attempts: z.nullable(z.number().int()),
  expireAt: z.nullable(z.number().int()),
  verifiedAtClient: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    expireAt: "expire_at",
    verifiedAtClient: "verified_at_client",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Web3Signature$ {
  /** @deprecated use `Web3Signature$inboundSchema` instead. */
  export const inboundSchema = Web3Signature$inboundSchema;
  /** @deprecated use `Web3Signature$outboundSchema` instead. */
  export const outboundSchema = Web3Signature$outboundSchema;
  /** @deprecated use `Web3Signature$Outbound` instead. */
  export type Outbound = Web3Signature$Outbound;
}

export function web3SignatureToJSON(web3Signature: Web3Signature): string {
  return JSON.stringify(Web3Signature$outboundSchema.parse(web3Signature));
}

export function web3SignatureFromJSON(
  jsonString: string,
): SafeParseResult<Web3Signature, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Web3Signature$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Web3Signature' from JSON`,
  );
}

/** @internal */
export const Web3WalletVerification$inboundSchema: z.ZodType<
  Web3WalletVerification,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Web3WalletVerificationAdmin$inboundSchema),
  z.lazy(() => Web3Signature$inboundSchema),
]);

/** @internal */
export type Web3WalletVerification$Outbound =
  | Web3WalletVerificationAdmin$Outbound
  | Web3Signature$Outbound;

/** @internal */
export const Web3WalletVerification$outboundSchema: z.ZodType<
  Web3WalletVerification$Outbound,
  z.ZodTypeDef,
  Web3WalletVerification
> = z.union([
  z.lazy(() => Web3WalletVerificationAdmin$outboundSchema),
  z.lazy(() => Web3Signature$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Web3WalletVerification$ {
  /** @deprecated use `Web3WalletVerification$inboundSchema` instead. */
  export const inboundSchema = Web3WalletVerification$inboundSchema;
  /** @deprecated use `Web3WalletVerification$outboundSchema` instead. */
  export const outboundSchema = Web3WalletVerification$outboundSchema;
  /** @deprecated use `Web3WalletVerification$Outbound` instead. */
  export type Outbound = Web3WalletVerification$Outbound;
}

export function web3WalletVerificationToJSON(
  web3WalletVerification: Web3WalletVerification,
): string {
  return JSON.stringify(
    Web3WalletVerification$outboundSchema.parse(web3WalletVerification),
  );
}

export function web3WalletVerificationFromJSON(
  jsonString: string,
): SafeParseResult<Web3WalletVerification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Web3WalletVerification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Web3WalletVerification' from JSON`,
  );
}

/** @internal */
export const Web3Wallet$inboundSchema: z.ZodType<
  Web3Wallet,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  object: Web3WalletObject$inboundSchema,
  web3_wallet: z.string(),
  verification: z.nullable(
    z.union([
      z.lazy(() => Web3WalletVerificationAdmin$inboundSchema),
      z.lazy(() => Web3Signature$inboundSchema),
    ]),
  ),
  created_at: z.number().int(),
  updated_at: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "web3_wallet": "web3Wallet",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type Web3Wallet$Outbound = {
  id?: string | undefined;
  object: string;
  web3_wallet: string;
  verification:
    | Web3WalletVerificationAdmin$Outbound
    | Web3Signature$Outbound
    | null;
  created_at: number;
  updated_at: number;
};

/** @internal */
export const Web3Wallet$outboundSchema: z.ZodType<
  Web3Wallet$Outbound,
  z.ZodTypeDef,
  Web3Wallet
> = z.object({
  id: z.string().optional(),
  object: Web3WalletObject$outboundSchema,
  web3Wallet: z.string(),
  verification: z.nullable(
    z.union([
      z.lazy(() => Web3WalletVerificationAdmin$outboundSchema),
      z.lazy(() => Web3Signature$outboundSchema),
    ]),
  ),
  createdAt: z.number().int(),
  updatedAt: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    web3Wallet: "web3_wallet",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Web3Wallet$ {
  /** @deprecated use `Web3Wallet$inboundSchema` instead. */
  export const inboundSchema = Web3Wallet$inboundSchema;
  /** @deprecated use `Web3Wallet$outboundSchema` instead. */
  export const outboundSchema = Web3Wallet$outboundSchema;
  /** @deprecated use `Web3Wallet$Outbound` instead. */
  export type Outbound = Web3Wallet$Outbound;
}

export function web3WalletToJSON(web3Wallet: Web3Wallet): string {
  return JSON.stringify(Web3Wallet$outboundSchema.parse(web3Wallet));
}

export function web3WalletFromJSON(
  jsonString: string,
): SafeParseResult<Web3Wallet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Web3Wallet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Web3Wallet' from JSON`,
  );
}
