/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AccountlessApplicationObject = {
  AccountlessApplication: "accountless_application",
} as const;
export type AccountlessApplicationObject = ClosedEnum<
  typeof AccountlessApplicationObject
>;

/**
 * Success
 */
export type AccountlessApplication = {
  object: AccountlessApplicationObject;
  publishableKey: string;
  secretKey?: string | undefined;
  claimUrl?: string | undefined;
  apiKeysUrl?: string | undefined;
};

/** @internal */
export const AccountlessApplicationObject$inboundSchema: z.ZodNativeEnum<
  typeof AccountlessApplicationObject
> = z.nativeEnum(AccountlessApplicationObject);

/** @internal */
export const AccountlessApplicationObject$outboundSchema: z.ZodNativeEnum<
  typeof AccountlessApplicationObject
> = AccountlessApplicationObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountlessApplicationObject$ {
  /** @deprecated use `AccountlessApplicationObject$inboundSchema` instead. */
  export const inboundSchema = AccountlessApplicationObject$inboundSchema;
  /** @deprecated use `AccountlessApplicationObject$outboundSchema` instead. */
  export const outboundSchema = AccountlessApplicationObject$outboundSchema;
}

/** @internal */
export const AccountlessApplication$inboundSchema: z.ZodType<
  AccountlessApplication,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: AccountlessApplicationObject$inboundSchema,
  publishable_key: z.string(),
  secret_key: z.string().optional(),
  claim_url: z.string().optional(),
  api_keys_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "publishable_key": "publishableKey",
    "secret_key": "secretKey",
    "claim_url": "claimUrl",
    "api_keys_url": "apiKeysUrl",
  });
});

/** @internal */
export type AccountlessApplication$Outbound = {
  object: string;
  publishable_key: string;
  secret_key?: string | undefined;
  claim_url?: string | undefined;
  api_keys_url?: string | undefined;
};

/** @internal */
export const AccountlessApplication$outboundSchema: z.ZodType<
  AccountlessApplication$Outbound,
  z.ZodTypeDef,
  AccountlessApplication
> = z.object({
  object: AccountlessApplicationObject$outboundSchema,
  publishableKey: z.string(),
  secretKey: z.string().optional(),
  claimUrl: z.string().optional(),
  apiKeysUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    publishableKey: "publishable_key",
    secretKey: "secret_key",
    claimUrl: "claim_url",
    apiKeysUrl: "api_keys_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountlessApplication$ {
  /** @deprecated use `AccountlessApplication$inboundSchema` instead. */
  export const inboundSchema = AccountlessApplication$inboundSchema;
  /** @deprecated use `AccountlessApplication$outboundSchema` instead. */
  export const outboundSchema = AccountlessApplication$outboundSchema;
  /** @deprecated use `AccountlessApplication$Outbound` instead. */
  export type Outbound = AccountlessApplication$Outbound;
}

export function accountlessApplicationToJSON(
  accountlessApplication: AccountlessApplication,
): string {
  return JSON.stringify(
    AccountlessApplication$outboundSchema.parse(accountlessApplication),
  );
}

export function accountlessApplicationFromJSON(
  jsonString: string,
): SafeParseResult<AccountlessApplication, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountlessApplication$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountlessApplication' from JSON`,
  );
}
