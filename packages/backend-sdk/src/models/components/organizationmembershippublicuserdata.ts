/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * An organization membership with public user data populated
 */
export type OrganizationMembershipPublicUserData = {
  userId: string;
  firstName: string | null;
  lastName: string | null;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  profileImageUrl: string | null;
  imageUrl: string;
  hasImage: boolean;
  identifier?: string | null | undefined;
};

/** @internal */
export const OrganizationMembershipPublicUserData$inboundSchema: z.ZodType<
  OrganizationMembershipPublicUserData,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string(),
  first_name: z.nullable(z.string()),
  last_name: z.nullable(z.string()),
  profile_image_url: z.nullable(z.string()),
  image_url: z.string(),
  has_image: z.boolean(),
  identifier: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "first_name": "firstName",
    "last_name": "lastName",
    "profile_image_url": "profileImageUrl",
    "image_url": "imageUrl",
    "has_image": "hasImage",
  });
});

/** @internal */
export type OrganizationMembershipPublicUserData$Outbound = {
  user_id: string;
  first_name: string | null;
  last_name: string | null;
  profile_image_url: string | null;
  image_url: string;
  has_image: boolean;
  identifier?: string | null | undefined;
};

/** @internal */
export const OrganizationMembershipPublicUserData$outboundSchema: z.ZodType<
  OrganizationMembershipPublicUserData$Outbound,
  z.ZodTypeDef,
  OrganizationMembershipPublicUserData
> = z.object({
  userId: z.string(),
  firstName: z.nullable(z.string()),
  lastName: z.nullable(z.string()),
  profileImageUrl: z.nullable(z.string()),
  imageUrl: z.string(),
  hasImage: z.boolean(),
  identifier: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    firstName: "first_name",
    lastName: "last_name",
    profileImageUrl: "profile_image_url",
    imageUrl: "image_url",
    hasImage: "has_image",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationMembershipPublicUserData$ {
  /** @deprecated use `OrganizationMembershipPublicUserData$inboundSchema` instead. */
  export const inboundSchema =
    OrganizationMembershipPublicUserData$inboundSchema;
  /** @deprecated use `OrganizationMembershipPublicUserData$outboundSchema` instead. */
  export const outboundSchema =
    OrganizationMembershipPublicUserData$outboundSchema;
  /** @deprecated use `OrganizationMembershipPublicUserData$Outbound` instead. */
  export type Outbound = OrganizationMembershipPublicUserData$Outbound;
}

export function organizationMembershipPublicUserDataToJSON(
  organizationMembershipPublicUserData: OrganizationMembershipPublicUserData,
): string {
  return JSON.stringify(
    OrganizationMembershipPublicUserData$outboundSchema.parse(
      organizationMembershipPublicUserData,
    ),
  );
}

export function organizationMembershipPublicUserDataFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationMembershipPublicUserData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OrganizationMembershipPublicUserData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationMembershipPublicUserData' from JSON`,
  );
}
