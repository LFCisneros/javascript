/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export const BlocklistIdentifierObject = {
  BlocklistIdentifier: 'blocklist_identifier',
} as const;
/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export type BlocklistIdentifierObject = ClosedEnum<typeof BlocklistIdentifierObject>;

export const BlocklistIdentifierIdentifierType = {
  EmailAddress: 'email_address',
  PhoneNumber: 'phone_number',
  Web3Wallet: 'web3_wallet',
} as const;
export type BlocklistIdentifierIdentifierType = ClosedEnum<typeof BlocklistIdentifierIdentifierType>;

export type BlocklistIdentifier = {
  /**
   * String representing the object's type. Objects of the same type share the same value.
   *
   * @remarks
   */
  object?: BlocklistIdentifierObject | undefined;
  id?: string | undefined;
  /**
   * An email address, email domain, phone number or web3 wallet.
   *
   * @remarks
   */
  identifier?: string | undefined;
  identifierType?: BlocklistIdentifierIdentifierType | undefined;
  instanceId?: string | undefined;
  /**
   * Unix timestamp of creation
   *
   * @remarks
   */
  createdAt?: number | undefined;
  /**
   * Unix timestamp of last update.
   *
   * @remarks
   */
  updatedAt?: number | undefined;
};

/** @internal */
export const BlocklistIdentifierObject$inboundSchema: z.ZodNativeEnum<typeof BlocklistIdentifierObject> =
  z.nativeEnum(BlocklistIdentifierObject);

/** @internal */
export const BlocklistIdentifierObject$outboundSchema: z.ZodNativeEnum<typeof BlocklistIdentifierObject> =
  BlocklistIdentifierObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BlocklistIdentifierObject$ {
  /** @deprecated use `BlocklistIdentifierObject$inboundSchema` instead. */
  export const inboundSchema = BlocklistIdentifierObject$inboundSchema;
  /** @deprecated use `BlocklistIdentifierObject$outboundSchema` instead. */
  export const outboundSchema = BlocklistIdentifierObject$outboundSchema;
}

/** @internal */
export const BlocklistIdentifierIdentifierType$inboundSchema: z.ZodNativeEnum<
  typeof BlocklistIdentifierIdentifierType
> = z.nativeEnum(BlocklistIdentifierIdentifierType);

/** @internal */
export const BlocklistIdentifierIdentifierType$outboundSchema: z.ZodNativeEnum<
  typeof BlocklistIdentifierIdentifierType
> = BlocklistIdentifierIdentifierType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BlocklistIdentifierIdentifierType$ {
  /** @deprecated use `BlocklistIdentifierIdentifierType$inboundSchema` instead. */
  export const inboundSchema = BlocklistIdentifierIdentifierType$inboundSchema;
  /** @deprecated use `BlocklistIdentifierIdentifierType$outboundSchema` instead. */
  export const outboundSchema = BlocklistIdentifierIdentifierType$outboundSchema;
}

/** @internal */
export const BlocklistIdentifier$inboundSchema: z.ZodType<BlocklistIdentifier, z.ZodTypeDef, unknown> = z
  .object({
    object: BlocklistIdentifierObject$inboundSchema.optional(),
    id: z.string().optional(),
    identifier: z.string().optional(),
    identifier_type: BlocklistIdentifierIdentifierType$inboundSchema.optional(),
    instance_id: z.string().optional(),
    created_at: z.number().int().optional(),
    updated_at: z.number().int().optional(),
  })
  .transform(v => {
    return remap$(v, {
      identifier_type: 'identifierType',
      instance_id: 'instanceId',
      created_at: 'createdAt',
      updated_at: 'updatedAt',
    });
  });

/** @internal */
export type BlocklistIdentifier$Outbound = {
  object?: string | undefined;
  id?: string | undefined;
  identifier?: string | undefined;
  identifier_type?: string | undefined;
  instance_id?: string | undefined;
  created_at?: number | undefined;
  updated_at?: number | undefined;
};

/** @internal */
export const BlocklistIdentifier$outboundSchema: z.ZodType<
  BlocklistIdentifier$Outbound,
  z.ZodTypeDef,
  BlocklistIdentifier
> = z
  .object({
    object: BlocklistIdentifierObject$outboundSchema.optional(),
    id: z.string().optional(),
    identifier: z.string().optional(),
    identifierType: BlocklistIdentifierIdentifierType$outboundSchema.optional(),
    instanceId: z.string().optional(),
    createdAt: z.number().int().optional(),
    updatedAt: z.number().int().optional(),
  })
  .transform(v => {
    return remap$(v, {
      identifierType: 'identifier_type',
      instanceId: 'instance_id',
      createdAt: 'created_at',
      updatedAt: 'updated_at',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BlocklistIdentifier$ {
  /** @deprecated use `BlocklistIdentifier$inboundSchema` instead. */
  export const inboundSchema = BlocklistIdentifier$inboundSchema;
  /** @deprecated use `BlocklistIdentifier$outboundSchema` instead. */
  export const outboundSchema = BlocklistIdentifier$outboundSchema;
  /** @deprecated use `BlocklistIdentifier$Outbound` instead. */
  export type Outbound = BlocklistIdentifier$Outbound;
}

export function blocklistIdentifierToJSON(blocklistIdentifier: BlocklistIdentifier): string {
  return JSON.stringify(BlocklistIdentifier$outboundSchema.parse(blocklistIdentifier));
}

export function blocklistIdentifierFromJSON(
  jsonString: string,
): SafeParseResult<BlocklistIdentifier, SDKValidationError> {
  return safeParse(
    jsonString,
    x => BlocklistIdentifier$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BlocklistIdentifier' from JSON`,
  );
}
