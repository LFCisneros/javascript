/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SessionTask = {
  key: string;
};

/** @internal */
export const SessionTask$inboundSchema: z.ZodType<
  SessionTask,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
});

/** @internal */
export type SessionTask$Outbound = {
  key: string;
};

/** @internal */
export const SessionTask$outboundSchema: z.ZodType<
  SessionTask$Outbound,
  z.ZodTypeDef,
  SessionTask
> = z.object({
  key: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionTask$ {
  /** @deprecated use `SessionTask$inboundSchema` instead. */
  export const inboundSchema = SessionTask$inboundSchema;
  /** @deprecated use `SessionTask$outboundSchema` instead. */
  export const outboundSchema = SessionTask$outboundSchema;
  /** @deprecated use `SessionTask$Outbound` instead. */
  export type Outbound = SessionTask$Outbound;
}

export function sessionTaskToJSON(sessionTask: SessionTask): string {
  return JSON.stringify(SessionTask$outboundSchema.parse(sessionTask));
}

export function sessionTaskFromJSON(
  jsonString: string,
): SafeParseResult<SessionTask, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SessionTask$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionTask' from JSON`,
  );
}
