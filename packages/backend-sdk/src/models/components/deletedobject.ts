/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

/**
 * Deleted Object
 */
export type DeletedObject = {
  object: string;
  id?: string | undefined;
  slug?: string | undefined;
  deleted: boolean;
};

/** @internal */
export const DeletedObject$inboundSchema: z.ZodType<DeletedObject, z.ZodTypeDef, unknown> = z.object({
  object: z.string(),
  id: z.string().optional(),
  slug: z.string().optional(),
  deleted: z.boolean(),
});

/** @internal */
export type DeletedObject$Outbound = {
  object: string;
  id?: string | undefined;
  slug?: string | undefined;
  deleted: boolean;
};

/** @internal */
export const DeletedObject$outboundSchema: z.ZodType<DeletedObject$Outbound, z.ZodTypeDef, DeletedObject> = z.object({
  object: z.string(),
  id: z.string().optional(),
  slug: z.string().optional(),
  deleted: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletedObject$ {
  /** @deprecated use `DeletedObject$inboundSchema` instead. */
  export const inboundSchema = DeletedObject$inboundSchema;
  /** @deprecated use `DeletedObject$outboundSchema` instead. */
  export const outboundSchema = DeletedObject$outboundSchema;
  /** @deprecated use `DeletedObject$Outbound` instead. */
  export type Outbound = DeletedObject$Outbound;
}

export function deletedObjectToJSON(deletedObject: DeletedObject): string {
  return JSON.stringify(DeletedObject$outboundSchema.parse(deletedObject));
}

export function deletedObjectFromJSON(jsonString: string): SafeParseResult<DeletedObject, SDKValidationError> {
  return safeParse(
    jsonString,
    x => DeletedObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeletedObject' from JSON`,
  );
}
