/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SignUpVerifications,
  SignUpVerifications$inboundSchema,
  SignUpVerifications$Outbound,
  SignUpVerifications$outboundSchema,
} from "./signupverifications.js";

export const SignUpObject = {
  SignUpAttempt: "sign_up_attempt",
} as const;
export type SignUpObject = ClosedEnum<typeof SignUpObject>;

export const SignUpStatus = {
  MissingRequirements: "missing_requirements",
  Complete: "complete",
  Abandoned: "abandoned",
} as const;
export type SignUpStatus = ClosedEnum<typeof SignUpStatus>;

/**
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type SignUpExternalAccount = {};

/**
 * Success
 */
export type SignUp = {
  object: SignUpObject;
  id: string;
  status: SignUpStatus;
  requiredFields: Array<string>;
  optionalFields: Array<string>;
  missingFields: Array<string>;
  unverifiedFields: Array<string>;
  verifications: SignUpVerifications;
  username: string | null;
  emailAddress: string | null;
  phoneNumber: string | null;
  web3Wallet: string | null;
  passwordEnabled: boolean;
  firstName: string | null;
  lastName: string | null;
  unsafeMetadata?: { [k: string]: any } | undefined;
  publicMetadata?: { [k: string]: any } | undefined;
  customAction: boolean;
  externalId: string | null;
  createdSessionId: string | null;
  createdUserId: string | null;
  /**
   * Unix timestamp at which the user abandoned the sign up attempt.
   *
   * @remarks
   */
  abandonAt: number;
  /**
   * Unix timestamp at which the user accepted the legal requirements.
   *
   * @remarks
   */
  legalAcceptedAt: number | null;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  externalAccount?: SignUpExternalAccount | undefined;
};

/** @internal */
export const SignUpObject$inboundSchema: z.ZodNativeEnum<typeof SignUpObject> =
  z.nativeEnum(SignUpObject);

/** @internal */
export const SignUpObject$outboundSchema: z.ZodNativeEnum<typeof SignUpObject> =
  SignUpObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignUpObject$ {
  /** @deprecated use `SignUpObject$inboundSchema` instead. */
  export const inboundSchema = SignUpObject$inboundSchema;
  /** @deprecated use `SignUpObject$outboundSchema` instead. */
  export const outboundSchema = SignUpObject$outboundSchema;
}

/** @internal */
export const SignUpStatus$inboundSchema: z.ZodNativeEnum<typeof SignUpStatus> =
  z.nativeEnum(SignUpStatus);

/** @internal */
export const SignUpStatus$outboundSchema: z.ZodNativeEnum<typeof SignUpStatus> =
  SignUpStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignUpStatus$ {
  /** @deprecated use `SignUpStatus$inboundSchema` instead. */
  export const inboundSchema = SignUpStatus$inboundSchema;
  /** @deprecated use `SignUpStatus$outboundSchema` instead. */
  export const outboundSchema = SignUpStatus$outboundSchema;
}

/** @internal */
export const SignUpExternalAccount$inboundSchema: z.ZodType<
  SignUpExternalAccount,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SignUpExternalAccount$Outbound = {};

/** @internal */
export const SignUpExternalAccount$outboundSchema: z.ZodType<
  SignUpExternalAccount$Outbound,
  z.ZodTypeDef,
  SignUpExternalAccount
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignUpExternalAccount$ {
  /** @deprecated use `SignUpExternalAccount$inboundSchema` instead. */
  export const inboundSchema = SignUpExternalAccount$inboundSchema;
  /** @deprecated use `SignUpExternalAccount$outboundSchema` instead. */
  export const outboundSchema = SignUpExternalAccount$outboundSchema;
  /** @deprecated use `SignUpExternalAccount$Outbound` instead. */
  export type Outbound = SignUpExternalAccount$Outbound;
}

export function signUpExternalAccountToJSON(
  signUpExternalAccount: SignUpExternalAccount,
): string {
  return JSON.stringify(
    SignUpExternalAccount$outboundSchema.parse(signUpExternalAccount),
  );
}

export function signUpExternalAccountFromJSON(
  jsonString: string,
): SafeParseResult<SignUpExternalAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SignUpExternalAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignUpExternalAccount' from JSON`,
  );
}

/** @internal */
export const SignUp$inboundSchema: z.ZodType<SignUp, z.ZodTypeDef, unknown> = z
  .object({
    object: SignUpObject$inboundSchema,
    id: z.string(),
    status: SignUpStatus$inboundSchema,
    required_fields: z.array(z.string()),
    optional_fields: z.array(z.string()),
    missing_fields: z.array(z.string()),
    unverified_fields: z.array(z.string()),
    verifications: SignUpVerifications$inboundSchema,
    username: z.nullable(z.string()),
    email_address: z.nullable(z.string()),
    phone_number: z.nullable(z.string()),
    web3_wallet: z.nullable(z.string()),
    password_enabled: z.boolean(),
    first_name: z.nullable(z.string()),
    last_name: z.nullable(z.string()),
    unsafe_metadata: z.record(z.any()).optional(),
    public_metadata: z.record(z.any()).optional(),
    custom_action: z.boolean(),
    external_id: z.nullable(z.string()),
    created_session_id: z.nullable(z.string()),
    created_user_id: z.nullable(z.string()),
    abandon_at: z.number().int(),
    legal_accepted_at: z.nullable(z.number().int()),
    external_account: z.lazy(() => SignUpExternalAccount$inboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "required_fields": "requiredFields",
      "optional_fields": "optionalFields",
      "missing_fields": "missingFields",
      "unverified_fields": "unverifiedFields",
      "email_address": "emailAddress",
      "phone_number": "phoneNumber",
      "web3_wallet": "web3Wallet",
      "password_enabled": "passwordEnabled",
      "first_name": "firstName",
      "last_name": "lastName",
      "unsafe_metadata": "unsafeMetadata",
      "public_metadata": "publicMetadata",
      "custom_action": "customAction",
      "external_id": "externalId",
      "created_session_id": "createdSessionId",
      "created_user_id": "createdUserId",
      "abandon_at": "abandonAt",
      "legal_accepted_at": "legalAcceptedAt",
      "external_account": "externalAccount",
    });
  });

/** @internal */
export type SignUp$Outbound = {
  object: string;
  id: string;
  status: string;
  required_fields: Array<string>;
  optional_fields: Array<string>;
  missing_fields: Array<string>;
  unverified_fields: Array<string>;
  verifications: SignUpVerifications$Outbound;
  username: string | null;
  email_address: string | null;
  phone_number: string | null;
  web3_wallet: string | null;
  password_enabled: boolean;
  first_name: string | null;
  last_name: string | null;
  unsafe_metadata?: { [k: string]: any } | undefined;
  public_metadata?: { [k: string]: any } | undefined;
  custom_action: boolean;
  external_id: string | null;
  created_session_id: string | null;
  created_user_id: string | null;
  abandon_at: number;
  legal_accepted_at: number | null;
  external_account?: SignUpExternalAccount$Outbound | undefined;
};

/** @internal */
export const SignUp$outboundSchema: z.ZodType<
  SignUp$Outbound,
  z.ZodTypeDef,
  SignUp
> = z.object({
  object: SignUpObject$outboundSchema,
  id: z.string(),
  status: SignUpStatus$outboundSchema,
  requiredFields: z.array(z.string()),
  optionalFields: z.array(z.string()),
  missingFields: z.array(z.string()),
  unverifiedFields: z.array(z.string()),
  verifications: SignUpVerifications$outboundSchema,
  username: z.nullable(z.string()),
  emailAddress: z.nullable(z.string()),
  phoneNumber: z.nullable(z.string()),
  web3Wallet: z.nullable(z.string()),
  passwordEnabled: z.boolean(),
  firstName: z.nullable(z.string()),
  lastName: z.nullable(z.string()),
  unsafeMetadata: z.record(z.any()).optional(),
  publicMetadata: z.record(z.any()).optional(),
  customAction: z.boolean(),
  externalId: z.nullable(z.string()),
  createdSessionId: z.nullable(z.string()),
  createdUserId: z.nullable(z.string()),
  abandonAt: z.number().int(),
  legalAcceptedAt: z.nullable(z.number().int()),
  externalAccount: z.lazy(() => SignUpExternalAccount$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requiredFields: "required_fields",
    optionalFields: "optional_fields",
    missingFields: "missing_fields",
    unverifiedFields: "unverified_fields",
    emailAddress: "email_address",
    phoneNumber: "phone_number",
    web3Wallet: "web3_wallet",
    passwordEnabled: "password_enabled",
    firstName: "first_name",
    lastName: "last_name",
    unsafeMetadata: "unsafe_metadata",
    publicMetadata: "public_metadata",
    customAction: "custom_action",
    externalId: "external_id",
    createdSessionId: "created_session_id",
    createdUserId: "created_user_id",
    abandonAt: "abandon_at",
    legalAcceptedAt: "legal_accepted_at",
    externalAccount: "external_account",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignUp$ {
  /** @deprecated use `SignUp$inboundSchema` instead. */
  export const inboundSchema = SignUp$inboundSchema;
  /** @deprecated use `SignUp$outboundSchema` instead. */
  export const outboundSchema = SignUp$outboundSchema;
  /** @deprecated use `SignUp$Outbound` instead. */
  export type Outbound = SignUp$Outbound;
}

export function signUpToJSON(signUp: SignUp): string {
  return JSON.stringify(SignUp$outboundSchema.parse(signUp));
}

export function signUpFromJSON(
  jsonString: string,
): SafeParseResult<SignUp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SignUp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignUp' from JSON`,
  );
}
