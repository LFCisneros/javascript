/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * String representing the object's type. Objects of the same type share the same value.
 */
export const OrganizationSettingsObject = {
  OrganizationSettings: "organization_settings",
} as const;
/**
 * String representing the object's type. Objects of the same type share the same value.
 */
export type OrganizationSettingsObject = ClosedEnum<
  typeof OrganizationSettingsObject
>;

export const DomainsEnrollmentModes = {
  ManualInvitation: "manual_invitation",
  AutomaticInvitation: "automatic_invitation",
  AutomaticSuggestion: "automatic_suggestion",
} as const;
export type DomainsEnrollmentModes = ClosedEnum<typeof DomainsEnrollmentModes>;

/**
 * Success
 */
export type OrganizationSettings = {
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: OrganizationSettingsObject;
  enabled: boolean;
  maxAllowedMemberships: number;
  maxAllowedRoles: number;
  maxAllowedPermissions: number;
  /**
   * The role key that a user will be assigned after creating an organization.
   */
  creatorRole: string;
  /**
   * The default for whether an admin can delete an organization with the Frontend API.
   */
  adminDeleteEnabled: boolean;
  domainsEnabled: boolean;
  domainsEnrollmentModes: Array<DomainsEnrollmentModes>;
  /**
   * The role key that it will be used in order to create an organization invitation or suggestion.
   */
  domainsDefaultRole: string;
};

/** @internal */
export const OrganizationSettingsObject$inboundSchema: z.ZodNativeEnum<
  typeof OrganizationSettingsObject
> = z.nativeEnum(OrganizationSettingsObject);

/** @internal */
export const OrganizationSettingsObject$outboundSchema: z.ZodNativeEnum<
  typeof OrganizationSettingsObject
> = OrganizationSettingsObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationSettingsObject$ {
  /** @deprecated use `OrganizationSettingsObject$inboundSchema` instead. */
  export const inboundSchema = OrganizationSettingsObject$inboundSchema;
  /** @deprecated use `OrganizationSettingsObject$outboundSchema` instead. */
  export const outboundSchema = OrganizationSettingsObject$outboundSchema;
}

/** @internal */
export const DomainsEnrollmentModes$inboundSchema: z.ZodNativeEnum<
  typeof DomainsEnrollmentModes
> = z.nativeEnum(DomainsEnrollmentModes);

/** @internal */
export const DomainsEnrollmentModes$outboundSchema: z.ZodNativeEnum<
  typeof DomainsEnrollmentModes
> = DomainsEnrollmentModes$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainsEnrollmentModes$ {
  /** @deprecated use `DomainsEnrollmentModes$inboundSchema` instead. */
  export const inboundSchema = DomainsEnrollmentModes$inboundSchema;
  /** @deprecated use `DomainsEnrollmentModes$outboundSchema` instead. */
  export const outboundSchema = DomainsEnrollmentModes$outboundSchema;
}

/** @internal */
export const OrganizationSettings$inboundSchema: z.ZodType<
  OrganizationSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: OrganizationSettingsObject$inboundSchema,
  enabled: z.boolean(),
  max_allowed_memberships: z.number().int(),
  max_allowed_roles: z.number().int(),
  max_allowed_permissions: z.number().int(),
  creator_role: z.string(),
  admin_delete_enabled: z.boolean(),
  domains_enabled: z.boolean(),
  domains_enrollment_modes: z.array(DomainsEnrollmentModes$inboundSchema),
  domains_default_role: z.string(),
}).transform((v) => {
  return remap$(v, {
    "max_allowed_memberships": "maxAllowedMemberships",
    "max_allowed_roles": "maxAllowedRoles",
    "max_allowed_permissions": "maxAllowedPermissions",
    "creator_role": "creatorRole",
    "admin_delete_enabled": "adminDeleteEnabled",
    "domains_enabled": "domainsEnabled",
    "domains_enrollment_modes": "domainsEnrollmentModes",
    "domains_default_role": "domainsDefaultRole",
  });
});

/** @internal */
export type OrganizationSettings$Outbound = {
  object: string;
  enabled: boolean;
  max_allowed_memberships: number;
  max_allowed_roles: number;
  max_allowed_permissions: number;
  creator_role: string;
  admin_delete_enabled: boolean;
  domains_enabled: boolean;
  domains_enrollment_modes: Array<string>;
  domains_default_role: string;
};

/** @internal */
export const OrganizationSettings$outboundSchema: z.ZodType<
  OrganizationSettings$Outbound,
  z.ZodTypeDef,
  OrganizationSettings
> = z.object({
  object: OrganizationSettingsObject$outboundSchema,
  enabled: z.boolean(),
  maxAllowedMemberships: z.number().int(),
  maxAllowedRoles: z.number().int(),
  maxAllowedPermissions: z.number().int(),
  creatorRole: z.string(),
  adminDeleteEnabled: z.boolean(),
  domainsEnabled: z.boolean(),
  domainsEnrollmentModes: z.array(DomainsEnrollmentModes$outboundSchema),
  domainsDefaultRole: z.string(),
}).transform((v) => {
  return remap$(v, {
    maxAllowedMemberships: "max_allowed_memberships",
    maxAllowedRoles: "max_allowed_roles",
    maxAllowedPermissions: "max_allowed_permissions",
    creatorRole: "creator_role",
    adminDeleteEnabled: "admin_delete_enabled",
    domainsEnabled: "domains_enabled",
    domainsEnrollmentModes: "domains_enrollment_modes",
    domainsDefaultRole: "domains_default_role",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationSettings$ {
  /** @deprecated use `OrganizationSettings$inboundSchema` instead. */
  export const inboundSchema = OrganizationSettings$inboundSchema;
  /** @deprecated use `OrganizationSettings$outboundSchema` instead. */
  export const outboundSchema = OrganizationSettings$outboundSchema;
  /** @deprecated use `OrganizationSettings$Outbound` instead. */
  export type Outbound = OrganizationSettings$Outbound;
}

export function organizationSettingsToJSON(
  organizationSettings: OrganizationSettings,
): string {
  return JSON.stringify(
    OrganizationSettings$outboundSchema.parse(organizationSettings),
  );
}

export function organizationSettingsFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationSettings' from JSON`,
  );
}
