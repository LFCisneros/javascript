/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OrganizationInvitation,
  OrganizationInvitation$inboundSchema,
  OrganizationInvitation$Outbound,
  OrganizationInvitation$outboundSchema,
} from "./organizationinvitation.js";

/**
 * A list of organization invitations
 */
export type OrganizationInvitations = {
  data: Array<OrganizationInvitation>;
  /**
   * Total number of organization invitations
   *
   * @remarks
   */
  totalCount: number;
};

/** @internal */
export const OrganizationInvitations$inboundSchema: z.ZodType<
  OrganizationInvitations,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(OrganizationInvitation$inboundSchema),
  total_count: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "total_count": "totalCount",
  });
});

/** @internal */
export type OrganizationInvitations$Outbound = {
  data: Array<OrganizationInvitation$Outbound>;
  total_count: number;
};

/** @internal */
export const OrganizationInvitations$outboundSchema: z.ZodType<
  OrganizationInvitations$Outbound,
  z.ZodTypeDef,
  OrganizationInvitations
> = z.object({
  data: z.array(OrganizationInvitation$outboundSchema),
  totalCount: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    totalCount: "total_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationInvitations$ {
  /** @deprecated use `OrganizationInvitations$inboundSchema` instead. */
  export const inboundSchema = OrganizationInvitations$inboundSchema;
  /** @deprecated use `OrganizationInvitations$outboundSchema` instead. */
  export const outboundSchema = OrganizationInvitations$outboundSchema;
  /** @deprecated use `OrganizationInvitations$Outbound` instead. */
  export type Outbound = OrganizationInvitations$Outbound;
}

export function organizationInvitationsToJSON(
  organizationInvitations: OrganizationInvitations,
): string {
  return JSON.stringify(
    OrganizationInvitations$outboundSchema.parse(organizationInvitations),
  );
}

export function organizationInvitationsFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationInvitations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationInvitations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationInvitations' from JSON`,
  );
}
