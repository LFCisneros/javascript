/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export const WaitlistEntryObject = {
  WaitlistEntry: 'waitlist_entry',
} as const;
export type WaitlistEntryObject = ClosedEnum<typeof WaitlistEntryObject>;

export const WaitlistEntryStatus = {
  Pending: 'pending',
  Invited: 'invited',
  Rejected: 'rejected',
  Completed: 'completed',
} as const;
export type WaitlistEntryStatus = ClosedEnum<typeof WaitlistEntryStatus>;

export const WaitlistEntryInvitationObject = {
  Invitation: 'invitation',
} as const;
export type WaitlistEntryInvitationObject = ClosedEnum<typeof WaitlistEntryInvitationObject>;

export const WaitlistEntryInvitationStatus = {
  Pending: 'pending',
  Accepted: 'accepted',
  Revoked: 'revoked',
  Expired: 'expired',
} as const;
export type WaitlistEntryInvitationStatus = ClosedEnum<typeof WaitlistEntryInvitationStatus>;

export type WaitlistEntryInvitation = {
  object: WaitlistEntryInvitationObject;
  id: string;
  emailAddress: string;
  publicMetadata: { [k: string]: any };
  revoked?: boolean | undefined;
  status: WaitlistEntryInvitationStatus;
  url?: string | undefined;
  /**
   * Unix timestamp of expiration.
   *
   * @remarks
   */
  expiresAt?: number | null | undefined;
  /**
   * Unix timestamp of creation.
   *
   * @remarks
   */
  createdAt: number;
  /**
   * Unix timestamp of last update.
   *
   * @remarks
   */
  updatedAt: number;
};

export type WaitlistEntry = {
  object: WaitlistEntryObject;
  id: string;
  emailAddress: string;
  status: WaitlistEntryStatus;
  /**
   * Indicates if the waitlist entry is locked. Locked entries are being processed in a batch action and are unavailable for other actions.
   *
   * @remarks
   */
  isLocked?: boolean | undefined;
  /**
   * Unix timestamp of creation.
   *
   * @remarks
   */
  createdAt: number;
  /**
   * Unix timestamp of last update.
   *
   * @remarks
   */
  updatedAt: number;
  invitation?: WaitlistEntryInvitation | null | undefined;
};

/** @internal */
export const WaitlistEntryObject$inboundSchema: z.ZodNativeEnum<typeof WaitlistEntryObject> =
  z.nativeEnum(WaitlistEntryObject);

/** @internal */
export const WaitlistEntryObject$outboundSchema: z.ZodNativeEnum<typeof WaitlistEntryObject> =
  WaitlistEntryObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WaitlistEntryObject$ {
  /** @deprecated use `WaitlistEntryObject$inboundSchema` instead. */
  export const inboundSchema = WaitlistEntryObject$inboundSchema;
  /** @deprecated use `WaitlistEntryObject$outboundSchema` instead. */
  export const outboundSchema = WaitlistEntryObject$outboundSchema;
}

/** @internal */
export const WaitlistEntryStatus$inboundSchema: z.ZodNativeEnum<typeof WaitlistEntryStatus> =
  z.nativeEnum(WaitlistEntryStatus);

/** @internal */
export const WaitlistEntryStatus$outboundSchema: z.ZodNativeEnum<typeof WaitlistEntryStatus> =
  WaitlistEntryStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WaitlistEntryStatus$ {
  /** @deprecated use `WaitlistEntryStatus$inboundSchema` instead. */
  export const inboundSchema = WaitlistEntryStatus$inboundSchema;
  /** @deprecated use `WaitlistEntryStatus$outboundSchema` instead. */
  export const outboundSchema = WaitlistEntryStatus$outboundSchema;
}

/** @internal */
export const WaitlistEntryInvitationObject$inboundSchema: z.ZodNativeEnum<typeof WaitlistEntryInvitationObject> =
  z.nativeEnum(WaitlistEntryInvitationObject);

/** @internal */
export const WaitlistEntryInvitationObject$outboundSchema: z.ZodNativeEnum<typeof WaitlistEntryInvitationObject> =
  WaitlistEntryInvitationObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WaitlistEntryInvitationObject$ {
  /** @deprecated use `WaitlistEntryInvitationObject$inboundSchema` instead. */
  export const inboundSchema = WaitlistEntryInvitationObject$inboundSchema;
  /** @deprecated use `WaitlistEntryInvitationObject$outboundSchema` instead. */
  export const outboundSchema = WaitlistEntryInvitationObject$outboundSchema;
}

/** @internal */
export const WaitlistEntryInvitationStatus$inboundSchema: z.ZodNativeEnum<typeof WaitlistEntryInvitationStatus> =
  z.nativeEnum(WaitlistEntryInvitationStatus);

/** @internal */
export const WaitlistEntryInvitationStatus$outboundSchema: z.ZodNativeEnum<typeof WaitlistEntryInvitationStatus> =
  WaitlistEntryInvitationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WaitlistEntryInvitationStatus$ {
  /** @deprecated use `WaitlistEntryInvitationStatus$inboundSchema` instead. */
  export const inboundSchema = WaitlistEntryInvitationStatus$inboundSchema;
  /** @deprecated use `WaitlistEntryInvitationStatus$outboundSchema` instead. */
  export const outboundSchema = WaitlistEntryInvitationStatus$outboundSchema;
}

/** @internal */
export const WaitlistEntryInvitation$inboundSchema: z.ZodType<WaitlistEntryInvitation, z.ZodTypeDef, unknown> = z
  .object({
    object: WaitlistEntryInvitationObject$inboundSchema,
    id: z.string(),
    email_address: z.string(),
    public_metadata: z.record(z.any()),
    revoked: z.boolean().optional(),
    status: WaitlistEntryInvitationStatus$inboundSchema,
    url: z.string().optional(),
    expires_at: z.nullable(z.number().int()).optional(),
    created_at: z.number().int(),
    updated_at: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      email_address: 'emailAddress',
      public_metadata: 'publicMetadata',
      expires_at: 'expiresAt',
      created_at: 'createdAt',
      updated_at: 'updatedAt',
    });
  });

/** @internal */
export type WaitlistEntryInvitation$Outbound = {
  object: string;
  id: string;
  email_address: string;
  public_metadata: { [k: string]: any };
  revoked?: boolean | undefined;
  status: string;
  url?: string | undefined;
  expires_at?: number | null | undefined;
  created_at: number;
  updated_at: number;
};

/** @internal */
export const WaitlistEntryInvitation$outboundSchema: z.ZodType<
  WaitlistEntryInvitation$Outbound,
  z.ZodTypeDef,
  WaitlistEntryInvitation
> = z
  .object({
    object: WaitlistEntryInvitationObject$outboundSchema,
    id: z.string(),
    emailAddress: z.string(),
    publicMetadata: z.record(z.any()),
    revoked: z.boolean().optional(),
    status: WaitlistEntryInvitationStatus$outboundSchema,
    url: z.string().optional(),
    expiresAt: z.nullable(z.number().int()).optional(),
    createdAt: z.number().int(),
    updatedAt: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      emailAddress: 'email_address',
      publicMetadata: 'public_metadata',
      expiresAt: 'expires_at',
      createdAt: 'created_at',
      updatedAt: 'updated_at',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WaitlistEntryInvitation$ {
  /** @deprecated use `WaitlistEntryInvitation$inboundSchema` instead. */
  export const inboundSchema = WaitlistEntryInvitation$inboundSchema;
  /** @deprecated use `WaitlistEntryInvitation$outboundSchema` instead. */
  export const outboundSchema = WaitlistEntryInvitation$outboundSchema;
  /** @deprecated use `WaitlistEntryInvitation$Outbound` instead. */
  export type Outbound = WaitlistEntryInvitation$Outbound;
}

export function waitlistEntryInvitationToJSON(waitlistEntryInvitation: WaitlistEntryInvitation): string {
  return JSON.stringify(WaitlistEntryInvitation$outboundSchema.parse(waitlistEntryInvitation));
}

export function waitlistEntryInvitationFromJSON(
  jsonString: string,
): SafeParseResult<WaitlistEntryInvitation, SDKValidationError> {
  return safeParse(
    jsonString,
    x => WaitlistEntryInvitation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WaitlistEntryInvitation' from JSON`,
  );
}

/** @internal */
export const WaitlistEntry$inboundSchema: z.ZodType<WaitlistEntry, z.ZodTypeDef, unknown> = z
  .object({
    object: WaitlistEntryObject$inboundSchema,
    id: z.string(),
    email_address: z.string(),
    status: WaitlistEntryStatus$inboundSchema,
    is_locked: z.boolean().optional(),
    created_at: z.number().int(),
    updated_at: z.number().int(),
    invitation: z.nullable(z.lazy(() => WaitlistEntryInvitation$inboundSchema)).optional(),
  })
  .transform(v => {
    return remap$(v, {
      email_address: 'emailAddress',
      is_locked: 'isLocked',
      created_at: 'createdAt',
      updated_at: 'updatedAt',
    });
  });

/** @internal */
export type WaitlistEntry$Outbound = {
  object: string;
  id: string;
  email_address: string;
  status: string;
  is_locked?: boolean | undefined;
  created_at: number;
  updated_at: number;
  invitation?: WaitlistEntryInvitation$Outbound | null | undefined;
};

/** @internal */
export const WaitlistEntry$outboundSchema: z.ZodType<WaitlistEntry$Outbound, z.ZodTypeDef, WaitlistEntry> = z
  .object({
    object: WaitlistEntryObject$outboundSchema,
    id: z.string(),
    emailAddress: z.string(),
    status: WaitlistEntryStatus$outboundSchema,
    isLocked: z.boolean().optional(),
    createdAt: z.number().int(),
    updatedAt: z.number().int(),
    invitation: z.nullable(z.lazy(() => WaitlistEntryInvitation$outboundSchema)).optional(),
  })
  .transform(v => {
    return remap$(v, {
      emailAddress: 'email_address',
      isLocked: 'is_locked',
      createdAt: 'created_at',
      updatedAt: 'updated_at',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WaitlistEntry$ {
  /** @deprecated use `WaitlistEntry$inboundSchema` instead. */
  export const inboundSchema = WaitlistEntry$inboundSchema;
  /** @deprecated use `WaitlistEntry$outboundSchema` instead. */
  export const outboundSchema = WaitlistEntry$outboundSchema;
  /** @deprecated use `WaitlistEntry$Outbound` instead. */
  export type Outbound = WaitlistEntry$Outbound;
}

export function waitlistEntryToJSON(waitlistEntry: WaitlistEntry): string {
  return JSON.stringify(WaitlistEntry$outboundSchema.parse(waitlistEntry));
}

export function waitlistEntryFromJSON(jsonString: string): SafeParseResult<WaitlistEntry, SDKValidationError> {
  return safeParse(
    jsonString,
    x => WaitlistEntry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WaitlistEntry' from JSON`,
  );
}
