/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OrganizationInvitationPublicOrganizationData,
  OrganizationInvitationPublicOrganizationData$inboundSchema,
  OrganizationInvitationPublicOrganizationData$Outbound,
  OrganizationInvitationPublicOrganizationData$outboundSchema,
} from "./organizationinvitationpublicorganizationdata.js";

/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export const OrganizationInvitationWithPublicOrganizationDataObject = {
  OrganizationInvitation: "organization_invitation",
} as const;
/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export type OrganizationInvitationWithPublicOrganizationDataObject = ClosedEnum<
  typeof OrganizationInvitationWithPublicOrganizationDataObject
>;

/**
 * An organization invitation with public organization data populated
 */
export type OrganizationInvitationWithPublicOrganizationData = {
  /**
   * String representing the object's type. Objects of the same type share the same value.
   *
   * @remarks
   */
  object: OrganizationInvitationWithPublicOrganizationDataObject;
  id: string;
  emailAddress: string;
  role: string;
  roleName: string;
  organizationId?: string | undefined;
  status?: string | undefined;
  publicMetadata: { [k: string]: any };
  privateMetadata?: { [k: string]: any } | undefined;
  url: string | null;
  /**
   * Unix timestamp of expiration.
   */
  expiresAt: number | null;
  /**
   * Unix timestamp of creation.
   */
  createdAt: number;
  /**
   * Unix timestamp of last update.
   */
  updatedAt: number;
  publicOrganizationData?:
    | OrganizationInvitationPublicOrganizationData
    | undefined;
};

/** @internal */
export const OrganizationInvitationWithPublicOrganizationDataObject$inboundSchema:
  z.ZodNativeEnum<
    typeof OrganizationInvitationWithPublicOrganizationDataObject
  > = z.nativeEnum(OrganizationInvitationWithPublicOrganizationDataObject);

/** @internal */
export const OrganizationInvitationWithPublicOrganizationDataObject$outboundSchema:
  z.ZodNativeEnum<
    typeof OrganizationInvitationWithPublicOrganizationDataObject
  > = OrganizationInvitationWithPublicOrganizationDataObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationInvitationWithPublicOrganizationDataObject$ {
  /** @deprecated use `OrganizationInvitationWithPublicOrganizationDataObject$inboundSchema` instead. */
  export const inboundSchema =
    OrganizationInvitationWithPublicOrganizationDataObject$inboundSchema;
  /** @deprecated use `OrganizationInvitationWithPublicOrganizationDataObject$outboundSchema` instead. */
  export const outboundSchema =
    OrganizationInvitationWithPublicOrganizationDataObject$outboundSchema;
}

/** @internal */
export const OrganizationInvitationWithPublicOrganizationData$inboundSchema:
  z.ZodType<
    OrganizationInvitationWithPublicOrganizationData,
    z.ZodTypeDef,
    unknown
  > = z.object({
    object:
      OrganizationInvitationWithPublicOrganizationDataObject$inboundSchema,
    id: z.string(),
    email_address: z.string(),
    role: z.string(),
    role_name: z.string(),
    organization_id: z.string().optional(),
    status: z.string().optional(),
    public_metadata: z.record(z.any()),
    private_metadata: z.record(z.any()).optional(),
    url: z.nullable(z.string()),
    expires_at: z.nullable(z.number().int()),
    created_at: z.number().int(),
    updated_at: z.number().int(),
    public_organization_data:
      OrganizationInvitationPublicOrganizationData$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "email_address": "emailAddress",
      "role_name": "roleName",
      "organization_id": "organizationId",
      "public_metadata": "publicMetadata",
      "private_metadata": "privateMetadata",
      "expires_at": "expiresAt",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "public_organization_data": "publicOrganizationData",
    });
  });

/** @internal */
export type OrganizationInvitationWithPublicOrganizationData$Outbound = {
  object: string;
  id: string;
  email_address: string;
  role: string;
  role_name: string;
  organization_id?: string | undefined;
  status?: string | undefined;
  public_metadata: { [k: string]: any };
  private_metadata?: { [k: string]: any } | undefined;
  url: string | null;
  expires_at: number | null;
  created_at: number;
  updated_at: number;
  public_organization_data?:
    | OrganizationInvitationPublicOrganizationData$Outbound
    | undefined;
};

/** @internal */
export const OrganizationInvitationWithPublicOrganizationData$outboundSchema:
  z.ZodType<
    OrganizationInvitationWithPublicOrganizationData$Outbound,
    z.ZodTypeDef,
    OrganizationInvitationWithPublicOrganizationData
  > = z.object({
    object:
      OrganizationInvitationWithPublicOrganizationDataObject$outboundSchema,
    id: z.string(),
    emailAddress: z.string(),
    role: z.string(),
    roleName: z.string(),
    organizationId: z.string().optional(),
    status: z.string().optional(),
    publicMetadata: z.record(z.any()),
    privateMetadata: z.record(z.any()).optional(),
    url: z.nullable(z.string()),
    expiresAt: z.nullable(z.number().int()),
    createdAt: z.number().int(),
    updatedAt: z.number().int(),
    publicOrganizationData:
      OrganizationInvitationPublicOrganizationData$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      emailAddress: "email_address",
      roleName: "role_name",
      organizationId: "organization_id",
      publicMetadata: "public_metadata",
      privateMetadata: "private_metadata",
      expiresAt: "expires_at",
      createdAt: "created_at",
      updatedAt: "updated_at",
      publicOrganizationData: "public_organization_data",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationInvitationWithPublicOrganizationData$ {
  /** @deprecated use `OrganizationInvitationWithPublicOrganizationData$inboundSchema` instead. */
  export const inboundSchema =
    OrganizationInvitationWithPublicOrganizationData$inboundSchema;
  /** @deprecated use `OrganizationInvitationWithPublicOrganizationData$outboundSchema` instead. */
  export const outboundSchema =
    OrganizationInvitationWithPublicOrganizationData$outboundSchema;
  /** @deprecated use `OrganizationInvitationWithPublicOrganizationData$Outbound` instead. */
  export type Outbound =
    OrganizationInvitationWithPublicOrganizationData$Outbound;
}

export function organizationInvitationWithPublicOrganizationDataToJSON(
  organizationInvitationWithPublicOrganizationData:
    OrganizationInvitationWithPublicOrganizationData,
): string {
  return JSON.stringify(
    OrganizationInvitationWithPublicOrganizationData$outboundSchema.parse(
      organizationInvitationWithPublicOrganizationData,
    ),
  );
}

export function organizationInvitationWithPublicOrganizationDataFromJSON(
  jsonString: string,
): SafeParseResult<
  OrganizationInvitationWithPublicOrganizationData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OrganizationInvitationWithPublicOrganizationData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OrganizationInvitationWithPublicOrganizationData' from JSON`,
  );
}
