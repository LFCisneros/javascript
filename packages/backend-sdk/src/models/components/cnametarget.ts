/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CNameTarget = {
  host: string;
  value: string;
  /**
   * Denotes whether this CNAME target is required to be set in order for the domain to be considered deployed.
   *
   * @remarks
   */
  required: boolean;
};

/** @internal */
export const CNameTarget$inboundSchema: z.ZodType<
  CNameTarget,
  z.ZodTypeDef,
  unknown
> = z.object({
  host: z.string(),
  value: z.string(),
  required: z.boolean(),
});

/** @internal */
export type CNameTarget$Outbound = {
  host: string;
  value: string;
  required: boolean;
};

/** @internal */
export const CNameTarget$outboundSchema: z.ZodType<
  CNameTarget$Outbound,
  z.ZodTypeDef,
  CNameTarget
> = z.object({
  host: z.string(),
  value: z.string(),
  required: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CNameTarget$ {
  /** @deprecated use `CNameTarget$inboundSchema` instead. */
  export const inboundSchema = CNameTarget$inboundSchema;
  /** @deprecated use `CNameTarget$outboundSchema` instead. */
  export const outboundSchema = CNameTarget$outboundSchema;
  /** @deprecated use `CNameTarget$Outbound` instead. */
  export type Outbound = CNameTarget$Outbound;
}

export function cNameTargetToJSON(cNameTarget: CNameTarget): string {
  return JSON.stringify(CNameTarget$outboundSchema.parse(cNameTarget));
}

export function cNameTargetFromJSON(
  jsonString: string,
): SafeParseResult<CNameTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CNameTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CNameTarget' from JSON`,
  );
}
