/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * String representing the object's type. Objects of the same type share the same value.
 */
export const CookiesObject = {
  Cookies: "cookies",
} as const;
/**
 * String representing the object's type. Objects of the same type share the same value.
 */
export type CookiesObject = ClosedEnum<typeof CookiesObject>;

export type Cookies = {
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: CookiesObject;
  /**
   * Array of cookie directives.
   */
  cookies: Array<string>;
};

/** @internal */
export const CookiesObject$inboundSchema: z.ZodNativeEnum<
  typeof CookiesObject
> = z.nativeEnum(CookiesObject);

/** @internal */
export const CookiesObject$outboundSchema: z.ZodNativeEnum<
  typeof CookiesObject
> = CookiesObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CookiesObject$ {
  /** @deprecated use `CookiesObject$inboundSchema` instead. */
  export const inboundSchema = CookiesObject$inboundSchema;
  /** @deprecated use `CookiesObject$outboundSchema` instead. */
  export const outboundSchema = CookiesObject$outboundSchema;
}

/** @internal */
export const Cookies$inboundSchema: z.ZodType<Cookies, z.ZodTypeDef, unknown> =
  z.object({
    object: CookiesObject$inboundSchema,
    cookies: z.array(z.string()),
  });

/** @internal */
export type Cookies$Outbound = {
  object: string;
  cookies: Array<string>;
};

/** @internal */
export const Cookies$outboundSchema: z.ZodType<
  Cookies$Outbound,
  z.ZodTypeDef,
  Cookies
> = z.object({
  object: CookiesObject$outboundSchema,
  cookies: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Cookies$ {
  /** @deprecated use `Cookies$inboundSchema` instead. */
  export const inboundSchema = Cookies$inboundSchema;
  /** @deprecated use `Cookies$outboundSchema` instead. */
  export const outboundSchema = Cookies$outboundSchema;
  /** @deprecated use `Cookies$Outbound` instead. */
  export type Outbound = Cookies$Outbound;
}

export function cookiesToJSON(cookies: Cookies): string {
  return JSON.stringify(Cookies$outboundSchema.parse(cookies));
}

export function cookiesFromJSON(
  jsonString: string,
): SafeParseResult<Cookies, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Cookies$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Cookies' from JSON`,
  );
}
