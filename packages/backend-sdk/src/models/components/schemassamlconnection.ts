/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SAMLConnectionAttributeMapping,
  SAMLConnectionAttributeMapping$inboundSchema,
  SAMLConnectionAttributeMapping$Outbound,
  SAMLConnectionAttributeMapping$outboundSchema,
} from "./samlconnectionattributemapping.js";

export const SchemasSAMLConnectionObject = {
  SamlConnection: "saml_connection",
} as const;
export type SchemasSAMLConnectionObject = ClosedEnum<
  typeof SchemasSAMLConnectionObject
>;

export type SchemasSAMLConnection = {
  object: SchemasSAMLConnectionObject;
  id: string;
  name: string;
  domain: string;
  idpEntityId: string | null;
  idpSsoUrl: string | null;
  idpCertificate: string | null;
  idpMetadataUrl?: string | null | undefined;
  idpMetadata?: string | null | undefined;
  acsUrl: string;
  spEntityId: string;
  spMetadataUrl: string;
  organizationId?: string | null | undefined;
  attributeMapping?: SAMLConnectionAttributeMapping | undefined;
  active: boolean;
  provider: string;
  userCount: number;
  syncUserAttributes: boolean;
  allowSubdomains?: boolean | undefined;
  allowIdpInitiated?: boolean | undefined;
  disableAdditionalIdentifications?: boolean | undefined;
  /**
   * Unix timestamp of creation.
   *
   * @remarks
   */
  createdAt: number;
  /**
   * Unix timestamp of last update.
   *
   * @remarks
   */
  updatedAt: number;
};

/** @internal */
export const SchemasSAMLConnectionObject$inboundSchema: z.ZodNativeEnum<
  typeof SchemasSAMLConnectionObject
> = z.nativeEnum(SchemasSAMLConnectionObject);

/** @internal */
export const SchemasSAMLConnectionObject$outboundSchema: z.ZodNativeEnum<
  typeof SchemasSAMLConnectionObject
> = SchemasSAMLConnectionObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasSAMLConnectionObject$ {
  /** @deprecated use `SchemasSAMLConnectionObject$inboundSchema` instead. */
  export const inboundSchema = SchemasSAMLConnectionObject$inboundSchema;
  /** @deprecated use `SchemasSAMLConnectionObject$outboundSchema` instead. */
  export const outboundSchema = SchemasSAMLConnectionObject$outboundSchema;
}

/** @internal */
export const SchemasSAMLConnection$inboundSchema: z.ZodType<
  SchemasSAMLConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: SchemasSAMLConnectionObject$inboundSchema,
  id: z.string(),
  name: z.string(),
  domain: z.string(),
  idp_entity_id: z.nullable(z.string()),
  idp_sso_url: z.nullable(z.string()),
  idp_certificate: z.nullable(z.string()),
  idp_metadata_url: z.nullable(z.string()).optional(),
  idp_metadata: z.nullable(z.string()).optional(),
  acs_url: z.string(),
  sp_entity_id: z.string(),
  sp_metadata_url: z.string(),
  organization_id: z.nullable(z.string()).optional(),
  attribute_mapping: SAMLConnectionAttributeMapping$inboundSchema.optional(),
  active: z.boolean(),
  provider: z.string(),
  user_count: z.number().int(),
  sync_user_attributes: z.boolean(),
  allow_subdomains: z.boolean().optional(),
  allow_idp_initiated: z.boolean().optional(),
  disable_additional_identifications: z.boolean().optional(),
  created_at: z.number().int(),
  updated_at: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "idp_entity_id": "idpEntityId",
    "idp_sso_url": "idpSsoUrl",
    "idp_certificate": "idpCertificate",
    "idp_metadata_url": "idpMetadataUrl",
    "idp_metadata": "idpMetadata",
    "acs_url": "acsUrl",
    "sp_entity_id": "spEntityId",
    "sp_metadata_url": "spMetadataUrl",
    "organization_id": "organizationId",
    "attribute_mapping": "attributeMapping",
    "user_count": "userCount",
    "sync_user_attributes": "syncUserAttributes",
    "allow_subdomains": "allowSubdomains",
    "allow_idp_initiated": "allowIdpInitiated",
    "disable_additional_identifications": "disableAdditionalIdentifications",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type SchemasSAMLConnection$Outbound = {
  object: string;
  id: string;
  name: string;
  domain: string;
  idp_entity_id: string | null;
  idp_sso_url: string | null;
  idp_certificate: string | null;
  idp_metadata_url?: string | null | undefined;
  idp_metadata?: string | null | undefined;
  acs_url: string;
  sp_entity_id: string;
  sp_metadata_url: string;
  organization_id?: string | null | undefined;
  attribute_mapping?: SAMLConnectionAttributeMapping$Outbound | undefined;
  active: boolean;
  provider: string;
  user_count: number;
  sync_user_attributes: boolean;
  allow_subdomains?: boolean | undefined;
  allow_idp_initiated?: boolean | undefined;
  disable_additional_identifications?: boolean | undefined;
  created_at: number;
  updated_at: number;
};

/** @internal */
export const SchemasSAMLConnection$outboundSchema: z.ZodType<
  SchemasSAMLConnection$Outbound,
  z.ZodTypeDef,
  SchemasSAMLConnection
> = z.object({
  object: SchemasSAMLConnectionObject$outboundSchema,
  id: z.string(),
  name: z.string(),
  domain: z.string(),
  idpEntityId: z.nullable(z.string()),
  idpSsoUrl: z.nullable(z.string()),
  idpCertificate: z.nullable(z.string()),
  idpMetadataUrl: z.nullable(z.string()).optional(),
  idpMetadata: z.nullable(z.string()).optional(),
  acsUrl: z.string(),
  spEntityId: z.string(),
  spMetadataUrl: z.string(),
  organizationId: z.nullable(z.string()).optional(),
  attributeMapping: SAMLConnectionAttributeMapping$outboundSchema.optional(),
  active: z.boolean(),
  provider: z.string(),
  userCount: z.number().int(),
  syncUserAttributes: z.boolean(),
  allowSubdomains: z.boolean().optional(),
  allowIdpInitiated: z.boolean().optional(),
  disableAdditionalIdentifications: z.boolean().optional(),
  createdAt: z.number().int(),
  updatedAt: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    idpEntityId: "idp_entity_id",
    idpSsoUrl: "idp_sso_url",
    idpCertificate: "idp_certificate",
    idpMetadataUrl: "idp_metadata_url",
    idpMetadata: "idp_metadata",
    acsUrl: "acs_url",
    spEntityId: "sp_entity_id",
    spMetadataUrl: "sp_metadata_url",
    organizationId: "organization_id",
    attributeMapping: "attribute_mapping",
    userCount: "user_count",
    syncUserAttributes: "sync_user_attributes",
    allowSubdomains: "allow_subdomains",
    allowIdpInitiated: "allow_idp_initiated",
    disableAdditionalIdentifications: "disable_additional_identifications",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasSAMLConnection$ {
  /** @deprecated use `SchemasSAMLConnection$inboundSchema` instead. */
  export const inboundSchema = SchemasSAMLConnection$inboundSchema;
  /** @deprecated use `SchemasSAMLConnection$outboundSchema` instead. */
  export const outboundSchema = SchemasSAMLConnection$outboundSchema;
  /** @deprecated use `SchemasSAMLConnection$Outbound` instead. */
  export type Outbound = SchemasSAMLConnection$Outbound;
}

export function schemasSAMLConnectionToJSON(
  schemasSAMLConnection: SchemasSAMLConnection,
): string {
  return JSON.stringify(
    SchemasSAMLConnection$outboundSchema.parse(schemasSAMLConnection),
  );
}

export function schemasSAMLConnectionFromJSON(
  jsonString: string,
): SafeParseResult<SchemasSAMLConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SchemasSAMLConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SchemasSAMLConnection' from JSON`,
  );
}
