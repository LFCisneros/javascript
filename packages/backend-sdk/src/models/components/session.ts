/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SessionActivityResponse,
  SessionActivityResponse$inboundSchema,
  SessionActivityResponse$Outbound,
  SessionActivityResponse$outboundSchema,
} from "./sessionactivityresponse.js";

/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export const SessionObject = {
  Session: "session",
} as const;
/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export type SessionObject = ClosedEnum<typeof SessionObject>;

export type Actor = {};

export const Status = {
  Active: "active",
  Revoked: "revoked",
  Ended: "ended",
  Expired: "expired",
  Removed: "removed",
  Abandoned: "abandoned",
  Replaced: "replaced",
} as const;
export type Status = ClosedEnum<typeof Status>;

export type Session = {
  /**
   * String representing the object's type. Objects of the same type share the same value.
   *
   * @remarks
   */
  object: SessionObject;
  id: string;
  userId: string;
  clientId: string;
  actor?: Actor | null | undefined;
  status: Status;
  lastActiveOrganizationId?: string | null | undefined;
  lastActiveAt: number;
  latestActivity?: SessionActivityResponse | null | undefined;
  /**
   * Unix timestamp of expiration.
   *
   * @remarks
   */
  expireAt: number;
  /**
   * Unix timestamp of abandonment.
   *
   * @remarks
   */
  abandonAt: number;
  /**
   * Unix timestamp of last update.
   *
   * @remarks
   */
  updatedAt: number;
  /**
   * Unix timestamp of creation.
   *
   * @remarks
   */
  createdAt: number;
};

/** @internal */
export const SessionObject$inboundSchema: z.ZodNativeEnum<
  typeof SessionObject
> = z.nativeEnum(SessionObject);

/** @internal */
export const SessionObject$outboundSchema: z.ZodNativeEnum<
  typeof SessionObject
> = SessionObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionObject$ {
  /** @deprecated use `SessionObject$inboundSchema` instead. */
  export const inboundSchema = SessionObject$inboundSchema;
  /** @deprecated use `SessionObject$outboundSchema` instead. */
  export const outboundSchema = SessionObject$outboundSchema;
}

/** @internal */
export const Actor$inboundSchema: z.ZodType<Actor, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Actor$Outbound = {};

/** @internal */
export const Actor$outboundSchema: z.ZodType<
  Actor$Outbound,
  z.ZodTypeDef,
  Actor
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Actor$ {
  /** @deprecated use `Actor$inboundSchema` instead. */
  export const inboundSchema = Actor$inboundSchema;
  /** @deprecated use `Actor$outboundSchema` instead. */
  export const outboundSchema = Actor$outboundSchema;
  /** @deprecated use `Actor$Outbound` instead. */
  export type Outbound = Actor$Outbound;
}

export function actorToJSON(actor: Actor): string {
  return JSON.stringify(Actor$outboundSchema.parse(actor));
}

export function actorFromJSON(
  jsonString: string,
): SafeParseResult<Actor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Actor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Actor' from JSON`,
  );
}

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const Session$inboundSchema: z.ZodType<Session, z.ZodTypeDef, unknown> =
  z.object({
    object: SessionObject$inboundSchema,
    id: z.string(),
    user_id: z.string(),
    client_id: z.string(),
    actor: z.nullable(z.lazy(() => Actor$inboundSchema)).optional(),
    status: Status$inboundSchema,
    last_active_organization_id: z.nullable(z.string()).optional(),
    last_active_at: z.number().int(),
    latest_activity: z.nullable(SessionActivityResponse$inboundSchema)
      .optional(),
    expire_at: z.number().int(),
    abandon_at: z.number().int(),
    updated_at: z.number().int(),
    created_at: z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      "user_id": "userId",
      "client_id": "clientId",
      "last_active_organization_id": "lastActiveOrganizationId",
      "last_active_at": "lastActiveAt",
      "latest_activity": "latestActivity",
      "expire_at": "expireAt",
      "abandon_at": "abandonAt",
      "updated_at": "updatedAt",
      "created_at": "createdAt",
    });
  });

/** @internal */
export type Session$Outbound = {
  object: string;
  id: string;
  user_id: string;
  client_id: string;
  actor?: Actor$Outbound | null | undefined;
  status: string;
  last_active_organization_id?: string | null | undefined;
  last_active_at: number;
  latest_activity?: SessionActivityResponse$Outbound | null | undefined;
  expire_at: number;
  abandon_at: number;
  updated_at: number;
  created_at: number;
};

/** @internal */
export const Session$outboundSchema: z.ZodType<
  Session$Outbound,
  z.ZodTypeDef,
  Session
> = z.object({
  object: SessionObject$outboundSchema,
  id: z.string(),
  userId: z.string(),
  clientId: z.string(),
  actor: z.nullable(z.lazy(() => Actor$outboundSchema)).optional(),
  status: Status$outboundSchema,
  lastActiveOrganizationId: z.nullable(z.string()).optional(),
  lastActiveAt: z.number().int(),
  latestActivity: z.nullable(SessionActivityResponse$outboundSchema).optional(),
  expireAt: z.number().int(),
  abandonAt: z.number().int(),
  updatedAt: z.number().int(),
  createdAt: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    clientId: "client_id",
    lastActiveOrganizationId: "last_active_organization_id",
    lastActiveAt: "last_active_at",
    latestActivity: "latest_activity",
    expireAt: "expire_at",
    abandonAt: "abandon_at",
    updatedAt: "updated_at",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Session$ {
  /** @deprecated use `Session$inboundSchema` instead. */
  export const inboundSchema = Session$inboundSchema;
  /** @deprecated use `Session$outboundSchema` instead. */
  export const outboundSchema = Session$outboundSchema;
  /** @deprecated use `Session$Outbound` instead. */
  export type Outbound = Session$Outbound;
}

export function sessionToJSON(session: Session): string {
  return JSON.stringify(Session$outboundSchema.parse(session));
}

export function sessionFromJSON(
  jsonString: string,
): SafeParseResult<Session, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Session$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Session' from JSON`,
  );
}
