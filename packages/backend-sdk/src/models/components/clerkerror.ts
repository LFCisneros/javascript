/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type Meta = {};

export type ClerkError = {
  message: string;
  longMessage: string;
  code: string;
  meta?: Meta | undefined;
  clerkTraceId?: string | undefined;
};

/** @internal */
export const Meta$inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type Meta$Outbound = {};

/** @internal */
export const Meta$outboundSchema: z.ZodType<Meta$Outbound, z.ZodTypeDef, Meta> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Meta$ {
  /** @deprecated use `Meta$inboundSchema` instead. */
  export const inboundSchema = Meta$inboundSchema;
  /** @deprecated use `Meta$outboundSchema` instead. */
  export const outboundSchema = Meta$outboundSchema;
  /** @deprecated use `Meta$Outbound` instead. */
  export type Outbound = Meta$Outbound;
}

export function metaToJSON(meta: Meta): string {
  return JSON.stringify(Meta$outboundSchema.parse(meta));
}

export function metaFromJSON(jsonString: string): SafeParseResult<Meta, SDKValidationError> {
  return safeParse(jsonString, x => Meta$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Meta' from JSON`);
}

/** @internal */
export const ClerkError$inboundSchema: z.ZodType<ClerkError, z.ZodTypeDef, unknown> = z
  .object({
    message: z.string(),
    long_message: z.string(),
    code: z.string(),
    meta: z.lazy(() => Meta$inboundSchema).optional(),
    clerk_trace_id: z.string().optional(),
  })
  .transform(v => {
    return remap$(v, {
      long_message: 'longMessage',
      clerk_trace_id: 'clerkTraceId',
    });
  });

/** @internal */
export type ClerkError$Outbound = {
  message: string;
  long_message: string;
  code: string;
  meta?: Meta$Outbound | undefined;
  clerk_trace_id?: string | undefined;
};

/** @internal */
export const ClerkError$outboundSchema: z.ZodType<ClerkError$Outbound, z.ZodTypeDef, ClerkError> = z
  .object({
    message: z.string(),
    longMessage: z.string(),
    code: z.string(),
    meta: z.lazy(() => Meta$outboundSchema).optional(),
    clerkTraceId: z.string().optional(),
  })
  .transform(v => {
    return remap$(v, {
      longMessage: 'long_message',
      clerkTraceId: 'clerk_trace_id',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClerkError$ {
  /** @deprecated use `ClerkError$inboundSchema` instead. */
  export const inboundSchema = ClerkError$inboundSchema;
  /** @deprecated use `ClerkError$outboundSchema` instead. */
  export const outboundSchema = ClerkError$outboundSchema;
  /** @deprecated use `ClerkError$Outbound` instead. */
  export type Outbound = ClerkError$Outbound;
}

export function clerkErrorToJSON(clerkError: ClerkError): string {
  return JSON.stringify(ClerkError$outboundSchema.parse(clerkError));
}

export function clerkErrorFromJSON(jsonString: string): SafeParseResult<ClerkError, SDKValidationError> {
  return safeParse(
    jsonString,
    x => ClerkError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClerkError' from JSON`,
  );
}
