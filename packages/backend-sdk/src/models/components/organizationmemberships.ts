/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';
import {
  OrganizationMembership,
  OrganizationMembership$inboundSchema,
  OrganizationMembership$Outbound,
  OrganizationMembership$outboundSchema,
} from './organizationmembership.js';

/**
 * A list of organization memberships
 */
export type OrganizationMemberships = {
  data: Array<OrganizationMembership>;
  /**
   * Total number of organization memberships
   *
   * @remarks
   */
  totalCount: number;
};

/** @internal */
export const OrganizationMemberships$inboundSchema: z.ZodType<OrganizationMemberships, z.ZodTypeDef, unknown> = z
  .object({
    data: z.array(OrganizationMembership$inboundSchema),
    total_count: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      total_count: 'totalCount',
    });
  });

/** @internal */
export type OrganizationMemberships$Outbound = {
  data: Array<OrganizationMembership$Outbound>;
  total_count: number;
};

/** @internal */
export const OrganizationMemberships$outboundSchema: z.ZodType<
  OrganizationMemberships$Outbound,
  z.ZodTypeDef,
  OrganizationMemberships
> = z
  .object({
    data: z.array(OrganizationMembership$outboundSchema),
    totalCount: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      totalCount: 'total_count',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationMemberships$ {
  /** @deprecated use `OrganizationMemberships$inboundSchema` instead. */
  export const inboundSchema = OrganizationMemberships$inboundSchema;
  /** @deprecated use `OrganizationMemberships$outboundSchema` instead. */
  export const outboundSchema = OrganizationMemberships$outboundSchema;
  /** @deprecated use `OrganizationMemberships$Outbound` instead. */
  export type Outbound = OrganizationMemberships$Outbound;
}

export function organizationMembershipsToJSON(organizationMemberships: OrganizationMemberships): string {
  return JSON.stringify(OrganizationMemberships$outboundSchema.parse(organizationMemberships));
}

export function organizationMembershipsFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationMemberships, SDKValidationError> {
  return safeParse(
    jsonString,
    x => OrganizationMemberships$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationMemberships' from JSON`,
  );
}
