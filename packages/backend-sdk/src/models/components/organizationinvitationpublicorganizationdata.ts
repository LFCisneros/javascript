/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OrganizationInvitationPublicOrganizationData = {
  id: string;
  name: string;
  slug: string;
  imageUrl?: string | undefined;
  hasImage: boolean;
};

/** @internal */
export const OrganizationInvitationPublicOrganizationData$inboundSchema:
  z.ZodType<
    OrganizationInvitationPublicOrganizationData,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    name: z.string(),
    slug: z.string(),
    image_url: z.string().optional(),
    has_image: z.boolean(),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
      "has_image": "hasImage",
    });
  });

/** @internal */
export type OrganizationInvitationPublicOrganizationData$Outbound = {
  id: string;
  name: string;
  slug: string;
  image_url?: string | undefined;
  has_image: boolean;
};

/** @internal */
export const OrganizationInvitationPublicOrganizationData$outboundSchema:
  z.ZodType<
    OrganizationInvitationPublicOrganizationData$Outbound,
    z.ZodTypeDef,
    OrganizationInvitationPublicOrganizationData
  > = z.object({
    id: z.string(),
    name: z.string(),
    slug: z.string(),
    imageUrl: z.string().optional(),
    hasImage: z.boolean(),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
      hasImage: "has_image",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationInvitationPublicOrganizationData$ {
  /** @deprecated use `OrganizationInvitationPublicOrganizationData$inboundSchema` instead. */
  export const inboundSchema =
    OrganizationInvitationPublicOrganizationData$inboundSchema;
  /** @deprecated use `OrganizationInvitationPublicOrganizationData$outboundSchema` instead. */
  export const outboundSchema =
    OrganizationInvitationPublicOrganizationData$outboundSchema;
  /** @deprecated use `OrganizationInvitationPublicOrganizationData$Outbound` instead. */
  export type Outbound = OrganizationInvitationPublicOrganizationData$Outbound;
}

export function organizationInvitationPublicOrganizationDataToJSON(
  organizationInvitationPublicOrganizationData:
    OrganizationInvitationPublicOrganizationData,
): string {
  return JSON.stringify(
    OrganizationInvitationPublicOrganizationData$outboundSchema.parse(
      organizationInvitationPublicOrganizationData,
    ),
  );
}

export function organizationInvitationPublicOrganizationDataFromJSON(
  jsonString: string,
): SafeParseResult<
  OrganizationInvitationPublicOrganizationData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OrganizationInvitationPublicOrganizationData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OrganizationInvitationPublicOrganizationData' from JSON`,
  );
}
