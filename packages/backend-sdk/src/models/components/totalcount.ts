/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export const TotalCountObject = {
  TotalCount: 'total_count',
} as const;
/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export type TotalCountObject = ClosedEnum<typeof TotalCountObject>;

/**
 * Success
 */
export type TotalCount = {
  /**
   * String representing the object's type. Objects of the same type share the same value.
   *
   * @remarks
   */
  object: TotalCountObject;
  totalCount: number;
};

/** @internal */
export const TotalCountObject$inboundSchema: z.ZodNativeEnum<typeof TotalCountObject> = z.nativeEnum(TotalCountObject);

/** @internal */
export const TotalCountObject$outboundSchema: z.ZodNativeEnum<typeof TotalCountObject> = TotalCountObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TotalCountObject$ {
  /** @deprecated use `TotalCountObject$inboundSchema` instead. */
  export const inboundSchema = TotalCountObject$inboundSchema;
  /** @deprecated use `TotalCountObject$outboundSchema` instead. */
  export const outboundSchema = TotalCountObject$outboundSchema;
}

/** @internal */
export const TotalCount$inboundSchema: z.ZodType<TotalCount, z.ZodTypeDef, unknown> = z
  .object({
    object: TotalCountObject$inboundSchema,
    total_count: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      total_count: 'totalCount',
    });
  });

/** @internal */
export type TotalCount$Outbound = {
  object: string;
  total_count: number;
};

/** @internal */
export const TotalCount$outboundSchema: z.ZodType<TotalCount$Outbound, z.ZodTypeDef, TotalCount> = z
  .object({
    object: TotalCountObject$outboundSchema,
    totalCount: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      totalCount: 'total_count',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TotalCount$ {
  /** @deprecated use `TotalCount$inboundSchema` instead. */
  export const inboundSchema = TotalCount$inboundSchema;
  /** @deprecated use `TotalCount$outboundSchema` instead. */
  export const outboundSchema = TotalCount$outboundSchema;
  /** @deprecated use `TotalCount$Outbound` instead. */
  export type Outbound = TotalCount$Outbound;
}

export function totalCountToJSON(totalCount: TotalCount): string {
  return JSON.stringify(TotalCount$outboundSchema.parse(totalCount));
}

export function totalCountFromJSON(jsonString: string): SafeParseResult<TotalCount, SDKValidationError> {
  return safeParse(
    jsonString,
    x => TotalCount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TotalCount' from JSON`,
  );
}
