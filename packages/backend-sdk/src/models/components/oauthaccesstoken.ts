/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const OAuthAccessTokenObject = {
  OauthAccessToken: "oauth_access_token",
} as const;
export type OAuthAccessTokenObject = ClosedEnum<typeof OAuthAccessTokenObject>;

/**
 * Success
 */
export type OAuthAccessToken = {
  object: OAuthAccessTokenObject;
  /**
   * External account ID
   */
  externalAccountId: string;
  /**
   * The unique ID of the user in the external provider's system
   */
  providerUserId: string;
  /**
   * The access token
   */
  token: string;
  /**
   * Unix timestamp of the access token expiration.
   */
  expiresAt: number | null;
  /**
   * The ID of the provider
   */
  provider: string;
  publicMetadata: { [k: string]: any };
  label: string | null;
  /**
   * The list of scopes that the token is valid for. Only present for OAuth 2.0 tokens.
   */
  scopes?: Array<string> | undefined;
  /**
   * The token secret. Only present for OAuth 1.0 tokens.
   */
  tokenSecret?: string | undefined;
};

/** @internal */
export const OAuthAccessTokenObject$inboundSchema: z.ZodNativeEnum<
  typeof OAuthAccessTokenObject
> = z.nativeEnum(OAuthAccessTokenObject);

/** @internal */
export const OAuthAccessTokenObject$outboundSchema: z.ZodNativeEnum<
  typeof OAuthAccessTokenObject
> = OAuthAccessTokenObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OAuthAccessTokenObject$ {
  /** @deprecated use `OAuthAccessTokenObject$inboundSchema` instead. */
  export const inboundSchema = OAuthAccessTokenObject$inboundSchema;
  /** @deprecated use `OAuthAccessTokenObject$outboundSchema` instead. */
  export const outboundSchema = OAuthAccessTokenObject$outboundSchema;
}

/** @internal */
export const OAuthAccessToken$inboundSchema: z.ZodType<
  OAuthAccessToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: OAuthAccessTokenObject$inboundSchema,
  external_account_id: z.string(),
  provider_user_id: z.string(),
  token: z.string(),
  expires_at: z.nullable(z.number().int()),
  provider: z.string(),
  public_metadata: z.record(z.any()),
  label: z.nullable(z.string()),
  scopes: z.array(z.string()).optional(),
  token_secret: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "external_account_id": "externalAccountId",
    "provider_user_id": "providerUserId",
    "expires_at": "expiresAt",
    "public_metadata": "publicMetadata",
    "token_secret": "tokenSecret",
  });
});

/** @internal */
export type OAuthAccessToken$Outbound = {
  object: string;
  external_account_id: string;
  provider_user_id: string;
  token: string;
  expires_at: number | null;
  provider: string;
  public_metadata: { [k: string]: any };
  label: string | null;
  scopes?: Array<string> | undefined;
  token_secret?: string | undefined;
};

/** @internal */
export const OAuthAccessToken$outboundSchema: z.ZodType<
  OAuthAccessToken$Outbound,
  z.ZodTypeDef,
  OAuthAccessToken
> = z.object({
  object: OAuthAccessTokenObject$outboundSchema,
  externalAccountId: z.string(),
  providerUserId: z.string(),
  token: z.string(),
  expiresAt: z.nullable(z.number().int()),
  provider: z.string(),
  publicMetadata: z.record(z.any()),
  label: z.nullable(z.string()),
  scopes: z.array(z.string()).optional(),
  tokenSecret: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    externalAccountId: "external_account_id",
    providerUserId: "provider_user_id",
    expiresAt: "expires_at",
    publicMetadata: "public_metadata",
    tokenSecret: "token_secret",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OAuthAccessToken$ {
  /** @deprecated use `OAuthAccessToken$inboundSchema` instead. */
  export const inboundSchema = OAuthAccessToken$inboundSchema;
  /** @deprecated use `OAuthAccessToken$outboundSchema` instead. */
  export const outboundSchema = OAuthAccessToken$outboundSchema;
  /** @deprecated use `OAuthAccessToken$Outbound` instead. */
  export type Outbound = OAuthAccessToken$Outbound;
}

export function oAuthAccessTokenToJSON(
  oAuthAccessToken: OAuthAccessToken,
): string {
  return JSON.stringify(
    OAuthAccessToken$outboundSchema.parse(oAuthAccessToken),
  );
}

export function oAuthAccessTokenFromJSON(
  jsonString: string,
): SafeParseResult<OAuthAccessToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OAuthAccessToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OAuthAccessToken' from JSON`,
  );
}
