/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type IdentificationLink = {
  type: string;
  id: string;
};

/** @internal */
export const IdentificationLink$inboundSchema: z.ZodType<IdentificationLink, z.ZodTypeDef, unknown> = z.object({
  type: z.string(),
  id: z.string(),
});

/** @internal */
export type IdentificationLink$Outbound = {
  type: string;
  id: string;
};

/** @internal */
export const IdentificationLink$outboundSchema: z.ZodType<
  IdentificationLink$Outbound,
  z.ZodTypeDef,
  IdentificationLink
> = z.object({
  type: z.string(),
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdentificationLink$ {
  /** @deprecated use `IdentificationLink$inboundSchema` instead. */
  export const inboundSchema = IdentificationLink$inboundSchema;
  /** @deprecated use `IdentificationLink$outboundSchema` instead. */
  export const outboundSchema = IdentificationLink$outboundSchema;
  /** @deprecated use `IdentificationLink$Outbound` instead. */
  export type Outbound = IdentificationLink$Outbound;
}

export function identificationLinkToJSON(identificationLink: IdentificationLink): string {
  return JSON.stringify(IdentificationLink$outboundSchema.parse(identificationLink));
}

export function identificationLinkFromJSON(
  jsonString: string,
): SafeParseResult<IdentificationLink, SDKValidationError> {
  return safeParse(
    jsonString,
    x => IdentificationLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IdentificationLink' from JSON`,
  );
}
