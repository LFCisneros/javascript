/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CNameTarget,
  CNameTarget$inboundSchema,
  CNameTarget$Outbound,
  CNameTarget$outboundSchema,
} from "./cnametarget.js";

export const DomainObject = {
  Domain: "domain",
} as const;
export type DomainObject = ClosedEnum<typeof DomainObject>;

export type Domain = {
  object: DomainObject;
  id: string;
  name: string;
  isSatellite: boolean;
  frontendApiUrl: string;
  /**
   * Null for satellite domains.
   *
   * @remarks
   */
  accountsPortalUrl?: string | null | undefined;
  proxyUrl?: string | null | undefined;
  developmentOrigin: string;
  cnameTargets?: Array<CNameTarget> | null | undefined;
};

/** @internal */
export const DomainObject$inboundSchema: z.ZodNativeEnum<typeof DomainObject> =
  z.nativeEnum(DomainObject);

/** @internal */
export const DomainObject$outboundSchema: z.ZodNativeEnum<typeof DomainObject> =
  DomainObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainObject$ {
  /** @deprecated use `DomainObject$inboundSchema` instead. */
  export const inboundSchema = DomainObject$inboundSchema;
  /** @deprecated use `DomainObject$outboundSchema` instead. */
  export const outboundSchema = DomainObject$outboundSchema;
}

/** @internal */
export const Domain$inboundSchema: z.ZodType<Domain, z.ZodTypeDef, unknown> = z
  .object({
    object: DomainObject$inboundSchema,
    id: z.string(),
    name: z.string(),
    is_satellite: z.boolean(),
    frontend_api_url: z.string(),
    accounts_portal_url: z.nullable(z.string()).optional(),
    proxy_url: z.nullable(z.string()).optional(),
    development_origin: z.string(),
    cname_targets: z.nullable(z.array(CNameTarget$inboundSchema)).optional(),
  }).transform((v) => {
    return remap$(v, {
      "is_satellite": "isSatellite",
      "frontend_api_url": "frontendApiUrl",
      "accounts_portal_url": "accountsPortalUrl",
      "proxy_url": "proxyUrl",
      "development_origin": "developmentOrigin",
      "cname_targets": "cnameTargets",
    });
  });

/** @internal */
export type Domain$Outbound = {
  object: string;
  id: string;
  name: string;
  is_satellite: boolean;
  frontend_api_url: string;
  accounts_portal_url?: string | null | undefined;
  proxy_url?: string | null | undefined;
  development_origin: string;
  cname_targets?: Array<CNameTarget$Outbound> | null | undefined;
};

/** @internal */
export const Domain$outboundSchema: z.ZodType<
  Domain$Outbound,
  z.ZodTypeDef,
  Domain
> = z.object({
  object: DomainObject$outboundSchema,
  id: z.string(),
  name: z.string(),
  isSatellite: z.boolean(),
  frontendApiUrl: z.string(),
  accountsPortalUrl: z.nullable(z.string()).optional(),
  proxyUrl: z.nullable(z.string()).optional(),
  developmentOrigin: z.string(),
  cnameTargets: z.nullable(z.array(CNameTarget$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    isSatellite: "is_satellite",
    frontendApiUrl: "frontend_api_url",
    accountsPortalUrl: "accounts_portal_url",
    proxyUrl: "proxy_url",
    developmentOrigin: "development_origin",
    cnameTargets: "cname_targets",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Domain$ {
  /** @deprecated use `Domain$inboundSchema` instead. */
  export const inboundSchema = Domain$inboundSchema;
  /** @deprecated use `Domain$outboundSchema` instead. */
  export const outboundSchema = Domain$outboundSchema;
  /** @deprecated use `Domain$Outbound` instead. */
  export type Outbound = Domain$Outbound;
}

export function domainToJSON(domain: Domain): string {
  return JSON.stringify(Domain$outboundSchema.parse(domain));
}

export function domainFromJSON(
  jsonString: string,
): SafeParseResult<Domain, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Domain$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Domain' from JSON`,
  );
}
