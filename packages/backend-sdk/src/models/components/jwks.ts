/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  JWKSEcdsaPrivateKey,
  JWKSEcdsaPrivateKey$inboundSchema,
  JWKSEcdsaPrivateKey$Outbound,
  JWKSEcdsaPrivateKey$outboundSchema,
} from "./jwksecdsaprivatekey.js";
import {
  JWKSEcdsaPublicKey,
  JWKSEcdsaPublicKey$inboundSchema,
  JWKSEcdsaPublicKey$Outbound,
  JWKSEcdsaPublicKey$outboundSchema,
} from "./jwksecdsapublickey.js";
import {
  JWKSEd25519PrivateKey,
  JWKSEd25519PrivateKey$inboundSchema,
  JWKSEd25519PrivateKey$Outbound,
  JWKSEd25519PrivateKey$outboundSchema,
} from "./jwksed25519privatekey.js";
import {
  JWKSEd25519PublicKey,
  JWKSEd25519PublicKey$inboundSchema,
  JWKSEd25519PublicKey$Outbound,
  JWKSEd25519PublicKey$outboundSchema,
} from "./jwksed25519publickey.js";
import {
  JWKSRsaPrivateKey,
  JWKSRsaPrivateKey$inboundSchema,
  JWKSRsaPrivateKey$Outbound,
  JWKSRsaPrivateKey$outboundSchema,
} from "./jwksrsaprivatekey.js";
import {
  JWKSRsaPublicKey,
  JWKSRsaPublicKey$inboundSchema,
  JWKSRsaPublicKey$Outbound,
  JWKSRsaPublicKey$outboundSchema,
} from "./jwksrsapublickey.js";
import {
  JWKSSymmetricKey,
  JWKSSymmetricKey$inboundSchema,
  JWKSSymmetricKey$Outbound,
  JWKSSymmetricKey$outboundSchema,
} from "./jwkssymmetrickey.js";

export type Keys =
  | JWKSSymmetricKey
  | JWKSEd25519PublicKey
  | JWKSRsaPublicKey
  | JWKSEcdsaPublicKey
  | JWKSEd25519PrivateKey
  | JWKSEcdsaPrivateKey
  | JWKSRsaPrivateKey;

/**
 * Get the JSON Web Key Set
 */
export type Jwks = {
  keys?:
    | Array<
      | JWKSSymmetricKey
      | JWKSEd25519PublicKey
      | JWKSRsaPublicKey
      | JWKSEcdsaPublicKey
      | JWKSEd25519PrivateKey
      | JWKSEcdsaPrivateKey
      | JWKSRsaPrivateKey
    >
    | undefined;
};

/** @internal */
export const Keys$inboundSchema: z.ZodType<Keys, z.ZodTypeDef, unknown> = z
  .union([
    JWKSSymmetricKey$inboundSchema,
    JWKSEd25519PublicKey$inboundSchema,
    JWKSRsaPublicKey$inboundSchema,
    JWKSEcdsaPublicKey$inboundSchema,
    JWKSEd25519PrivateKey$inboundSchema,
    JWKSEcdsaPrivateKey$inboundSchema,
    JWKSRsaPrivateKey$inboundSchema,
  ]);

/** @internal */
export type Keys$Outbound =
  | JWKSSymmetricKey$Outbound
  | JWKSEd25519PublicKey$Outbound
  | JWKSRsaPublicKey$Outbound
  | JWKSEcdsaPublicKey$Outbound
  | JWKSEd25519PrivateKey$Outbound
  | JWKSEcdsaPrivateKey$Outbound
  | JWKSRsaPrivateKey$Outbound;

/** @internal */
export const Keys$outboundSchema: z.ZodType<Keys$Outbound, z.ZodTypeDef, Keys> =
  z.union([
    JWKSSymmetricKey$outboundSchema,
    JWKSEd25519PublicKey$outboundSchema,
    JWKSRsaPublicKey$outboundSchema,
    JWKSEcdsaPublicKey$outboundSchema,
    JWKSEd25519PrivateKey$outboundSchema,
    JWKSEcdsaPrivateKey$outboundSchema,
    JWKSRsaPrivateKey$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Keys$ {
  /** @deprecated use `Keys$inboundSchema` instead. */
  export const inboundSchema = Keys$inboundSchema;
  /** @deprecated use `Keys$outboundSchema` instead. */
  export const outboundSchema = Keys$outboundSchema;
  /** @deprecated use `Keys$Outbound` instead. */
  export type Outbound = Keys$Outbound;
}

export function keysToJSON(keys: Keys): string {
  return JSON.stringify(Keys$outboundSchema.parse(keys));
}

export function keysFromJSON(
  jsonString: string,
): SafeParseResult<Keys, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Keys$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Keys' from JSON`,
  );
}

/** @internal */
export const Jwks$inboundSchema: z.ZodType<Jwks, z.ZodTypeDef, unknown> = z
  .object({
    keys: z.array(
      z.union([
        JWKSSymmetricKey$inboundSchema,
        JWKSEd25519PublicKey$inboundSchema,
        JWKSRsaPublicKey$inboundSchema,
        JWKSEcdsaPublicKey$inboundSchema,
        JWKSEd25519PrivateKey$inboundSchema,
        JWKSEcdsaPrivateKey$inboundSchema,
        JWKSRsaPrivateKey$inboundSchema,
      ]),
    ).optional(),
  });

/** @internal */
export type Jwks$Outbound = {
  keys?:
    | Array<
      | JWKSSymmetricKey$Outbound
      | JWKSEd25519PublicKey$Outbound
      | JWKSRsaPublicKey$Outbound
      | JWKSEcdsaPublicKey$Outbound
      | JWKSEd25519PrivateKey$Outbound
      | JWKSEcdsaPrivateKey$Outbound
      | JWKSRsaPrivateKey$Outbound
    >
    | undefined;
};

/** @internal */
export const Jwks$outboundSchema: z.ZodType<Jwks$Outbound, z.ZodTypeDef, Jwks> =
  z.object({
    keys: z.array(
      z.union([
        JWKSSymmetricKey$outboundSchema,
        JWKSEd25519PublicKey$outboundSchema,
        JWKSRsaPublicKey$outboundSchema,
        JWKSEcdsaPublicKey$outboundSchema,
        JWKSEd25519PrivateKey$outboundSchema,
        JWKSEcdsaPrivateKey$outboundSchema,
        JWKSRsaPrivateKey$outboundSchema,
      ]),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Jwks$ {
  /** @deprecated use `Jwks$inboundSchema` instead. */
  export const inboundSchema = Jwks$inboundSchema;
  /** @deprecated use `Jwks$outboundSchema` instead. */
  export const outboundSchema = Jwks$outboundSchema;
  /** @deprecated use `Jwks$Outbound` instead. */
  export type Outbound = Jwks$Outbound;
}

export function jwksToJSON(jwks: Jwks): string {
  return JSON.stringify(Jwks$outboundSchema.parse(jwks));
}

export function jwksFromJSON(
  jsonString: string,
): SafeParseResult<Jwks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Jwks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Jwks' from JSON`,
  );
}
