/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export const TemplateObject = {
  Template: 'template',
} as const;
/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export type TemplateObject = ClosedEnum<typeof TemplateObject>;

/**
 * Success
 */
export type Template = {
  id?: string | undefined;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   *
   * @remarks
   */
  object?: TemplateObject | undefined;
  /**
   * the id of the instance the template belongs to
   */
  instanceId?: string | null | undefined;
  /**
   * whether this is a system (default) or user overridden) template
   */
  resourceType?: string | undefined;
  /**
   * whether this is an email or SMS template
   */
  templateType?: string | undefined;
  /**
   * user-friendly name of the template
   */
  name?: string | undefined;
  /**
   * machine-friendly name of the template
   */
  slug?: string | undefined;
  /**
   * position with the listing of templates
   */
  position?: number | undefined;
  /**
   * whether this template can be reverted to the corresponding system default
   */
  canRevert?: boolean | undefined;
  /**
   * whether this template can be deleted
   */
  canDelete?: boolean | undefined;
  /**
   * whether this template can be enabled or disabled, true only for notification SMS templates
   */
  canToggle?: boolean | undefined;
  /**
   * email subject
   */
  subject?: string | null | undefined;
  /**
   * the editor markup used to generate the body of the template
   */
  markup?: string | undefined;
  /**
   * the template body before variable interpolation
   */
  body?: string | undefined;
  /**
   * list of variables that are available for use in the template body
   */
  availableVariables?: Array<string> | undefined;
  /**
   * list of variables that must be contained in the template body
   */
  requiredVariables?: Array<string> | undefined;
  fromEmailName?: string | undefined;
  replyToEmailName?: string | undefined;
  deliveredByClerk?: boolean | undefined;
  enabled?: boolean | undefined;
  /**
   * Unix timestamp of last update.
   *
   * @remarks
   */
  updatedAt?: number | undefined;
  /**
   * Unix timestamp of creation.
   *
   * @remarks
   */
  createdAt?: number | undefined;
};

/** @internal */
export const TemplateObject$inboundSchema: z.ZodNativeEnum<typeof TemplateObject> = z.nativeEnum(TemplateObject);

/** @internal */
export const TemplateObject$outboundSchema: z.ZodNativeEnum<typeof TemplateObject> = TemplateObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateObject$ {
  /** @deprecated use `TemplateObject$inboundSchema` instead. */
  export const inboundSchema = TemplateObject$inboundSchema;
  /** @deprecated use `TemplateObject$outboundSchema` instead. */
  export const outboundSchema = TemplateObject$outboundSchema;
}

/** @internal */
export const Template$inboundSchema: z.ZodType<Template, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    object: TemplateObject$inboundSchema.optional(),
    instance_id: z.nullable(z.string()).optional(),
    resource_type: z.string().optional(),
    template_type: z.string().optional(),
    name: z.string().optional(),
    slug: z.string().optional(),
    position: z.number().int().optional(),
    can_revert: z.boolean().optional(),
    can_delete: z.boolean().optional(),
    can_toggle: z.boolean().optional(),
    subject: z.nullable(z.string()).optional(),
    markup: z.string().optional(),
    body: z.string().optional(),
    available_variables: z.array(z.string()).optional(),
    required_variables: z.array(z.string()).optional(),
    from_email_name: z.string().optional(),
    reply_to_email_name: z.string().optional(),
    delivered_by_clerk: z.boolean().optional(),
    enabled: z.boolean().optional(),
    updated_at: z.number().int().optional(),
    created_at: z.number().int().optional(),
  })
  .transform(v => {
    return remap$(v, {
      instance_id: 'instanceId',
      resource_type: 'resourceType',
      template_type: 'templateType',
      can_revert: 'canRevert',
      can_delete: 'canDelete',
      can_toggle: 'canToggle',
      available_variables: 'availableVariables',
      required_variables: 'requiredVariables',
      from_email_name: 'fromEmailName',
      reply_to_email_name: 'replyToEmailName',
      delivered_by_clerk: 'deliveredByClerk',
      updated_at: 'updatedAt',
      created_at: 'createdAt',
    });
  });

/** @internal */
export type Template$Outbound = {
  id?: string | undefined;
  object?: string | undefined;
  instance_id?: string | null | undefined;
  resource_type?: string | undefined;
  template_type?: string | undefined;
  name?: string | undefined;
  slug?: string | undefined;
  position?: number | undefined;
  can_revert?: boolean | undefined;
  can_delete?: boolean | undefined;
  can_toggle?: boolean | undefined;
  subject?: string | null | undefined;
  markup?: string | undefined;
  body?: string | undefined;
  available_variables?: Array<string> | undefined;
  required_variables?: Array<string> | undefined;
  from_email_name?: string | undefined;
  reply_to_email_name?: string | undefined;
  delivered_by_clerk?: boolean | undefined;
  enabled?: boolean | undefined;
  updated_at?: number | undefined;
  created_at?: number | undefined;
};

/** @internal */
export const Template$outboundSchema: z.ZodType<Template$Outbound, z.ZodTypeDef, Template> = z
  .object({
    id: z.string().optional(),
    object: TemplateObject$outboundSchema.optional(),
    instanceId: z.nullable(z.string()).optional(),
    resourceType: z.string().optional(),
    templateType: z.string().optional(),
    name: z.string().optional(),
    slug: z.string().optional(),
    position: z.number().int().optional(),
    canRevert: z.boolean().optional(),
    canDelete: z.boolean().optional(),
    canToggle: z.boolean().optional(),
    subject: z.nullable(z.string()).optional(),
    markup: z.string().optional(),
    body: z.string().optional(),
    availableVariables: z.array(z.string()).optional(),
    requiredVariables: z.array(z.string()).optional(),
    fromEmailName: z.string().optional(),
    replyToEmailName: z.string().optional(),
    deliveredByClerk: z.boolean().optional(),
    enabled: z.boolean().optional(),
    updatedAt: z.number().int().optional(),
    createdAt: z.number().int().optional(),
  })
  .transform(v => {
    return remap$(v, {
      instanceId: 'instance_id',
      resourceType: 'resource_type',
      templateType: 'template_type',
      canRevert: 'can_revert',
      canDelete: 'can_delete',
      canToggle: 'can_toggle',
      availableVariables: 'available_variables',
      requiredVariables: 'required_variables',
      fromEmailName: 'from_email_name',
      replyToEmailName: 'reply_to_email_name',
      deliveredByClerk: 'delivered_by_clerk',
      updatedAt: 'updated_at',
      createdAt: 'created_at',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Template$ {
  /** @deprecated use `Template$inboundSchema` instead. */
  export const inboundSchema = Template$inboundSchema;
  /** @deprecated use `Template$outboundSchema` instead. */
  export const outboundSchema = Template$outboundSchema;
  /** @deprecated use `Template$Outbound` instead. */
  export type Outbound = Template$Outbound;
}

export function templateToJSON(template: Template): string {
  return JSON.stringify(Template$outboundSchema.parse(template));
}

export function templateFromJSON(jsonString: string): SafeParseResult<Template, SDKValidationError> {
  return safeParse(
    jsonString,
    x => Template$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Template' from JSON`,
  );
}
