/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export const SAMLAccountObject = {
  SamlAccount: "saml_account",
} as const;
/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export type SAMLAccountObject = ClosedEnum<typeof SAMLAccountObject>;

export const TicketVerificationSAMLAccountStatus = {
  Unverified: "unverified",
  Verified: "verified",
  Expired: "expired",
} as const;
export type TicketVerificationSAMLAccountStatus = ClosedEnum<
  typeof TicketVerificationSAMLAccountStatus
>;

export const TicketVerificationSAMLAccountStrategy = {
  Ticket: "ticket",
} as const;
export type TicketVerificationSAMLAccountStrategy = OpenEnum<
  typeof TicketVerificationSAMLAccountStrategy
>;

export type VerificationTicket = {
  status: TicketVerificationSAMLAccountStatus;
  strategy: TicketVerificationSAMLAccountStrategy;
  attempts: number | null;
  expireAt: number | null;
  verifiedAtClient?: string | null | undefined;
};

export const SAMLVerificationStatus = {
  Unverified: "unverified",
  Verified: "verified",
  Failed: "failed",
  Expired: "expired",
  Transferable: "transferable",
} as const;
export type SAMLVerificationStatus = ClosedEnum<typeof SAMLVerificationStatus>;

export const SAMLVerificationStrategy = {
  Saml: "saml",
} as const;
export type SAMLVerificationStrategy = ClosedEnum<
  typeof SAMLVerificationStrategy
>;

export type ClerkErrorErrorSAMLAccountMeta = {};

export type SAMLErrorClerkError = {
  message: string;
  longMessage: string;
  code: string;
  meta?: ClerkErrorErrorSAMLAccountMeta | undefined;
  clerkTraceId?: string | undefined;
};

export type SAMLVerificationError = SAMLErrorClerkError;

export type Saml = {
  status: SAMLVerificationStatus;
  strategy: SAMLVerificationStrategy;
  externalVerificationRedirectUrl: string | null;
  error?: SAMLErrorClerkError | null | undefined;
  expireAt: number;
  attempts: number | null;
  verifiedAtClient?: string | null | undefined;
};

export type SAMLAccountVerification = VerificationTicket | Saml;

export type SAMLConnectionSAMLConnection = {
  id: string;
  name: string;
  domain: string;
  active: boolean;
  provider: string;
  syncUserAttributes: boolean;
  allowSubdomains?: boolean | undefined;
  allowIdpInitiated?: boolean | undefined;
  disableAdditionalIdentifications?: boolean | undefined;
  /**
   * Unix timestamp of creation.
   *
   * @remarks
   */
  createdAt: number;
  /**
   * Unix timestamp of last update.
   *
   * @remarks
   */
  updatedAt: number;
};

export type SamlConnection = SAMLConnectionSAMLConnection;

export type SAMLAccount = {
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   *
   * @remarks
   */
  object: SAMLAccountObject;
  provider: string;
  active: boolean;
  emailAddress: string;
  firstName?: string | null | undefined;
  lastName?: string | null | undefined;
  providerUserId?: string | null | undefined;
  publicMetadata?: { [k: string]: any } | undefined;
  verification: VerificationTicket | Saml | null;
  samlConnection?: SAMLConnectionSAMLConnection | null | undefined;
};

/** @internal */
export const SAMLAccountObject$inboundSchema: z.ZodNativeEnum<
  typeof SAMLAccountObject
> = z.nativeEnum(SAMLAccountObject);

/** @internal */
export const SAMLAccountObject$outboundSchema: z.ZodNativeEnum<
  typeof SAMLAccountObject
> = SAMLAccountObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SAMLAccountObject$ {
  /** @deprecated use `SAMLAccountObject$inboundSchema` instead. */
  export const inboundSchema = SAMLAccountObject$inboundSchema;
  /** @deprecated use `SAMLAccountObject$outboundSchema` instead. */
  export const outboundSchema = SAMLAccountObject$outboundSchema;
}

/** @internal */
export const TicketVerificationSAMLAccountStatus$inboundSchema: z.ZodNativeEnum<
  typeof TicketVerificationSAMLAccountStatus
> = z.nativeEnum(TicketVerificationSAMLAccountStatus);

/** @internal */
export const TicketVerificationSAMLAccountStatus$outboundSchema:
  z.ZodNativeEnum<typeof TicketVerificationSAMLAccountStatus> =
    TicketVerificationSAMLAccountStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketVerificationSAMLAccountStatus$ {
  /** @deprecated use `TicketVerificationSAMLAccountStatus$inboundSchema` instead. */
  export const inboundSchema =
    TicketVerificationSAMLAccountStatus$inboundSchema;
  /** @deprecated use `TicketVerificationSAMLAccountStatus$outboundSchema` instead. */
  export const outboundSchema =
    TicketVerificationSAMLAccountStatus$outboundSchema;
}

/** @internal */
export const TicketVerificationSAMLAccountStrategy$inboundSchema: z.ZodType<
  TicketVerificationSAMLAccountStrategy,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TicketVerificationSAMLAccountStrategy),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TicketVerificationSAMLAccountStrategy$outboundSchema: z.ZodType<
  TicketVerificationSAMLAccountStrategy,
  z.ZodTypeDef,
  TicketVerificationSAMLAccountStrategy
> = z.union([
  z.nativeEnum(TicketVerificationSAMLAccountStrategy),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketVerificationSAMLAccountStrategy$ {
  /** @deprecated use `TicketVerificationSAMLAccountStrategy$inboundSchema` instead. */
  export const inboundSchema =
    TicketVerificationSAMLAccountStrategy$inboundSchema;
  /** @deprecated use `TicketVerificationSAMLAccountStrategy$outboundSchema` instead. */
  export const outboundSchema =
    TicketVerificationSAMLAccountStrategy$outboundSchema;
}

/** @internal */
export const VerificationTicket$inboundSchema: z.ZodType<
  VerificationTicket,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: TicketVerificationSAMLAccountStatus$inboundSchema,
  strategy: TicketVerificationSAMLAccountStrategy$inboundSchema,
  attempts: z.nullable(z.number().int()),
  expire_at: z.nullable(z.number().int()),
  verified_at_client: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "expire_at": "expireAt",
    "verified_at_client": "verifiedAtClient",
  });
});

/** @internal */
export type VerificationTicket$Outbound = {
  status: string;
  strategy: string;
  attempts: number | null;
  expire_at: number | null;
  verified_at_client?: string | null | undefined;
};

/** @internal */
export const VerificationTicket$outboundSchema: z.ZodType<
  VerificationTicket$Outbound,
  z.ZodTypeDef,
  VerificationTicket
> = z.object({
  status: TicketVerificationSAMLAccountStatus$outboundSchema,
  strategy: TicketVerificationSAMLAccountStrategy$outboundSchema,
  attempts: z.nullable(z.number().int()),
  expireAt: z.nullable(z.number().int()),
  verifiedAtClient: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    expireAt: "expire_at",
    verifiedAtClient: "verified_at_client",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerificationTicket$ {
  /** @deprecated use `VerificationTicket$inboundSchema` instead. */
  export const inboundSchema = VerificationTicket$inboundSchema;
  /** @deprecated use `VerificationTicket$outboundSchema` instead. */
  export const outboundSchema = VerificationTicket$outboundSchema;
  /** @deprecated use `VerificationTicket$Outbound` instead. */
  export type Outbound = VerificationTicket$Outbound;
}

export function verificationTicketToJSON(
  verificationTicket: VerificationTicket,
): string {
  return JSON.stringify(
    VerificationTicket$outboundSchema.parse(verificationTicket),
  );
}

export function verificationTicketFromJSON(
  jsonString: string,
): SafeParseResult<VerificationTicket, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerificationTicket$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerificationTicket' from JSON`,
  );
}

/** @internal */
export const SAMLVerificationStatus$inboundSchema: z.ZodNativeEnum<
  typeof SAMLVerificationStatus
> = z.nativeEnum(SAMLVerificationStatus);

/** @internal */
export const SAMLVerificationStatus$outboundSchema: z.ZodNativeEnum<
  typeof SAMLVerificationStatus
> = SAMLVerificationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SAMLVerificationStatus$ {
  /** @deprecated use `SAMLVerificationStatus$inboundSchema` instead. */
  export const inboundSchema = SAMLVerificationStatus$inboundSchema;
  /** @deprecated use `SAMLVerificationStatus$outboundSchema` instead. */
  export const outboundSchema = SAMLVerificationStatus$outboundSchema;
}

/** @internal */
export const SAMLVerificationStrategy$inboundSchema: z.ZodNativeEnum<
  typeof SAMLVerificationStrategy
> = z.nativeEnum(SAMLVerificationStrategy);

/** @internal */
export const SAMLVerificationStrategy$outboundSchema: z.ZodNativeEnum<
  typeof SAMLVerificationStrategy
> = SAMLVerificationStrategy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SAMLVerificationStrategy$ {
  /** @deprecated use `SAMLVerificationStrategy$inboundSchema` instead. */
  export const inboundSchema = SAMLVerificationStrategy$inboundSchema;
  /** @deprecated use `SAMLVerificationStrategy$outboundSchema` instead. */
  export const outboundSchema = SAMLVerificationStrategy$outboundSchema;
}

/** @internal */
export const ClerkErrorErrorSAMLAccountMeta$inboundSchema: z.ZodType<
  ClerkErrorErrorSAMLAccountMeta,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ClerkErrorErrorSAMLAccountMeta$Outbound = {};

/** @internal */
export const ClerkErrorErrorSAMLAccountMeta$outboundSchema: z.ZodType<
  ClerkErrorErrorSAMLAccountMeta$Outbound,
  z.ZodTypeDef,
  ClerkErrorErrorSAMLAccountMeta
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClerkErrorErrorSAMLAccountMeta$ {
  /** @deprecated use `ClerkErrorErrorSAMLAccountMeta$inboundSchema` instead. */
  export const inboundSchema = ClerkErrorErrorSAMLAccountMeta$inboundSchema;
  /** @deprecated use `ClerkErrorErrorSAMLAccountMeta$outboundSchema` instead. */
  export const outboundSchema = ClerkErrorErrorSAMLAccountMeta$outboundSchema;
  /** @deprecated use `ClerkErrorErrorSAMLAccountMeta$Outbound` instead. */
  export type Outbound = ClerkErrorErrorSAMLAccountMeta$Outbound;
}

export function clerkErrorErrorSAMLAccountMetaToJSON(
  clerkErrorErrorSAMLAccountMeta: ClerkErrorErrorSAMLAccountMeta,
): string {
  return JSON.stringify(
    ClerkErrorErrorSAMLAccountMeta$outboundSchema.parse(
      clerkErrorErrorSAMLAccountMeta,
    ),
  );
}

export function clerkErrorErrorSAMLAccountMetaFromJSON(
  jsonString: string,
): SafeParseResult<ClerkErrorErrorSAMLAccountMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClerkErrorErrorSAMLAccountMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClerkErrorErrorSAMLAccountMeta' from JSON`,
  );
}

/** @internal */
export const SAMLErrorClerkError$inboundSchema: z.ZodType<
  SAMLErrorClerkError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  long_message: z.string(),
  code: z.string(),
  meta: z.lazy(() => ClerkErrorErrorSAMLAccountMeta$inboundSchema).optional(),
  clerk_trace_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "long_message": "longMessage",
    "clerk_trace_id": "clerkTraceId",
  });
});

/** @internal */
export type SAMLErrorClerkError$Outbound = {
  message: string;
  long_message: string;
  code: string;
  meta?: ClerkErrorErrorSAMLAccountMeta$Outbound | undefined;
  clerk_trace_id?: string | undefined;
};

/** @internal */
export const SAMLErrorClerkError$outboundSchema: z.ZodType<
  SAMLErrorClerkError$Outbound,
  z.ZodTypeDef,
  SAMLErrorClerkError
> = z.object({
  message: z.string(),
  longMessage: z.string(),
  code: z.string(),
  meta: z.lazy(() => ClerkErrorErrorSAMLAccountMeta$outboundSchema).optional(),
  clerkTraceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    longMessage: "long_message",
    clerkTraceId: "clerk_trace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SAMLErrorClerkError$ {
  /** @deprecated use `SAMLErrorClerkError$inboundSchema` instead. */
  export const inboundSchema = SAMLErrorClerkError$inboundSchema;
  /** @deprecated use `SAMLErrorClerkError$outboundSchema` instead. */
  export const outboundSchema = SAMLErrorClerkError$outboundSchema;
  /** @deprecated use `SAMLErrorClerkError$Outbound` instead. */
  export type Outbound = SAMLErrorClerkError$Outbound;
}

export function samlErrorClerkErrorToJSON(
  samlErrorClerkError: SAMLErrorClerkError,
): string {
  return JSON.stringify(
    SAMLErrorClerkError$outboundSchema.parse(samlErrorClerkError),
  );
}

export function samlErrorClerkErrorFromJSON(
  jsonString: string,
): SafeParseResult<SAMLErrorClerkError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SAMLErrorClerkError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SAMLErrorClerkError' from JSON`,
  );
}

/** @internal */
export const SAMLVerificationError$inboundSchema: z.ZodType<
  SAMLVerificationError,
  z.ZodTypeDef,
  unknown
> = z.lazy(() => SAMLErrorClerkError$inboundSchema);

/** @internal */
export type SAMLVerificationError$Outbound = SAMLErrorClerkError$Outbound;

/** @internal */
export const SAMLVerificationError$outboundSchema: z.ZodType<
  SAMLVerificationError$Outbound,
  z.ZodTypeDef,
  SAMLVerificationError
> = z.lazy(() => SAMLErrorClerkError$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SAMLVerificationError$ {
  /** @deprecated use `SAMLVerificationError$inboundSchema` instead. */
  export const inboundSchema = SAMLVerificationError$inboundSchema;
  /** @deprecated use `SAMLVerificationError$outboundSchema` instead. */
  export const outboundSchema = SAMLVerificationError$outboundSchema;
  /** @deprecated use `SAMLVerificationError$Outbound` instead. */
  export type Outbound = SAMLVerificationError$Outbound;
}

export function samlVerificationErrorToJSON(
  samlVerificationError: SAMLVerificationError,
): string {
  return JSON.stringify(
    SAMLVerificationError$outboundSchema.parse(samlVerificationError),
  );
}

export function samlVerificationErrorFromJSON(
  jsonString: string,
): SafeParseResult<SAMLVerificationError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SAMLVerificationError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SAMLVerificationError' from JSON`,
  );
}

/** @internal */
export const Saml$inboundSchema: z.ZodType<Saml, z.ZodTypeDef, unknown> = z
  .object({
    status: SAMLVerificationStatus$inboundSchema,
    strategy: SAMLVerificationStrategy$inboundSchema,
    external_verification_redirect_url: z.nullable(z.string()),
    error: z.nullable(z.lazy(() => SAMLErrorClerkError$inboundSchema))
      .optional(),
    expire_at: z.number().int(),
    attempts: z.nullable(z.number().int()),
    verified_at_client: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "external_verification_redirect_url": "externalVerificationRedirectUrl",
      "expire_at": "expireAt",
      "verified_at_client": "verifiedAtClient",
    });
  });

/** @internal */
export type Saml$Outbound = {
  status: string;
  strategy: string;
  external_verification_redirect_url: string | null;
  error?: SAMLErrorClerkError$Outbound | null | undefined;
  expire_at: number;
  attempts: number | null;
  verified_at_client?: string | null | undefined;
};

/** @internal */
export const Saml$outboundSchema: z.ZodType<Saml$Outbound, z.ZodTypeDef, Saml> =
  z.object({
    status: SAMLVerificationStatus$outboundSchema,
    strategy: SAMLVerificationStrategy$outboundSchema,
    externalVerificationRedirectUrl: z.nullable(z.string()),
    error: z.nullable(z.lazy(() => SAMLErrorClerkError$outboundSchema))
      .optional(),
    expireAt: z.number().int(),
    attempts: z.nullable(z.number().int()),
    verifiedAtClient: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      externalVerificationRedirectUrl: "external_verification_redirect_url",
      expireAt: "expire_at",
      verifiedAtClient: "verified_at_client",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Saml$ {
  /** @deprecated use `Saml$inboundSchema` instead. */
  export const inboundSchema = Saml$inboundSchema;
  /** @deprecated use `Saml$outboundSchema` instead. */
  export const outboundSchema = Saml$outboundSchema;
  /** @deprecated use `Saml$Outbound` instead. */
  export type Outbound = Saml$Outbound;
}

export function samlToJSON(saml: Saml): string {
  return JSON.stringify(Saml$outboundSchema.parse(saml));
}

export function samlFromJSON(
  jsonString: string,
): SafeParseResult<Saml, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Saml$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Saml' from JSON`,
  );
}

/** @internal */
export const SAMLAccountVerification$inboundSchema: z.ZodType<
  SAMLAccountVerification,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => VerificationTicket$inboundSchema),
  z.lazy(() => Saml$inboundSchema),
]);

/** @internal */
export type SAMLAccountVerification$Outbound =
  | VerificationTicket$Outbound
  | Saml$Outbound;

/** @internal */
export const SAMLAccountVerification$outboundSchema: z.ZodType<
  SAMLAccountVerification$Outbound,
  z.ZodTypeDef,
  SAMLAccountVerification
> = z.union([
  z.lazy(() => VerificationTicket$outboundSchema),
  z.lazy(() => Saml$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SAMLAccountVerification$ {
  /** @deprecated use `SAMLAccountVerification$inboundSchema` instead. */
  export const inboundSchema = SAMLAccountVerification$inboundSchema;
  /** @deprecated use `SAMLAccountVerification$outboundSchema` instead. */
  export const outboundSchema = SAMLAccountVerification$outboundSchema;
  /** @deprecated use `SAMLAccountVerification$Outbound` instead. */
  export type Outbound = SAMLAccountVerification$Outbound;
}

export function samlAccountVerificationToJSON(
  samlAccountVerification: SAMLAccountVerification,
): string {
  return JSON.stringify(
    SAMLAccountVerification$outboundSchema.parse(samlAccountVerification),
  );
}

export function samlAccountVerificationFromJSON(
  jsonString: string,
): SafeParseResult<SAMLAccountVerification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SAMLAccountVerification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SAMLAccountVerification' from JSON`,
  );
}

/** @internal */
export const SAMLConnectionSAMLConnection$inboundSchema: z.ZodType<
  SAMLConnectionSAMLConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  domain: z.string(),
  active: z.boolean(),
  provider: z.string(),
  sync_user_attributes: z.boolean(),
  allow_subdomains: z.boolean().optional(),
  allow_idp_initiated: z.boolean().optional(),
  disable_additional_identifications: z.boolean().optional(),
  created_at: z.number().int(),
  updated_at: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "sync_user_attributes": "syncUserAttributes",
    "allow_subdomains": "allowSubdomains",
    "allow_idp_initiated": "allowIdpInitiated",
    "disable_additional_identifications": "disableAdditionalIdentifications",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type SAMLConnectionSAMLConnection$Outbound = {
  id: string;
  name: string;
  domain: string;
  active: boolean;
  provider: string;
  sync_user_attributes: boolean;
  allow_subdomains?: boolean | undefined;
  allow_idp_initiated?: boolean | undefined;
  disable_additional_identifications?: boolean | undefined;
  created_at: number;
  updated_at: number;
};

/** @internal */
export const SAMLConnectionSAMLConnection$outboundSchema: z.ZodType<
  SAMLConnectionSAMLConnection$Outbound,
  z.ZodTypeDef,
  SAMLConnectionSAMLConnection
> = z.object({
  id: z.string(),
  name: z.string(),
  domain: z.string(),
  active: z.boolean(),
  provider: z.string(),
  syncUserAttributes: z.boolean(),
  allowSubdomains: z.boolean().optional(),
  allowIdpInitiated: z.boolean().optional(),
  disableAdditionalIdentifications: z.boolean().optional(),
  createdAt: z.number().int(),
  updatedAt: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    syncUserAttributes: "sync_user_attributes",
    allowSubdomains: "allow_subdomains",
    allowIdpInitiated: "allow_idp_initiated",
    disableAdditionalIdentifications: "disable_additional_identifications",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SAMLConnectionSAMLConnection$ {
  /** @deprecated use `SAMLConnectionSAMLConnection$inboundSchema` instead. */
  export const inboundSchema = SAMLConnectionSAMLConnection$inboundSchema;
  /** @deprecated use `SAMLConnectionSAMLConnection$outboundSchema` instead. */
  export const outboundSchema = SAMLConnectionSAMLConnection$outboundSchema;
  /** @deprecated use `SAMLConnectionSAMLConnection$Outbound` instead. */
  export type Outbound = SAMLConnectionSAMLConnection$Outbound;
}

export function samlConnectionSAMLConnectionToJSON(
  samlConnectionSAMLConnection: SAMLConnectionSAMLConnection,
): string {
  return JSON.stringify(
    SAMLConnectionSAMLConnection$outboundSchema.parse(
      samlConnectionSAMLConnection,
    ),
  );
}

export function samlConnectionSAMLConnectionFromJSON(
  jsonString: string,
): SafeParseResult<SAMLConnectionSAMLConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SAMLConnectionSAMLConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SAMLConnectionSAMLConnection' from JSON`,
  );
}

/** @internal */
export const SamlConnection$inboundSchema: z.ZodType<
  SamlConnection,
  z.ZodTypeDef,
  unknown
> = z.lazy(() => SAMLConnectionSAMLConnection$inboundSchema);

/** @internal */
export type SamlConnection$Outbound = SAMLConnectionSAMLConnection$Outbound;

/** @internal */
export const SamlConnection$outboundSchema: z.ZodType<
  SamlConnection$Outbound,
  z.ZodTypeDef,
  SamlConnection
> = z.lazy(() => SAMLConnectionSAMLConnection$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SamlConnection$ {
  /** @deprecated use `SamlConnection$inboundSchema` instead. */
  export const inboundSchema = SamlConnection$inboundSchema;
  /** @deprecated use `SamlConnection$outboundSchema` instead. */
  export const outboundSchema = SamlConnection$outboundSchema;
  /** @deprecated use `SamlConnection$Outbound` instead. */
  export type Outbound = SamlConnection$Outbound;
}

export function samlConnectionToJSON(samlConnection: SamlConnection): string {
  return JSON.stringify(SamlConnection$outboundSchema.parse(samlConnection));
}

export function samlConnectionFromJSON(
  jsonString: string,
): SafeParseResult<SamlConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SamlConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SamlConnection' from JSON`,
  );
}

/** @internal */
export const SAMLAccount$inboundSchema: z.ZodType<
  SAMLAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  object: SAMLAccountObject$inboundSchema,
  provider: z.string(),
  active: z.boolean(),
  email_address: z.string(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  provider_user_id: z.nullable(z.string()).optional(),
  public_metadata: z.record(z.any()).optional(),
  verification: z.nullable(
    z.union([
      z.lazy(() => VerificationTicket$inboundSchema),
      z.lazy(() => Saml$inboundSchema),
    ]),
  ),
  saml_connection: z.nullable(
    z.lazy(() => SAMLConnectionSAMLConnection$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "email_address": "emailAddress",
    "first_name": "firstName",
    "last_name": "lastName",
    "provider_user_id": "providerUserId",
    "public_metadata": "publicMetadata",
    "saml_connection": "samlConnection",
  });
});

/** @internal */
export type SAMLAccount$Outbound = {
  id: string;
  object: string;
  provider: string;
  active: boolean;
  email_address: string;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  provider_user_id?: string | null | undefined;
  public_metadata?: { [k: string]: any } | undefined;
  verification: VerificationTicket$Outbound | Saml$Outbound | null;
  saml_connection?: SAMLConnectionSAMLConnection$Outbound | null | undefined;
};

/** @internal */
export const SAMLAccount$outboundSchema: z.ZodType<
  SAMLAccount$Outbound,
  z.ZodTypeDef,
  SAMLAccount
> = z.object({
  id: z.string(),
  object: SAMLAccountObject$outboundSchema,
  provider: z.string(),
  active: z.boolean(),
  emailAddress: z.string(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  providerUserId: z.nullable(z.string()).optional(),
  publicMetadata: z.record(z.any()).optional(),
  verification: z.nullable(
    z.union([
      z.lazy(() => VerificationTicket$outboundSchema),
      z.lazy(() => Saml$outboundSchema),
    ]),
  ),
  samlConnection: z.nullable(
    z.lazy(() => SAMLConnectionSAMLConnection$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    emailAddress: "email_address",
    firstName: "first_name",
    lastName: "last_name",
    providerUserId: "provider_user_id",
    publicMetadata: "public_metadata",
    samlConnection: "saml_connection",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SAMLAccount$ {
  /** @deprecated use `SAMLAccount$inboundSchema` instead. */
  export const inboundSchema = SAMLAccount$inboundSchema;
  /** @deprecated use `SAMLAccount$outboundSchema` instead. */
  export const outboundSchema = SAMLAccount$outboundSchema;
  /** @deprecated use `SAMLAccount$Outbound` instead. */
  export type Outbound = SAMLAccount$Outbound;
}

export function samlAccountToJSON(samlAccount: SAMLAccount): string {
  return JSON.stringify(SAMLAccount$outboundSchema.parse(samlAccount));
}

export function samlAccountFromJSON(
  jsonString: string,
): SafeParseResult<SAMLAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SAMLAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SAMLAccount' from JSON`,
  );
}
