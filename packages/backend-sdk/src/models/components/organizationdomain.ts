/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * String representing the object's type. Objects of the same type share the same value. Always `organization_domain`
 *
 * @remarks
 */
export const OrganizationDomainObject = {
  OrganizationDomain: "organization_domain",
} as const;
/**
 * String representing the object's type. Objects of the same type share the same value. Always `organization_domain`
 *
 * @remarks
 */
export type OrganizationDomainObject = ClosedEnum<
  typeof OrganizationDomainObject
>;

/**
 * Mode of enrollment for the domain
 */
export const EnrollmentMode = {
  ManualInvitation: "manual_invitation",
  AutomaticInvitation: "automatic_invitation",
  AutomaticSuggestion: "automatic_suggestion",
} as const;
/**
 * Mode of enrollment for the domain
 */
export type EnrollmentMode = ClosedEnum<typeof EnrollmentMode>;

/**
 * Status of the verification. It can be `unverified` or `verified`
 */
export const OrganizationDomainStatus = {
  Unverified: "unverified",
  Verified: "verified",
} as const;
/**
 * Status of the verification. It can be `unverified` or `verified`
 */
export type OrganizationDomainStatus = ClosedEnum<
  typeof OrganizationDomainStatus
>;

/**
 * Verification details for the domain
 */
export type OrganizationDomainVerification = {
  /**
   * Status of the verification. It can be `unverified` or `verified`
   */
  status: OrganizationDomainStatus;
  /**
   * Name of the strategy used to verify the domain
   */
  strategy: string;
  /**
   * How many attempts have been made to verify the domain
   */
  attempts: number | null;
  /**
   * Unix timestamp of when the verification will expire
   */
  expireAt: number | null;
};

/**
 * An organization domain
 */
export type OrganizationDomain = {
  /**
   * String representing the object's type. Objects of the same type share the same value. Always `organization_domain`
   *
   * @remarks
   */
  object: OrganizationDomainObject;
  /**
   * Unique identifier for the organization domain
   */
  id: string;
  /**
   * Unique identifier for the organization
   */
  organizationId: string;
  /**
   * Name of the organization domain
   */
  name: string;
  /**
   * Mode of enrollment for the domain
   */
  enrollmentMode: EnrollmentMode;
  /**
   * Affiliation email address for the domain, if available.
   */
  affiliationEmailAddress: string | null;
  /**
   * Verification details for the domain
   */
  verification: OrganizationDomainVerification | null;
  /**
   * Total number of pending invitations associated with this domain
   */
  totalPendingInvitations: number;
  /**
   * Total number of pending suggestions associated with this domain
   */
  totalPendingSuggestions: number;
  /**
   * Unix timestamp when the domain was created
   */
  createdAt: number;
  /**
   * Unix timestamp of the last update to the domain
   */
  updatedAt: number;
};

/** @internal */
export const OrganizationDomainObject$inboundSchema: z.ZodNativeEnum<
  typeof OrganizationDomainObject
> = z.nativeEnum(OrganizationDomainObject);

/** @internal */
export const OrganizationDomainObject$outboundSchema: z.ZodNativeEnum<
  typeof OrganizationDomainObject
> = OrganizationDomainObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationDomainObject$ {
  /** @deprecated use `OrganizationDomainObject$inboundSchema` instead. */
  export const inboundSchema = OrganizationDomainObject$inboundSchema;
  /** @deprecated use `OrganizationDomainObject$outboundSchema` instead. */
  export const outboundSchema = OrganizationDomainObject$outboundSchema;
}

/** @internal */
export const EnrollmentMode$inboundSchema: z.ZodNativeEnum<
  typeof EnrollmentMode
> = z.nativeEnum(EnrollmentMode);

/** @internal */
export const EnrollmentMode$outboundSchema: z.ZodNativeEnum<
  typeof EnrollmentMode
> = EnrollmentMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentMode$ {
  /** @deprecated use `EnrollmentMode$inboundSchema` instead. */
  export const inboundSchema = EnrollmentMode$inboundSchema;
  /** @deprecated use `EnrollmentMode$outboundSchema` instead. */
  export const outboundSchema = EnrollmentMode$outboundSchema;
}

/** @internal */
export const OrganizationDomainStatus$inboundSchema: z.ZodNativeEnum<
  typeof OrganizationDomainStatus
> = z.nativeEnum(OrganizationDomainStatus);

/** @internal */
export const OrganizationDomainStatus$outboundSchema: z.ZodNativeEnum<
  typeof OrganizationDomainStatus
> = OrganizationDomainStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationDomainStatus$ {
  /** @deprecated use `OrganizationDomainStatus$inboundSchema` instead. */
  export const inboundSchema = OrganizationDomainStatus$inboundSchema;
  /** @deprecated use `OrganizationDomainStatus$outboundSchema` instead. */
  export const outboundSchema = OrganizationDomainStatus$outboundSchema;
}

/** @internal */
export const OrganizationDomainVerification$inboundSchema: z.ZodType<
  OrganizationDomainVerification,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: OrganizationDomainStatus$inboundSchema,
  strategy: z.string(),
  attempts: z.nullable(z.number().int()),
  expire_at: z.nullable(z.number().int()),
}).transform((v) => {
  return remap$(v, {
    "expire_at": "expireAt",
  });
});

/** @internal */
export type OrganizationDomainVerification$Outbound = {
  status: string;
  strategy: string;
  attempts: number | null;
  expire_at: number | null;
};

/** @internal */
export const OrganizationDomainVerification$outboundSchema: z.ZodType<
  OrganizationDomainVerification$Outbound,
  z.ZodTypeDef,
  OrganizationDomainVerification
> = z.object({
  status: OrganizationDomainStatus$outboundSchema,
  strategy: z.string(),
  attempts: z.nullable(z.number().int()),
  expireAt: z.nullable(z.number().int()),
}).transform((v) => {
  return remap$(v, {
    expireAt: "expire_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationDomainVerification$ {
  /** @deprecated use `OrganizationDomainVerification$inboundSchema` instead. */
  export const inboundSchema = OrganizationDomainVerification$inboundSchema;
  /** @deprecated use `OrganizationDomainVerification$outboundSchema` instead. */
  export const outboundSchema = OrganizationDomainVerification$outboundSchema;
  /** @deprecated use `OrganizationDomainVerification$Outbound` instead. */
  export type Outbound = OrganizationDomainVerification$Outbound;
}

export function organizationDomainVerificationToJSON(
  organizationDomainVerification: OrganizationDomainVerification,
): string {
  return JSON.stringify(
    OrganizationDomainVerification$outboundSchema.parse(
      organizationDomainVerification,
    ),
  );
}

export function organizationDomainVerificationFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationDomainVerification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationDomainVerification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationDomainVerification' from JSON`,
  );
}

/** @internal */
export const OrganizationDomain$inboundSchema: z.ZodType<
  OrganizationDomain,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: OrganizationDomainObject$inboundSchema,
  id: z.string(),
  organization_id: z.string(),
  name: z.string(),
  enrollment_mode: EnrollmentMode$inboundSchema,
  affiliation_email_address: z.nullable(z.string()),
  verification: z.nullable(
    z.lazy(() => OrganizationDomainVerification$inboundSchema),
  ),
  total_pending_invitations: z.number().int(),
  total_pending_suggestions: z.number().int(),
  created_at: z.number().int(),
  updated_at: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "enrollment_mode": "enrollmentMode",
    "affiliation_email_address": "affiliationEmailAddress",
    "total_pending_invitations": "totalPendingInvitations",
    "total_pending_suggestions": "totalPendingSuggestions",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type OrganizationDomain$Outbound = {
  object: string;
  id: string;
  organization_id: string;
  name: string;
  enrollment_mode: string;
  affiliation_email_address: string | null;
  verification: OrganizationDomainVerification$Outbound | null;
  total_pending_invitations: number;
  total_pending_suggestions: number;
  created_at: number;
  updated_at: number;
};

/** @internal */
export const OrganizationDomain$outboundSchema: z.ZodType<
  OrganizationDomain$Outbound,
  z.ZodTypeDef,
  OrganizationDomain
> = z.object({
  object: OrganizationDomainObject$outboundSchema,
  id: z.string(),
  organizationId: z.string(),
  name: z.string(),
  enrollmentMode: EnrollmentMode$outboundSchema,
  affiliationEmailAddress: z.nullable(z.string()),
  verification: z.nullable(
    z.lazy(() => OrganizationDomainVerification$outboundSchema),
  ),
  totalPendingInvitations: z.number().int(),
  totalPendingSuggestions: z.number().int(),
  createdAt: z.number().int(),
  updatedAt: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    enrollmentMode: "enrollment_mode",
    affiliationEmailAddress: "affiliation_email_address",
    totalPendingInvitations: "total_pending_invitations",
    totalPendingSuggestions: "total_pending_suggestions",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationDomain$ {
  /** @deprecated use `OrganizationDomain$inboundSchema` instead. */
  export const inboundSchema = OrganizationDomain$inboundSchema;
  /** @deprecated use `OrganizationDomain$outboundSchema` instead. */
  export const outboundSchema = OrganizationDomain$outboundSchema;
  /** @deprecated use `OrganizationDomain$Outbound` instead. */
  export type Outbound = OrganizationDomain$Outbound;
}

export function organizationDomainToJSON(
  organizationDomain: OrganizationDomain,
): string {
  return JSON.stringify(
    OrganizationDomain$outboundSchema.parse(organizationDomain),
  );
}

export function organizationDomainFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationDomain, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationDomain$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationDomain' from JSON`,
  );
}
