/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SignUpVerification,
  SignUpVerification$inboundSchema,
  SignUpVerification$Outbound,
  SignUpVerification$outboundSchema,
} from "./signupverification.js";

export type ExternalAccount = {};

export type SignUpVerifications = {
  emailAddress: SignUpVerification | null;
  phoneNumber: SignUpVerification | null;
  web3Wallet: SignUpVerification | null;
  externalAccount: ExternalAccount | null;
};

/** @internal */
export const ExternalAccount$inboundSchema: z.ZodType<
  ExternalAccount,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ExternalAccount$Outbound = {};

/** @internal */
export const ExternalAccount$outboundSchema: z.ZodType<
  ExternalAccount$Outbound,
  z.ZodTypeDef,
  ExternalAccount
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalAccount$ {
  /** @deprecated use `ExternalAccount$inboundSchema` instead. */
  export const inboundSchema = ExternalAccount$inboundSchema;
  /** @deprecated use `ExternalAccount$outboundSchema` instead. */
  export const outboundSchema = ExternalAccount$outboundSchema;
  /** @deprecated use `ExternalAccount$Outbound` instead. */
  export type Outbound = ExternalAccount$Outbound;
}

export function externalAccountToJSON(
  externalAccount: ExternalAccount,
): string {
  return JSON.stringify(ExternalAccount$outboundSchema.parse(externalAccount));
}

export function externalAccountFromJSON(
  jsonString: string,
): SafeParseResult<ExternalAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExternalAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalAccount' from JSON`,
  );
}

/** @internal */
export const SignUpVerifications$inboundSchema: z.ZodType<
  SignUpVerifications,
  z.ZodTypeDef,
  unknown
> = z.object({
  email_address: z.nullable(SignUpVerification$inboundSchema),
  phone_number: z.nullable(SignUpVerification$inboundSchema),
  web3_wallet: z.nullable(SignUpVerification$inboundSchema),
  external_account: z.nullable(z.lazy(() => ExternalAccount$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "email_address": "emailAddress",
    "phone_number": "phoneNumber",
    "web3_wallet": "web3Wallet",
    "external_account": "externalAccount",
  });
});

/** @internal */
export type SignUpVerifications$Outbound = {
  email_address: SignUpVerification$Outbound | null;
  phone_number: SignUpVerification$Outbound | null;
  web3_wallet: SignUpVerification$Outbound | null;
  external_account: ExternalAccount$Outbound | null;
};

/** @internal */
export const SignUpVerifications$outboundSchema: z.ZodType<
  SignUpVerifications$Outbound,
  z.ZodTypeDef,
  SignUpVerifications
> = z.object({
  emailAddress: z.nullable(SignUpVerification$outboundSchema),
  phoneNumber: z.nullable(SignUpVerification$outboundSchema),
  web3Wallet: z.nullable(SignUpVerification$outboundSchema),
  externalAccount: z.nullable(z.lazy(() => ExternalAccount$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    emailAddress: "email_address",
    phoneNumber: "phone_number",
    web3Wallet: "web3_wallet",
    externalAccount: "external_account",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignUpVerifications$ {
  /** @deprecated use `SignUpVerifications$inboundSchema` instead. */
  export const inboundSchema = SignUpVerifications$inboundSchema;
  /** @deprecated use `SignUpVerifications$outboundSchema` instead. */
  export const outboundSchema = SignUpVerifications$outboundSchema;
  /** @deprecated use `SignUpVerifications$Outbound` instead. */
  export type Outbound = SignUpVerifications$Outbound;
}

export function signUpVerificationsToJSON(
  signUpVerifications: SignUpVerifications,
): string {
  return JSON.stringify(
    SignUpVerifications$outboundSchema.parse(signUpVerifications),
  );
}

export function signUpVerificationsFromJSON(
  jsonString: string,
): SafeParseResult<SignUpVerifications, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SignUpVerifications$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignUpVerifications' from JSON`,
  );
}
