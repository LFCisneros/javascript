/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export const ActorTokenObject = {
  ActorToken: 'actor_token',
} as const;
export type ActorTokenObject = ClosedEnum<typeof ActorTokenObject>;

export const ActorTokenStatus = {
  Pending: 'pending',
  Accepted: 'accepted',
  Revoked: 'revoked',
} as const;
export type ActorTokenStatus = ClosedEnum<typeof ActorTokenStatus>;

export type ActorTokenActor = {};

/**
 * Success
 */
export type ActorToken = {
  object: ActorTokenObject;
  id: string;
  status: ActorTokenStatus;
  userId: string;
  actor: ActorTokenActor;
  token?: string | undefined;
  url?: string | undefined;
  /**
   * Unix timestamp of creation.
   *
   * @remarks
   */
  createdAt: number;
  /**
   * Unix timestamp of last update.
   *
   * @remarks
   */
  updatedAt: number;
};

/** @internal */
export const ActorTokenObject$inboundSchema: z.ZodNativeEnum<typeof ActorTokenObject> = z.nativeEnum(ActorTokenObject);

/** @internal */
export const ActorTokenObject$outboundSchema: z.ZodNativeEnum<typeof ActorTokenObject> = ActorTokenObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActorTokenObject$ {
  /** @deprecated use `ActorTokenObject$inboundSchema` instead. */
  export const inboundSchema = ActorTokenObject$inboundSchema;
  /** @deprecated use `ActorTokenObject$outboundSchema` instead. */
  export const outboundSchema = ActorTokenObject$outboundSchema;
}

/** @internal */
export const ActorTokenStatus$inboundSchema: z.ZodNativeEnum<typeof ActorTokenStatus> = z.nativeEnum(ActorTokenStatus);

/** @internal */
export const ActorTokenStatus$outboundSchema: z.ZodNativeEnum<typeof ActorTokenStatus> = ActorTokenStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActorTokenStatus$ {
  /** @deprecated use `ActorTokenStatus$inboundSchema` instead. */
  export const inboundSchema = ActorTokenStatus$inboundSchema;
  /** @deprecated use `ActorTokenStatus$outboundSchema` instead. */
  export const outboundSchema = ActorTokenStatus$outboundSchema;
}

/** @internal */
export const ActorTokenActor$inboundSchema: z.ZodType<ActorTokenActor, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type ActorTokenActor$Outbound = {};

/** @internal */
export const ActorTokenActor$outboundSchema: z.ZodType<ActorTokenActor$Outbound, z.ZodTypeDef, ActorTokenActor> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActorTokenActor$ {
  /** @deprecated use `ActorTokenActor$inboundSchema` instead. */
  export const inboundSchema = ActorTokenActor$inboundSchema;
  /** @deprecated use `ActorTokenActor$outboundSchema` instead. */
  export const outboundSchema = ActorTokenActor$outboundSchema;
  /** @deprecated use `ActorTokenActor$Outbound` instead. */
  export type Outbound = ActorTokenActor$Outbound;
}

export function actorTokenActorToJSON(actorTokenActor: ActorTokenActor): string {
  return JSON.stringify(ActorTokenActor$outboundSchema.parse(actorTokenActor));
}

export function actorTokenActorFromJSON(jsonString: string): SafeParseResult<ActorTokenActor, SDKValidationError> {
  return safeParse(
    jsonString,
    x => ActorTokenActor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActorTokenActor' from JSON`,
  );
}

/** @internal */
export const ActorToken$inboundSchema: z.ZodType<ActorToken, z.ZodTypeDef, unknown> = z
  .object({
    object: ActorTokenObject$inboundSchema,
    id: z.string(),
    status: ActorTokenStatus$inboundSchema,
    user_id: z.string(),
    actor: z.lazy(() => ActorTokenActor$inboundSchema),
    token: z.string().optional(),
    url: z.string().optional(),
    created_at: z.number().int(),
    updated_at: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      user_id: 'userId',
      created_at: 'createdAt',
      updated_at: 'updatedAt',
    });
  });

/** @internal */
export type ActorToken$Outbound = {
  object: string;
  id: string;
  status: string;
  user_id: string;
  actor: ActorTokenActor$Outbound;
  token?: string | undefined;
  url?: string | undefined;
  created_at: number;
  updated_at: number;
};

/** @internal */
export const ActorToken$outboundSchema: z.ZodType<ActorToken$Outbound, z.ZodTypeDef, ActorToken> = z
  .object({
    object: ActorTokenObject$outboundSchema,
    id: z.string(),
    status: ActorTokenStatus$outboundSchema,
    userId: z.string(),
    actor: z.lazy(() => ActorTokenActor$outboundSchema),
    token: z.string().optional(),
    url: z.string().optional(),
    createdAt: z.number().int(),
    updatedAt: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      userId: 'user_id',
      createdAt: 'created_at',
      updatedAt: 'updated_at',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActorToken$ {
  /** @deprecated use `ActorToken$inboundSchema` instead. */
  export const inboundSchema = ActorToken$inboundSchema;
  /** @deprecated use `ActorToken$outboundSchema` instead. */
  export const outboundSchema = ActorToken$outboundSchema;
  /** @deprecated use `ActorToken$Outbound` instead. */
  export type Outbound = ActorToken$Outbound;
}

export function actorTokenToJSON(actorToken: ActorToken): string {
  return JSON.stringify(ActorToken$outboundSchema.parse(actorToken));
}

export function actorTokenFromJSON(jsonString: string): SafeParseResult<ActorToken, SDKValidationError> {
  return safeParse(
    jsonString,
    x => ActorToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActorToken' from JSON`,
  );
}
