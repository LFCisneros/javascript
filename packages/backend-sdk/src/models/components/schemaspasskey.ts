/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export const SchemasPasskeyObject = {
  Passkey: 'passkey',
} as const;
/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export type SchemasPasskeyObject = ClosedEnum<typeof SchemasPasskeyObject>;

export const PasskeyVerificationStatus = {
  Verified: 'verified',
} as const;
export type PasskeyVerificationStatus = ClosedEnum<typeof PasskeyVerificationStatus>;

export const PasskeyVerificationStrategy = {
  Passkey: 'passkey',
} as const;
export type PasskeyVerificationStrategy = ClosedEnum<typeof PasskeyVerificationStrategy>;

export const Nonce = {
  Nonce: 'nonce',
} as const;
export type Nonce = ClosedEnum<typeof Nonce>;

export type Passkey = {
  status: PasskeyVerificationStatus;
  strategy: PasskeyVerificationStrategy;
  nonce?: Nonce | undefined;
  message?: string | null | undefined;
  attempts: number | null;
  expireAt: number | null;
  verifiedAtClient?: string | null | undefined;
};

export type SchemasPasskeyVerification = Passkey;

export type SchemasPasskey = {
  id?: string | undefined;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   *
   * @remarks
   */
  object: SchemasPasskeyObject;
  name: string;
  /**
   * Unix timestamp of when the passkey was last used.
   *
   * @remarks
   */
  lastUsedAt: number;
  verification: Passkey | null;
};

/** @internal */
export const SchemasPasskeyObject$inboundSchema: z.ZodNativeEnum<typeof SchemasPasskeyObject> =
  z.nativeEnum(SchemasPasskeyObject);

/** @internal */
export const SchemasPasskeyObject$outboundSchema: z.ZodNativeEnum<typeof SchemasPasskeyObject> =
  SchemasPasskeyObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasPasskeyObject$ {
  /** @deprecated use `SchemasPasskeyObject$inboundSchema` instead. */
  export const inboundSchema = SchemasPasskeyObject$inboundSchema;
  /** @deprecated use `SchemasPasskeyObject$outboundSchema` instead. */
  export const outboundSchema = SchemasPasskeyObject$outboundSchema;
}

/** @internal */
export const PasskeyVerificationStatus$inboundSchema: z.ZodNativeEnum<typeof PasskeyVerificationStatus> =
  z.nativeEnum(PasskeyVerificationStatus);

/** @internal */
export const PasskeyVerificationStatus$outboundSchema: z.ZodNativeEnum<typeof PasskeyVerificationStatus> =
  PasskeyVerificationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PasskeyVerificationStatus$ {
  /** @deprecated use `PasskeyVerificationStatus$inboundSchema` instead. */
  export const inboundSchema = PasskeyVerificationStatus$inboundSchema;
  /** @deprecated use `PasskeyVerificationStatus$outboundSchema` instead. */
  export const outboundSchema = PasskeyVerificationStatus$outboundSchema;
}

/** @internal */
export const PasskeyVerificationStrategy$inboundSchema: z.ZodNativeEnum<typeof PasskeyVerificationStrategy> =
  z.nativeEnum(PasskeyVerificationStrategy);

/** @internal */
export const PasskeyVerificationStrategy$outboundSchema: z.ZodNativeEnum<typeof PasskeyVerificationStrategy> =
  PasskeyVerificationStrategy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PasskeyVerificationStrategy$ {
  /** @deprecated use `PasskeyVerificationStrategy$inboundSchema` instead. */
  export const inboundSchema = PasskeyVerificationStrategy$inboundSchema;
  /** @deprecated use `PasskeyVerificationStrategy$outboundSchema` instead. */
  export const outboundSchema = PasskeyVerificationStrategy$outboundSchema;
}

/** @internal */
export const Nonce$inboundSchema: z.ZodNativeEnum<typeof Nonce> = z.nativeEnum(Nonce);

/** @internal */
export const Nonce$outboundSchema: z.ZodNativeEnum<typeof Nonce> = Nonce$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Nonce$ {
  /** @deprecated use `Nonce$inboundSchema` instead. */
  export const inboundSchema = Nonce$inboundSchema;
  /** @deprecated use `Nonce$outboundSchema` instead. */
  export const outboundSchema = Nonce$outboundSchema;
}

/** @internal */
export const Passkey$inboundSchema: z.ZodType<Passkey, z.ZodTypeDef, unknown> = z
  .object({
    status: PasskeyVerificationStatus$inboundSchema,
    strategy: PasskeyVerificationStrategy$inboundSchema,
    nonce: Nonce$inboundSchema.optional(),
    message: z.nullable(z.string()).optional(),
    attempts: z.nullable(z.number().int()),
    expire_at: z.nullable(z.number().int()),
    verified_at_client: z.nullable(z.string()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      expire_at: 'expireAt',
      verified_at_client: 'verifiedAtClient',
    });
  });

/** @internal */
export type Passkey$Outbound = {
  status: string;
  strategy: string;
  nonce?: string | undefined;
  message?: string | null | undefined;
  attempts: number | null;
  expire_at: number | null;
  verified_at_client?: string | null | undefined;
};

/** @internal */
export const Passkey$outboundSchema: z.ZodType<Passkey$Outbound, z.ZodTypeDef, Passkey> = z
  .object({
    status: PasskeyVerificationStatus$outboundSchema,
    strategy: PasskeyVerificationStrategy$outboundSchema,
    nonce: Nonce$outboundSchema.optional(),
    message: z.nullable(z.string()).optional(),
    attempts: z.nullable(z.number().int()),
    expireAt: z.nullable(z.number().int()),
    verifiedAtClient: z.nullable(z.string()).optional(),
  })
  .transform(v => {
    return remap$(v, {
      expireAt: 'expire_at',
      verifiedAtClient: 'verified_at_client',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Passkey$ {
  /** @deprecated use `Passkey$inboundSchema` instead. */
  export const inboundSchema = Passkey$inboundSchema;
  /** @deprecated use `Passkey$outboundSchema` instead. */
  export const outboundSchema = Passkey$outboundSchema;
  /** @deprecated use `Passkey$Outbound` instead. */
  export type Outbound = Passkey$Outbound;
}

export function passkeyToJSON(passkey: Passkey): string {
  return JSON.stringify(Passkey$outboundSchema.parse(passkey));
}

export function passkeyFromJSON(jsonString: string): SafeParseResult<Passkey, SDKValidationError> {
  return safeParse(jsonString, x => Passkey$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Passkey' from JSON`);
}

/** @internal */
export const SchemasPasskeyVerification$inboundSchema: z.ZodType<SchemasPasskeyVerification, z.ZodTypeDef, unknown> =
  z.lazy(() => Passkey$inboundSchema);

/** @internal */
export type SchemasPasskeyVerification$Outbound = Passkey$Outbound;

/** @internal */
export const SchemasPasskeyVerification$outboundSchema: z.ZodType<
  SchemasPasskeyVerification$Outbound,
  z.ZodTypeDef,
  SchemasPasskeyVerification
> = z.lazy(() => Passkey$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasPasskeyVerification$ {
  /** @deprecated use `SchemasPasskeyVerification$inboundSchema` instead. */
  export const inboundSchema = SchemasPasskeyVerification$inboundSchema;
  /** @deprecated use `SchemasPasskeyVerification$outboundSchema` instead. */
  export const outboundSchema = SchemasPasskeyVerification$outboundSchema;
  /** @deprecated use `SchemasPasskeyVerification$Outbound` instead. */
  export type Outbound = SchemasPasskeyVerification$Outbound;
}

export function schemasPasskeyVerificationToJSON(schemasPasskeyVerification: SchemasPasskeyVerification): string {
  return JSON.stringify(SchemasPasskeyVerification$outboundSchema.parse(schemasPasskeyVerification));
}

export function schemasPasskeyVerificationFromJSON(
  jsonString: string,
): SafeParseResult<SchemasPasskeyVerification, SDKValidationError> {
  return safeParse(
    jsonString,
    x => SchemasPasskeyVerification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SchemasPasskeyVerification' from JSON`,
  );
}

/** @internal */
export const SchemasPasskey$inboundSchema: z.ZodType<SchemasPasskey, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    object: SchemasPasskeyObject$inboundSchema,
    name: z.string(),
    last_used_at: z.number().int(),
    verification: z.nullable(z.lazy(() => Passkey$inboundSchema)),
  })
  .transform(v => {
    return remap$(v, {
      last_used_at: 'lastUsedAt',
    });
  });

/** @internal */
export type SchemasPasskey$Outbound = {
  id?: string | undefined;
  object: string;
  name: string;
  last_used_at: number;
  verification: Passkey$Outbound | null;
};

/** @internal */
export const SchemasPasskey$outboundSchema: z.ZodType<SchemasPasskey$Outbound, z.ZodTypeDef, SchemasPasskey> = z
  .object({
    id: z.string().optional(),
    object: SchemasPasskeyObject$outboundSchema,
    name: z.string(),
    lastUsedAt: z.number().int(),
    verification: z.nullable(z.lazy(() => Passkey$outboundSchema)),
  })
  .transform(v => {
    return remap$(v, {
      lastUsedAt: 'last_used_at',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasPasskey$ {
  /** @deprecated use `SchemasPasskey$inboundSchema` instead. */
  export const inboundSchema = SchemasPasskey$inboundSchema;
  /** @deprecated use `SchemasPasskey$outboundSchema` instead. */
  export const outboundSchema = SchemasPasskey$outboundSchema;
  /** @deprecated use `SchemasPasskey$Outbound` instead. */
  export type Outbound = SchemasPasskey$Outbound;
}

export function schemasPasskeyToJSON(schemasPasskey: SchemasPasskey): string {
  return JSON.stringify(SchemasPasskey$outboundSchema.parse(schemasPasskey));
}

export function schemasPasskeyFromJSON(jsonString: string): SafeParseResult<SchemasPasskey, SDKValidationError> {
  return safeParse(
    jsonString,
    x => SchemasPasskey$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SchemasPasskey' from JSON`,
  );
}
