/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export const JWKSEcdsaPublicKeyKty = {
  Ec: 'EC',
} as const;
export type JWKSEcdsaPublicKeyKty = ClosedEnum<typeof JWKSEcdsaPublicKeyKty>;

export type JWKSEcdsaPublicKey = {
  kid: string;
  alg: string;
  use: string;
  kty: JWKSEcdsaPublicKeyKty;
  crv: string;
  x: string;
  y: string;
  x5c?: Array<string> | undefined;
  x5t?: string | undefined;
  x5tNumberS256?: string | undefined;
  x5u?: string | undefined;
};

/** @internal */
export const JWKSEcdsaPublicKeyKty$inboundSchema: z.ZodNativeEnum<typeof JWKSEcdsaPublicKeyKty> =
  z.nativeEnum(JWKSEcdsaPublicKeyKty);

/** @internal */
export const JWKSEcdsaPublicKeyKty$outboundSchema: z.ZodNativeEnum<typeof JWKSEcdsaPublicKeyKty> =
  JWKSEcdsaPublicKeyKty$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JWKSEcdsaPublicKeyKty$ {
  /** @deprecated use `JWKSEcdsaPublicKeyKty$inboundSchema` instead. */
  export const inboundSchema = JWKSEcdsaPublicKeyKty$inboundSchema;
  /** @deprecated use `JWKSEcdsaPublicKeyKty$outboundSchema` instead. */
  export const outboundSchema = JWKSEcdsaPublicKeyKty$outboundSchema;
}

/** @internal */
export const JWKSEcdsaPublicKey$inboundSchema: z.ZodType<JWKSEcdsaPublicKey, z.ZodTypeDef, unknown> = z
  .object({
    kid: z.string(),
    alg: z.string(),
    use: z.string(),
    kty: JWKSEcdsaPublicKeyKty$inboundSchema,
    crv: z.string(),
    x: z.string(),
    y: z.string(),
    x5c: z.array(z.string()).optional(),
    x5t: z.string().optional(),
    'x5t#S256': z.string().optional(),
    x5u: z.string().optional(),
  })
  .transform(v => {
    return remap$(v, {
      'x5t#S256': 'x5tNumberS256',
    });
  });

/** @internal */
export type JWKSEcdsaPublicKey$Outbound = {
  kid: string;
  alg: string;
  use: string;
  kty: string;
  crv: string;
  x: string;
  y: string;
  x5c?: Array<string> | undefined;
  x5t?: string | undefined;
  'x5t#S256'?: string | undefined;
  x5u?: string | undefined;
};

/** @internal */
export const JWKSEcdsaPublicKey$outboundSchema: z.ZodType<
  JWKSEcdsaPublicKey$Outbound,
  z.ZodTypeDef,
  JWKSEcdsaPublicKey
> = z
  .object({
    kid: z.string(),
    alg: z.string(),
    use: z.string(),
    kty: JWKSEcdsaPublicKeyKty$outboundSchema,
    crv: z.string(),
    x: z.string(),
    y: z.string(),
    x5c: z.array(z.string()).optional(),
    x5t: z.string().optional(),
    x5tNumberS256: z.string().optional(),
    x5u: z.string().optional(),
  })
  .transform(v => {
    return remap$(v, {
      x5tNumberS256: 'x5t#S256',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JWKSEcdsaPublicKey$ {
  /** @deprecated use `JWKSEcdsaPublicKey$inboundSchema` instead. */
  export const inboundSchema = JWKSEcdsaPublicKey$inboundSchema;
  /** @deprecated use `JWKSEcdsaPublicKey$outboundSchema` instead. */
  export const outboundSchema = JWKSEcdsaPublicKey$outboundSchema;
  /** @deprecated use `JWKSEcdsaPublicKey$Outbound` instead. */
  export type Outbound = JWKSEcdsaPublicKey$Outbound;
}

export function jwksEcdsaPublicKeyToJSON(jwksEcdsaPublicKey: JWKSEcdsaPublicKey): string {
  return JSON.stringify(JWKSEcdsaPublicKey$outboundSchema.parse(jwksEcdsaPublicKey));
}

export function jwksEcdsaPublicKeyFromJSON(
  jsonString: string,
): SafeParseResult<JWKSEcdsaPublicKey, SDKValidationError> {
  return safeParse(
    jsonString,
    x => JWKSEcdsaPublicKey$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JWKSEcdsaPublicKey' from JSON`,
  );
}
