/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';
import { Session, Session$inboundSchema, Session$Outbound, Session$outboundSchema } from './session.js';

/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export const ObjectT = {
  Client: 'client',
} as const;
/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export type ObjectT = ClosedEnum<typeof ObjectT>;

/**
 * Success
 */
export type Client = {
  /**
   * String representing the object's type. Objects of the same type share the same value.
   *
   * @remarks
   */
  object: ObjectT;
  /**
   * String representing the identifier of the session.
   *
   * @remarks
   */
  id: string;
  sessionIds: Array<string>;
  sessions: Array<Session>;
  signInId: string | null;
  signUpId: string | null;
  /**
   * Last active session_id.
   *
   * @remarks
   */
  lastActiveSessionId: string | null;
  /**
   * Unix timestamp of last update.
   *
   * @remarks
   */
  updatedAt: number;
  /**
   * Unix timestamp of creation.
   *
   * @remarks
   */
  createdAt: number;
};

/** @internal */
export const ObjectT$inboundSchema: z.ZodNativeEnum<typeof ObjectT> = z.nativeEnum(ObjectT);

/** @internal */
export const ObjectT$outboundSchema: z.ZodNativeEnum<typeof ObjectT> = ObjectT$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjectT$ {
  /** @deprecated use `ObjectT$inboundSchema` instead. */
  export const inboundSchema = ObjectT$inboundSchema;
  /** @deprecated use `ObjectT$outboundSchema` instead. */
  export const outboundSchema = ObjectT$outboundSchema;
}

/** @internal */
export const Client$inboundSchema: z.ZodType<Client, z.ZodTypeDef, unknown> = z
  .object({
    object: ObjectT$inboundSchema,
    id: z.string(),
    session_ids: z.array(z.string()),
    sessions: z.array(Session$inboundSchema),
    sign_in_id: z.nullable(z.string()),
    sign_up_id: z.nullable(z.string()),
    last_active_session_id: z.nullable(z.string()),
    updated_at: z.number().int(),
    created_at: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      session_ids: 'sessionIds',
      sign_in_id: 'signInId',
      sign_up_id: 'signUpId',
      last_active_session_id: 'lastActiveSessionId',
      updated_at: 'updatedAt',
      created_at: 'createdAt',
    });
  });

/** @internal */
export type Client$Outbound = {
  object: string;
  id: string;
  session_ids: Array<string>;
  sessions: Array<Session$Outbound>;
  sign_in_id: string | null;
  sign_up_id: string | null;
  last_active_session_id: string | null;
  updated_at: number;
  created_at: number;
};

/** @internal */
export const Client$outboundSchema: z.ZodType<Client$Outbound, z.ZodTypeDef, Client> = z
  .object({
    object: ObjectT$outboundSchema,
    id: z.string(),
    sessionIds: z.array(z.string()),
    sessions: z.array(Session$outboundSchema),
    signInId: z.nullable(z.string()),
    signUpId: z.nullable(z.string()),
    lastActiveSessionId: z.nullable(z.string()),
    updatedAt: z.number().int(),
    createdAt: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      sessionIds: 'session_ids',
      signInId: 'sign_in_id',
      signUpId: 'sign_up_id',
      lastActiveSessionId: 'last_active_session_id',
      updatedAt: 'updated_at',
      createdAt: 'created_at',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Client$ {
  /** @deprecated use `Client$inboundSchema` instead. */
  export const inboundSchema = Client$inboundSchema;
  /** @deprecated use `Client$outboundSchema` instead. */
  export const outboundSchema = Client$outboundSchema;
  /** @deprecated use `Client$Outbound` instead. */
  export type Outbound = Client$Outbound;
}

export function clientToJSON(client: Client): string {
  return JSON.stringify(Client$outboundSchema.parse(client));
}

export function clientFromJSON(jsonString: string): SafeParseResult<Client, SDKValidationError> {
  return safeParse(jsonString, x => Client$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Client' from JSON`);
}
