/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';
import {
  Organization,
  Organization$inboundSchema,
  Organization$Outbound,
  Organization$outboundSchema,
} from './organization.js';

/**
 * A list of organizations
 */
export type Organizations = {
  data: Array<Organization>;
  /**
   * Total number of organizations
   *
   * @remarks
   */
  totalCount: number;
};

/** @internal */
export const Organizations$inboundSchema: z.ZodType<Organizations, z.ZodTypeDef, unknown> = z
  .object({
    data: z.array(Organization$inboundSchema),
    total_count: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      total_count: 'totalCount',
    });
  });

/** @internal */
export type Organizations$Outbound = {
  data: Array<Organization$Outbound>;
  total_count: number;
};

/** @internal */
export const Organizations$outboundSchema: z.ZodType<Organizations$Outbound, z.ZodTypeDef, Organizations> = z
  .object({
    data: z.array(Organization$outboundSchema),
    totalCount: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      totalCount: 'total_count',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Organizations$ {
  /** @deprecated use `Organizations$inboundSchema` instead. */
  export const inboundSchema = Organizations$inboundSchema;
  /** @deprecated use `Organizations$outboundSchema` instead. */
  export const outboundSchema = Organizations$outboundSchema;
  /** @deprecated use `Organizations$Outbound` instead. */
  export type Outbound = Organizations$Outbound;
}

export function organizationsToJSON(organizations: Organizations): string {
  return JSON.stringify(Organizations$outboundSchema.parse(organizations));
}

export function organizationsFromJSON(jsonString: string): SafeParseResult<Organizations, SDKValidationError> {
  return safeParse(
    jsonString,
    x => Organizations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Organizations' from JSON`,
  );
}
