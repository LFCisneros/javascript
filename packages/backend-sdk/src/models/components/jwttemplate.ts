/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export const JWTTemplateObject = {
  JwtTemplate: 'jwt_template',
} as const;
export type JWTTemplateObject = ClosedEnum<typeof JWTTemplateObject>;

export type Claims = {};

/**
 * List of JWT templates
 */
export type JWTTemplate = {
  object: JWTTemplateObject;
  id: string;
  name: string;
  claims: Claims;
  lifetime: number;
  allowedClockSkew: number;
  customSigningKey: boolean;
  signingAlgorithm: string;
  /**
   * Unix timestamp of creation.
   *
   * @remarks
   */
  createdAt: number;
  /**
   * Unix timestamp of last update.
   *
   * @remarks
   */
  updatedAt: number;
};

/** @internal */
export const JWTTemplateObject$inboundSchema: z.ZodNativeEnum<typeof JWTTemplateObject> =
  z.nativeEnum(JWTTemplateObject);

/** @internal */
export const JWTTemplateObject$outboundSchema: z.ZodNativeEnum<typeof JWTTemplateObject> =
  JWTTemplateObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JWTTemplateObject$ {
  /** @deprecated use `JWTTemplateObject$inboundSchema` instead. */
  export const inboundSchema = JWTTemplateObject$inboundSchema;
  /** @deprecated use `JWTTemplateObject$outboundSchema` instead. */
  export const outboundSchema = JWTTemplateObject$outboundSchema;
}

/** @internal */
export const Claims$inboundSchema: z.ZodType<Claims, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type Claims$Outbound = {};

/** @internal */
export const Claims$outboundSchema: z.ZodType<Claims$Outbound, z.ZodTypeDef, Claims> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Claims$ {
  /** @deprecated use `Claims$inboundSchema` instead. */
  export const inboundSchema = Claims$inboundSchema;
  /** @deprecated use `Claims$outboundSchema` instead. */
  export const outboundSchema = Claims$outboundSchema;
  /** @deprecated use `Claims$Outbound` instead. */
  export type Outbound = Claims$Outbound;
}

export function claimsToJSON(claims: Claims): string {
  return JSON.stringify(Claims$outboundSchema.parse(claims));
}

export function claimsFromJSON(jsonString: string): SafeParseResult<Claims, SDKValidationError> {
  return safeParse(jsonString, x => Claims$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Claims' from JSON`);
}

/** @internal */
export const JWTTemplate$inboundSchema: z.ZodType<JWTTemplate, z.ZodTypeDef, unknown> = z
  .object({
    object: JWTTemplateObject$inboundSchema,
    id: z.string(),
    name: z.string(),
    claims: z.lazy(() => Claims$inboundSchema),
    lifetime: z.number().int(),
    allowed_clock_skew: z.number().int(),
    custom_signing_key: z.boolean(),
    signing_algorithm: z.string(),
    created_at: z.number().int(),
    updated_at: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      allowed_clock_skew: 'allowedClockSkew',
      custom_signing_key: 'customSigningKey',
      signing_algorithm: 'signingAlgorithm',
      created_at: 'createdAt',
      updated_at: 'updatedAt',
    });
  });

/** @internal */
export type JWTTemplate$Outbound = {
  object: string;
  id: string;
  name: string;
  claims: Claims$Outbound;
  lifetime: number;
  allowed_clock_skew: number;
  custom_signing_key: boolean;
  signing_algorithm: string;
  created_at: number;
  updated_at: number;
};

/** @internal */
export const JWTTemplate$outboundSchema: z.ZodType<JWTTemplate$Outbound, z.ZodTypeDef, JWTTemplate> = z
  .object({
    object: JWTTemplateObject$outboundSchema,
    id: z.string(),
    name: z.string(),
    claims: z.lazy(() => Claims$outboundSchema),
    lifetime: z.number().int(),
    allowedClockSkew: z.number().int(),
    customSigningKey: z.boolean(),
    signingAlgorithm: z.string(),
    createdAt: z.number().int(),
    updatedAt: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      allowedClockSkew: 'allowed_clock_skew',
      customSigningKey: 'custom_signing_key',
      signingAlgorithm: 'signing_algorithm',
      createdAt: 'created_at',
      updatedAt: 'updated_at',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JWTTemplate$ {
  /** @deprecated use `JWTTemplate$inboundSchema` instead. */
  export const inboundSchema = JWTTemplate$inboundSchema;
  /** @deprecated use `JWTTemplate$outboundSchema` instead. */
  export const outboundSchema = JWTTemplate$outboundSchema;
  /** @deprecated use `JWTTemplate$Outbound` instead. */
  export type Outbound = JWTTemplate$Outbound;
}

export function jwtTemplateToJSON(jwtTemplate: JWTTemplate): string {
  return JSON.stringify(JWTTemplate$outboundSchema.parse(jwtTemplate));
}

export function jwtTemplateFromJSON(jsonString: string): SafeParseResult<JWTTemplate, SDKValidationError> {
  return safeParse(
    jsonString,
    x => JWTTemplate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JWTTemplate' from JSON`,
  );
}
