/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * String representing the object's type. Objects of the same type share the same value.
 */
export const InstanceObject = {
  Instance: "instance",
} as const;
/**
 * String representing the object's type. Objects of the same type share the same value.
 */
export type InstanceObject = ClosedEnum<typeof InstanceObject>;

/**
 * Success
 */
export type Instance = {
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: InstanceObject;
  id: string;
  environmentType: string;
  allowedOrigins: Array<string> | null;
};

/** @internal */
export const InstanceObject$inboundSchema: z.ZodNativeEnum<
  typeof InstanceObject
> = z.nativeEnum(InstanceObject);

/** @internal */
export const InstanceObject$outboundSchema: z.ZodNativeEnum<
  typeof InstanceObject
> = InstanceObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstanceObject$ {
  /** @deprecated use `InstanceObject$inboundSchema` instead. */
  export const inboundSchema = InstanceObject$inboundSchema;
  /** @deprecated use `InstanceObject$outboundSchema` instead. */
  export const outboundSchema = InstanceObject$outboundSchema;
}

/** @internal */
export const Instance$inboundSchema: z.ZodType<
  Instance,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: InstanceObject$inboundSchema,
  id: z.string(),
  environment_type: z.string(),
  allowed_origins: z.nullable(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "environment_type": "environmentType",
    "allowed_origins": "allowedOrigins",
  });
});

/** @internal */
export type Instance$Outbound = {
  object: string;
  id: string;
  environment_type: string;
  allowed_origins: Array<string> | null;
};

/** @internal */
export const Instance$outboundSchema: z.ZodType<
  Instance$Outbound,
  z.ZodTypeDef,
  Instance
> = z.object({
  object: InstanceObject$outboundSchema,
  id: z.string(),
  environmentType: z.string(),
  allowedOrigins: z.nullable(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    environmentType: "environment_type",
    allowedOrigins: "allowed_origins",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Instance$ {
  /** @deprecated use `Instance$inboundSchema` instead. */
  export const inboundSchema = Instance$inboundSchema;
  /** @deprecated use `Instance$outboundSchema` instead. */
  export const outboundSchema = Instance$outboundSchema;
  /** @deprecated use `Instance$Outbound` instead. */
  export type Outbound = Instance$Outbound;
}

export function instanceToJSON(instance: Instance): string {
  return JSON.stringify(Instance$outboundSchema.parse(instance));
}

export function instanceFromJSON(
  jsonString: string,
): SafeParseResult<Instance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Instance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Instance' from JSON`,
  );
}
