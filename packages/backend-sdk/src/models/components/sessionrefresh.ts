/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Cookies,
  Cookies$inboundSchema,
  Cookies$Outbound,
  Cookies$outboundSchema,
} from "./cookies.js";
import {
  Token,
  Token$inboundSchema,
  Token$Outbound,
  Token$outboundSchema,
} from "./token.js";

/**
 * Success
 */
export type SessionRefresh = Token | Cookies;

/** @internal */
export const SessionRefresh$inboundSchema: z.ZodType<
  SessionRefresh,
  z.ZodTypeDef,
  unknown
> = z.union([Token$inboundSchema, Cookies$inboundSchema]);

/** @internal */
export type SessionRefresh$Outbound = Token$Outbound | Cookies$Outbound;

/** @internal */
export const SessionRefresh$outboundSchema: z.ZodType<
  SessionRefresh$Outbound,
  z.ZodTypeDef,
  SessionRefresh
> = z.union([Token$outboundSchema, Cookies$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionRefresh$ {
  /** @deprecated use `SessionRefresh$inboundSchema` instead. */
  export const inboundSchema = SessionRefresh$inboundSchema;
  /** @deprecated use `SessionRefresh$outboundSchema` instead. */
  export const outboundSchema = SessionRefresh$outboundSchema;
  /** @deprecated use `SessionRefresh$Outbound` instead. */
  export type Outbound = SessionRefresh$Outbound;
}

export function sessionRefreshToJSON(sessionRefresh: SessionRefresh): string {
  return JSON.stringify(SessionRefresh$outboundSchema.parse(sessionRefresh));
}

export function sessionRefreshFromJSON(
  jsonString: string,
): SafeParseResult<SessionRefresh, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SessionRefresh$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionRefresh' from JSON`,
  );
}
