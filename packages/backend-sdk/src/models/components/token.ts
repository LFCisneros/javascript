/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export const TokenObject = {
  Token: "token",
} as const;
/**
 * String representing the object's type. Objects of the same type share the same value.
 *
 * @remarks
 */
export type TokenObject = ClosedEnum<typeof TokenObject>;

export type Token = {
  /**
   * String representing the object's type. Objects of the same type share the same value.
   *
   * @remarks
   */
  object: TokenObject;
  /**
   * String representing the encoded jwt value.
   *
   * @remarks
   */
  jwt: string;
};

/** @internal */
export const TokenObject$inboundSchema: z.ZodNativeEnum<typeof TokenObject> = z
  .nativeEnum(TokenObject);

/** @internal */
export const TokenObject$outboundSchema: z.ZodNativeEnum<typeof TokenObject> =
  TokenObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenObject$ {
  /** @deprecated use `TokenObject$inboundSchema` instead. */
  export const inboundSchema = TokenObject$inboundSchema;
  /** @deprecated use `TokenObject$outboundSchema` instead. */
  export const outboundSchema = TokenObject$outboundSchema;
}

/** @internal */
export const Token$inboundSchema: z.ZodType<Token, z.ZodTypeDef, unknown> = z
  .object({
    object: TokenObject$inboundSchema,
    jwt: z.string(),
  });

/** @internal */
export type Token$Outbound = {
  object: string;
  jwt: string;
};

/** @internal */
export const Token$outboundSchema: z.ZodType<
  Token$Outbound,
  z.ZodTypeDef,
  Token
> = z.object({
  object: TokenObject$outboundSchema,
  jwt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Token$ {
  /** @deprecated use `Token$inboundSchema` instead. */
  export const inboundSchema = Token$inboundSchema;
  /** @deprecated use `Token$outboundSchema` instead. */
  export const outboundSchema = Token$outboundSchema;
  /** @deprecated use `Token$Outbound` instead. */
  export type Outbound = Token$Outbound;
}

export function tokenToJSON(token: Token): string {
  return JSON.stringify(Token$outboundSchema.parse(token));
}

export function tokenFromJSON(
  jsonString: string,
): SafeParseResult<Token, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Token$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Token' from JSON`,
  );
}
