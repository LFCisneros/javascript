/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';
import { Domain, Domain$inboundSchema, Domain$Outbound, Domain$outboundSchema } from './domain.js';

/**
 * A list of domains
 */
export type Domains = {
  data: Array<Domain>;
  /**
   * Total number of domains
   *
   * @remarks
   */
  totalCount: number;
};

/** @internal */
export const Domains$inboundSchema: z.ZodType<Domains, z.ZodTypeDef, unknown> = z
  .object({
    data: z.array(Domain$inboundSchema),
    total_count: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      total_count: 'totalCount',
    });
  });

/** @internal */
export type Domains$Outbound = {
  data: Array<Domain$Outbound>;
  total_count: number;
};

/** @internal */
export const Domains$outboundSchema: z.ZodType<Domains$Outbound, z.ZodTypeDef, Domains> = z
  .object({
    data: z.array(Domain$outboundSchema),
    totalCount: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      totalCount: 'total_count',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Domains$ {
  /** @deprecated use `Domains$inboundSchema` instead. */
  export const inboundSchema = Domains$inboundSchema;
  /** @deprecated use `Domains$outboundSchema` instead. */
  export const outboundSchema = Domains$outboundSchema;
  /** @deprecated use `Domains$Outbound` instead. */
  export type Outbound = Domains$Outbound;
}

export function domainsToJSON(domains: Domains): string {
  return JSON.stringify(Domains$outboundSchema.parse(domains));
}

export function domainsFromJSON(jsonString: string): SafeParseResult<Domains, SDKValidationError> {
  return safeParse(jsonString, x => Domains$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Domains' from JSON`);
}
