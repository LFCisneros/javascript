/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const InvitationRevokedObject = {
  Invitation: "invitation",
} as const;
export type InvitationRevokedObject = ClosedEnum<
  typeof InvitationRevokedObject
>;

export const InvitationRevokedStatus = {
  Revoked: "revoked",
} as const;
export type InvitationRevokedStatus = ClosedEnum<
  typeof InvitationRevokedStatus
>;

/**
 * Success
 */
export type InvitationRevoked = {
  object: InvitationRevokedObject;
  id: string;
  emailAddress: string;
  publicMetadata: { [k: string]: any };
  revoked?: boolean | undefined;
  status: InvitationRevokedStatus;
  url?: string | undefined;
  /**
   * Unix timestamp of expiration.
   *
   * @remarks
   */
  expiresAt?: number | null | undefined;
  /**
   * Unix timestamp of creation.
   *
   * @remarks
   */
  createdAt: number;
  /**
   * Unix timestamp of last update.
   *
   * @remarks
   */
  updatedAt: number;
};

/** @internal */
export const InvitationRevokedObject$inboundSchema: z.ZodNativeEnum<
  typeof InvitationRevokedObject
> = z.nativeEnum(InvitationRevokedObject);

/** @internal */
export const InvitationRevokedObject$outboundSchema: z.ZodNativeEnum<
  typeof InvitationRevokedObject
> = InvitationRevokedObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvitationRevokedObject$ {
  /** @deprecated use `InvitationRevokedObject$inboundSchema` instead. */
  export const inboundSchema = InvitationRevokedObject$inboundSchema;
  /** @deprecated use `InvitationRevokedObject$outboundSchema` instead. */
  export const outboundSchema = InvitationRevokedObject$outboundSchema;
}

/** @internal */
export const InvitationRevokedStatus$inboundSchema: z.ZodNativeEnum<
  typeof InvitationRevokedStatus
> = z.nativeEnum(InvitationRevokedStatus);

/** @internal */
export const InvitationRevokedStatus$outboundSchema: z.ZodNativeEnum<
  typeof InvitationRevokedStatus
> = InvitationRevokedStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvitationRevokedStatus$ {
  /** @deprecated use `InvitationRevokedStatus$inboundSchema` instead. */
  export const inboundSchema = InvitationRevokedStatus$inboundSchema;
  /** @deprecated use `InvitationRevokedStatus$outboundSchema` instead. */
  export const outboundSchema = InvitationRevokedStatus$outboundSchema;
}

/** @internal */
export const InvitationRevoked$inboundSchema: z.ZodType<
  InvitationRevoked,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: InvitationRevokedObject$inboundSchema,
  id: z.string(),
  email_address: z.string(),
  public_metadata: z.record(z.any()),
  revoked: z.boolean().optional(),
  status: InvitationRevokedStatus$inboundSchema,
  url: z.string().optional(),
  expires_at: z.nullable(z.number().int()).optional(),
  created_at: z.number().int(),
  updated_at: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "email_address": "emailAddress",
    "public_metadata": "publicMetadata",
    "expires_at": "expiresAt",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type InvitationRevoked$Outbound = {
  object: string;
  id: string;
  email_address: string;
  public_metadata: { [k: string]: any };
  revoked?: boolean | undefined;
  status: string;
  url?: string | undefined;
  expires_at?: number | null | undefined;
  created_at: number;
  updated_at: number;
};

/** @internal */
export const InvitationRevoked$outboundSchema: z.ZodType<
  InvitationRevoked$Outbound,
  z.ZodTypeDef,
  InvitationRevoked
> = z.object({
  object: InvitationRevokedObject$outboundSchema,
  id: z.string(),
  emailAddress: z.string(),
  publicMetadata: z.record(z.any()),
  revoked: z.boolean().optional(),
  status: InvitationRevokedStatus$outboundSchema,
  url: z.string().optional(),
  expiresAt: z.nullable(z.number().int()).optional(),
  createdAt: z.number().int(),
  updatedAt: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    emailAddress: "email_address",
    publicMetadata: "public_metadata",
    expiresAt: "expires_at",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvitationRevoked$ {
  /** @deprecated use `InvitationRevoked$inboundSchema` instead. */
  export const inboundSchema = InvitationRevoked$inboundSchema;
  /** @deprecated use `InvitationRevoked$outboundSchema` instead. */
  export const outboundSchema = InvitationRevoked$outboundSchema;
  /** @deprecated use `InvitationRevoked$Outbound` instead. */
  export type Outbound = InvitationRevoked$Outbound;
}

export function invitationRevokedToJSON(
  invitationRevoked: InvitationRevoked,
): string {
  return JSON.stringify(
    InvitationRevoked$outboundSchema.parse(invitationRevoked),
  );
}

export function invitationRevokedFromJSON(
  jsonString: string,
): SafeParseResult<InvitationRevoked, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvitationRevoked$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvitationRevoked' from JSON`,
  );
}
