/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const TestingTokenObject = {
  TestingToken: "testing_token",
} as const;
export type TestingTokenObject = ClosedEnum<typeof TestingTokenObject>;

/**
 * A Testing Token
 */
export type TestingToken = {
  object: TestingTokenObject;
  /**
   * The actual token. This value is meant to be passed in the `__clerk_testing_token` query parameter with requests to the Frontend API.
   */
  token: string;
  /**
   * Unix timestamp of the token's expiration time.
   *
   * @remarks
   */
  expiresAt: number;
};

/** @internal */
export const TestingTokenObject$inboundSchema: z.ZodNativeEnum<
  typeof TestingTokenObject
> = z.nativeEnum(TestingTokenObject);

/** @internal */
export const TestingTokenObject$outboundSchema: z.ZodNativeEnum<
  typeof TestingTokenObject
> = TestingTokenObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestingTokenObject$ {
  /** @deprecated use `TestingTokenObject$inboundSchema` instead. */
  export const inboundSchema = TestingTokenObject$inboundSchema;
  /** @deprecated use `TestingTokenObject$outboundSchema` instead. */
  export const outboundSchema = TestingTokenObject$outboundSchema;
}

/** @internal */
export const TestingToken$inboundSchema: z.ZodType<
  TestingToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: TestingTokenObject$inboundSchema,
  token: z.string(),
  expires_at: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "expires_at": "expiresAt",
  });
});

/** @internal */
export type TestingToken$Outbound = {
  object: string;
  token: string;
  expires_at: number;
};

/** @internal */
export const TestingToken$outboundSchema: z.ZodType<
  TestingToken$Outbound,
  z.ZodTypeDef,
  TestingToken
> = z.object({
  object: TestingTokenObject$outboundSchema,
  token: z.string(),
  expiresAt: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    expiresAt: "expires_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestingToken$ {
  /** @deprecated use `TestingToken$inboundSchema` instead. */
  export const inboundSchema = TestingToken$inboundSchema;
  /** @deprecated use `TestingToken$outboundSchema` instead. */
  export const outboundSchema = TestingToken$outboundSchema;
  /** @deprecated use `TestingToken$Outbound` instead. */
  export type Outbound = TestingToken$Outbound;
}

export function testingTokenToJSON(testingToken: TestingToken): string {
  return JSON.stringify(TestingToken$outboundSchema.parse(testingToken));
}

export function testingTokenFromJSON(
  jsonString: string,
): SafeParseResult<TestingToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestingToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestingToken' from JSON`,
  );
}
