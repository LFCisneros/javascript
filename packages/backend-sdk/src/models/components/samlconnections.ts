/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SchemasSAMLConnection,
  SchemasSAMLConnection$inboundSchema,
  SchemasSAMLConnection$Outbound,
  SchemasSAMLConnection$outboundSchema,
} from "./schemassamlconnection.js";

/**
 * A list of SAML Connections
 */
export type SAMLConnections = {
  data: Array<SchemasSAMLConnection>;
  /**
   * Total number of SAML Connections
   *
   * @remarks
   */
  totalCount: number;
};

/** @internal */
export const SAMLConnections$inboundSchema: z.ZodType<
  SAMLConnections,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(SchemasSAMLConnection$inboundSchema),
  total_count: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "total_count": "totalCount",
  });
});

/** @internal */
export type SAMLConnections$Outbound = {
  data: Array<SchemasSAMLConnection$Outbound>;
  total_count: number;
};

/** @internal */
export const SAMLConnections$outboundSchema: z.ZodType<
  SAMLConnections$Outbound,
  z.ZodTypeDef,
  SAMLConnections
> = z.object({
  data: z.array(SchemasSAMLConnection$outboundSchema),
  totalCount: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    totalCount: "total_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SAMLConnections$ {
  /** @deprecated use `SAMLConnections$inboundSchema` instead. */
  export const inboundSchema = SAMLConnections$inboundSchema;
  /** @deprecated use `SAMLConnections$outboundSchema` instead. */
  export const outboundSchema = SAMLConnections$outboundSchema;
  /** @deprecated use `SAMLConnections$Outbound` instead. */
  export type Outbound = SAMLConnections$Outbound;
}

export function samlConnectionsToJSON(
  samlConnections: SAMLConnections,
): string {
  return JSON.stringify(SAMLConnections$outboundSchema.parse(samlConnections));
}

export function samlConnectionsFromJSON(
  jsonString: string,
): SafeParseResult<SAMLConnections, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SAMLConnections$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SAMLConnections' from JSON`,
  );
}
