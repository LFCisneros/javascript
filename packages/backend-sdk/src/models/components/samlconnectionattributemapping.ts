/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export type SAMLConnectionAttributeMapping = {
  userId: string;
  emailAddress: string;
  firstName: string;
  lastName: string;
};

/** @internal */
export const SAMLConnectionAttributeMapping$inboundSchema: z.ZodType<
  SAMLConnectionAttributeMapping,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    user_id: z.string(),
    email_address: z.string(),
    first_name: z.string(),
    last_name: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      user_id: 'userId',
      email_address: 'emailAddress',
      first_name: 'firstName',
      last_name: 'lastName',
    });
  });

/** @internal */
export type SAMLConnectionAttributeMapping$Outbound = {
  user_id: string;
  email_address: string;
  first_name: string;
  last_name: string;
};

/** @internal */
export const SAMLConnectionAttributeMapping$outboundSchema: z.ZodType<
  SAMLConnectionAttributeMapping$Outbound,
  z.ZodTypeDef,
  SAMLConnectionAttributeMapping
> = z
  .object({
    userId: z.string(),
    emailAddress: z.string(),
    firstName: z.string(),
    lastName: z.string(),
  })
  .transform(v => {
    return remap$(v, {
      userId: 'user_id',
      emailAddress: 'email_address',
      firstName: 'first_name',
      lastName: 'last_name',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SAMLConnectionAttributeMapping$ {
  /** @deprecated use `SAMLConnectionAttributeMapping$inboundSchema` instead. */
  export const inboundSchema = SAMLConnectionAttributeMapping$inboundSchema;
  /** @deprecated use `SAMLConnectionAttributeMapping$outboundSchema` instead. */
  export const outboundSchema = SAMLConnectionAttributeMapping$outboundSchema;
  /** @deprecated use `SAMLConnectionAttributeMapping$Outbound` instead. */
  export type Outbound = SAMLConnectionAttributeMapping$Outbound;
}

export function samlConnectionAttributeMappingToJSON(
  samlConnectionAttributeMapping: SAMLConnectionAttributeMapping,
): string {
  return JSON.stringify(SAMLConnectionAttributeMapping$outboundSchema.parse(samlConnectionAttributeMapping));
}

export function samlConnectionAttributeMappingFromJSON(
  jsonString: string,
): SafeParseResult<SAMLConnectionAttributeMapping, SDKValidationError> {
  return safeParse(
    jsonString,
    x => SAMLConnectionAttributeMapping$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SAMLConnectionAttributeMapping' from JSON`,
  );
}
