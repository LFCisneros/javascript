/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';
import {
  OAuthApplication,
  OAuthApplication$inboundSchema,
  OAuthApplication$Outbound,
  OAuthApplication$outboundSchema,
} from './oauthapplication.js';

/**
 * A list of OAuth applications
 */
export type OAuthApplications = {
  data: Array<OAuthApplication>;
  /**
   * Total number of OAuth applications
   *
   * @remarks
   */
  totalCount: number;
};

/** @internal */
export const OAuthApplications$inboundSchema: z.ZodType<OAuthApplications, z.ZodTypeDef, unknown> = z
  .object({
    data: z.array(OAuthApplication$inboundSchema),
    total_count: z.number().int(),
  })
  .transform(v => {
    return remap$(v, {
      total_count: 'totalCount',
    });
  });

/** @internal */
export type OAuthApplications$Outbound = {
  data: Array<OAuthApplication$Outbound>;
  total_count: number;
};

/** @internal */
export const OAuthApplications$outboundSchema: z.ZodType<OAuthApplications$Outbound, z.ZodTypeDef, OAuthApplications> =
  z
    .object({
      data: z.array(OAuthApplication$outboundSchema),
      totalCount: z.number().int(),
    })
    .transform(v => {
      return remap$(v, {
        totalCount: 'total_count',
      });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OAuthApplications$ {
  /** @deprecated use `OAuthApplications$inboundSchema` instead. */
  export const inboundSchema = OAuthApplications$inboundSchema;
  /** @deprecated use `OAuthApplications$outboundSchema` instead. */
  export const outboundSchema = OAuthApplications$outboundSchema;
  /** @deprecated use `OAuthApplications$Outbound` instead. */
  export type Outbound = OAuthApplications$Outbound;
}

export function oAuthApplicationsToJSON(oAuthApplications: OAuthApplications): string {
  return JSON.stringify(OAuthApplications$outboundSchema.parse(oAuthApplications));
}

export function oAuthApplicationsFromJSON(jsonString: string): SafeParseResult<OAuthApplications, SDKValidationError> {
  return safeParse(
    jsonString,
    x => OAuthApplications$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OAuthApplications' from JSON`,
  );
}
