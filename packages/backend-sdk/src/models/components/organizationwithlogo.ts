/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { ClosedEnum } from '../../types/enums.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import { SDKValidationError } from '../errors/sdkvalidationerror.js';

export const OrganizationWithLogoObject = {
  Organization: 'organization',
} as const;
export type OrganizationWithLogoObject = ClosedEnum<typeof OrganizationWithLogoObject>;

export type OrganizationWithLogo = {
  object: OrganizationWithLogoObject;
  id: string;
  name: string;
  slug: string;
  membersCount?: number | undefined;
  missingMemberWithElevatedPermissions?: boolean | undefined;
  pendingInvitationsCount?: number | undefined;
  maxAllowedMemberships: number;
  adminDeleteEnabled: boolean;
  publicMetadata: { [k: string]: any };
  privateMetadata: { [k: string]: any };
  createdBy?: string | undefined;
  /**
   * Unix timestamp of creation.
   *
   * @remarks
   */
  createdAt: number;
  /**
   * Unix timestamp of last update.
   *
   * @remarks
   */
  updatedAt: number;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  logoUrl?: string | undefined;
  imageUrl: string;
  hasImage: boolean;
};

/** @internal */
export const OrganizationWithLogoObject$inboundSchema: z.ZodNativeEnum<typeof OrganizationWithLogoObject> =
  z.nativeEnum(OrganizationWithLogoObject);

/** @internal */
export const OrganizationWithLogoObject$outboundSchema: z.ZodNativeEnum<typeof OrganizationWithLogoObject> =
  OrganizationWithLogoObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationWithLogoObject$ {
  /** @deprecated use `OrganizationWithLogoObject$inboundSchema` instead. */
  export const inboundSchema = OrganizationWithLogoObject$inboundSchema;
  /** @deprecated use `OrganizationWithLogoObject$outboundSchema` instead. */
  export const outboundSchema = OrganizationWithLogoObject$outboundSchema;
}

/** @internal */
export const OrganizationWithLogo$inboundSchema: z.ZodType<OrganizationWithLogo, z.ZodTypeDef, unknown> = z
  .object({
    object: OrganizationWithLogoObject$inboundSchema,
    id: z.string(),
    name: z.string(),
    slug: z.string(),
    members_count: z.number().int().optional(),
    missing_member_with_elevated_permissions: z.boolean().optional(),
    pending_invitations_count: z.number().int().optional(),
    max_allowed_memberships: z.number().int(),
    admin_delete_enabled: z.boolean(),
    public_metadata: z.record(z.any()),
    private_metadata: z.record(z.any()),
    created_by: z.string().optional(),
    created_at: z.number().int(),
    updated_at: z.number().int(),
    logo_url: z.string().optional(),
    image_url: z.string(),
    has_image: z.boolean(),
  })
  .transform(v => {
    return remap$(v, {
      members_count: 'membersCount',
      missing_member_with_elevated_permissions: 'missingMemberWithElevatedPermissions',
      pending_invitations_count: 'pendingInvitationsCount',
      max_allowed_memberships: 'maxAllowedMemberships',
      admin_delete_enabled: 'adminDeleteEnabled',
      public_metadata: 'publicMetadata',
      private_metadata: 'privateMetadata',
      created_by: 'createdBy',
      created_at: 'createdAt',
      updated_at: 'updatedAt',
      logo_url: 'logoUrl',
      image_url: 'imageUrl',
      has_image: 'hasImage',
    });
  });

/** @internal */
export type OrganizationWithLogo$Outbound = {
  object: string;
  id: string;
  name: string;
  slug: string;
  members_count?: number | undefined;
  missing_member_with_elevated_permissions?: boolean | undefined;
  pending_invitations_count?: number | undefined;
  max_allowed_memberships: number;
  admin_delete_enabled: boolean;
  public_metadata: { [k: string]: any };
  private_metadata: { [k: string]: any };
  created_by?: string | undefined;
  created_at: number;
  updated_at: number;
  logo_url?: string | undefined;
  image_url: string;
  has_image: boolean;
};

/** @internal */
export const OrganizationWithLogo$outboundSchema: z.ZodType<
  OrganizationWithLogo$Outbound,
  z.ZodTypeDef,
  OrganizationWithLogo
> = z
  .object({
    object: OrganizationWithLogoObject$outboundSchema,
    id: z.string(),
    name: z.string(),
    slug: z.string(),
    membersCount: z.number().int().optional(),
    missingMemberWithElevatedPermissions: z.boolean().optional(),
    pendingInvitationsCount: z.number().int().optional(),
    maxAllowedMemberships: z.number().int(),
    adminDeleteEnabled: z.boolean(),
    publicMetadata: z.record(z.any()),
    privateMetadata: z.record(z.any()),
    createdBy: z.string().optional(),
    createdAt: z.number().int(),
    updatedAt: z.number().int(),
    logoUrl: z.string().optional(),
    imageUrl: z.string(),
    hasImage: z.boolean(),
  })
  .transform(v => {
    return remap$(v, {
      membersCount: 'members_count',
      missingMemberWithElevatedPermissions: 'missing_member_with_elevated_permissions',
      pendingInvitationsCount: 'pending_invitations_count',
      maxAllowedMemberships: 'max_allowed_memberships',
      adminDeleteEnabled: 'admin_delete_enabled',
      publicMetadata: 'public_metadata',
      privateMetadata: 'private_metadata',
      createdBy: 'created_by',
      createdAt: 'created_at',
      updatedAt: 'updated_at',
      logoUrl: 'logo_url',
      imageUrl: 'image_url',
      hasImage: 'has_image',
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationWithLogo$ {
  /** @deprecated use `OrganizationWithLogo$inboundSchema` instead. */
  export const inboundSchema = OrganizationWithLogo$inboundSchema;
  /** @deprecated use `OrganizationWithLogo$outboundSchema` instead. */
  export const outboundSchema = OrganizationWithLogo$outboundSchema;
  /** @deprecated use `OrganizationWithLogo$Outbound` instead. */
  export type Outbound = OrganizationWithLogo$Outbound;
}

export function organizationWithLogoToJSON(organizationWithLogo: OrganizationWithLogo): string {
  return JSON.stringify(OrganizationWithLogo$outboundSchema.parse(organizationWithLogo));
}

export function organizationWithLogoFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationWithLogo, SDKValidationError> {
  return safeParse(
    jsonString,
    x => OrganizationWithLogo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationWithLogo' from JSON`,
  );
}
