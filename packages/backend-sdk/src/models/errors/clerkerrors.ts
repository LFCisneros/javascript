/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from 'zod';
import { remap as remap$ } from '../../lib/primitives.js';
import { safeParse } from '../../lib/schemas.js';
import { Result as SafeParseResult } from '../../types/fp.js';
import * as components from '../components/index.js';
import { SDKValidationError } from './sdkvalidationerror.js';

export type Meta = {};

/**
 * Request was not successful
 */
export type ClerkErrorsData = {
  errors: Array<components.ClerkError>;
  meta?: Meta | undefined;
  clerkTraceId?: string | undefined;
};

/**
 * Request was not successful
 */
export class ClerkErrors extends Error {
  errors: Array<components.ClerkError>;
  meta?: Meta | undefined;
  clerkTraceId?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClerkErrorsData;

  constructor(err: ClerkErrorsData) {
    const message =
      'message' in err && typeof err.message === 'string' ? err.message : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.errors = err.errors;
    if (err.meta != null) this.meta = err.meta;
    if (err.clerkTraceId != null) this.clerkTraceId = err.clerkTraceId;

    this.name = 'ClerkErrors';
  }
}

/** @internal */
export const Meta$inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type Meta$Outbound = {};

/** @internal */
export const Meta$outboundSchema: z.ZodType<Meta$Outbound, z.ZodTypeDef, Meta> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Meta$ {
  /** @deprecated use `Meta$inboundSchema` instead. */
  export const inboundSchema = Meta$inboundSchema;
  /** @deprecated use `Meta$outboundSchema` instead. */
  export const outboundSchema = Meta$outboundSchema;
  /** @deprecated use `Meta$Outbound` instead. */
  export type Outbound = Meta$Outbound;
}

export function metaToJSON(meta: Meta): string {
  return JSON.stringify(Meta$outboundSchema.parse(meta));
}

export function metaFromJSON(jsonString: string): SafeParseResult<Meta, SDKValidationError> {
  return safeParse(jsonString, x => Meta$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Meta' from JSON`);
}

/** @internal */
export const ClerkErrors$inboundSchema: z.ZodType<ClerkErrors, z.ZodTypeDef, unknown> = z
  .object({
    errors: z.array(components.ClerkError$inboundSchema),
    meta: z.lazy(() => Meta$inboundSchema).optional(),
    clerk_trace_id: z.string().optional(),
  })
  .transform(v => {
    const remapped = remap$(v, {
      clerk_trace_id: 'clerkTraceId',
    });

    return new ClerkErrors(remapped);
  });

/** @internal */
export type ClerkErrors$Outbound = {
  errors: Array<components.ClerkError$Outbound>;
  meta?: Meta$Outbound | undefined;
  clerk_trace_id?: string | undefined;
};

/** @internal */
export const ClerkErrors$outboundSchema: z.ZodType<ClerkErrors$Outbound, z.ZodTypeDef, ClerkErrors> = z
  .instanceof(ClerkErrors)
  .transform(v => v.data$)
  .pipe(
    z
      .object({
        errors: z.array(components.ClerkError$outboundSchema),
        meta: z.lazy(() => Meta$outboundSchema).optional(),
        clerkTraceId: z.string().optional(),
      })
      .transform(v => {
        return remap$(v, {
          clerkTraceId: 'clerk_trace_id',
        });
      }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClerkErrors$ {
  /** @deprecated use `ClerkErrors$inboundSchema` instead. */
  export const inboundSchema = ClerkErrors$inboundSchema;
  /** @deprecated use `ClerkErrors$outboundSchema` instead. */
  export const outboundSchema = ClerkErrors$outboundSchema;
  /** @deprecated use `ClerkErrors$Outbound` instead. */
  export type Outbound = ClerkErrors$Outbound;
}
