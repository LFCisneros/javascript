/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { organizationInvitationsList } from '../../funcs/organizationInvitationsList.js';
import * as operations from '../../models/operations/index.js';
import { formatResult, ToolDefinition } from '../tools.js';

const args = {
  request: operations.ListOrganizationInvitationsRequest$inboundSchema,
};

export const tool$organizationInvitationsList: ToolDefinition<typeof args> = {
  name: 'organization-invitations-list',
  description: `Get a list of organization invitations

This request returns the list of organization invitations.
Results can be paginated using the optional \`limit\` and \`offset\` query parameters.
You can filter them by providing the 'status' query parameter, that accepts multiple values.
The organization invitations are ordered by descending creation date.
Most recent invitations will be returned first.
Any invitations created as a result of an Organization Domain are not included in the results.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await organizationInvitationsList(client, args.request, {
      fetchOptions: { signal: ctx.signal },
    }).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: 'text', text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
