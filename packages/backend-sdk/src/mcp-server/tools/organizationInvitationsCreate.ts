/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { organizationInvitationsCreate } from '../../funcs/organizationInvitationsCreate.js';
import * as operations from '../../models/operations/index.js';
import { formatResult, ToolDefinition } from '../tools.js';

const args = {
  request: operations.CreateOrganizationInvitationRequest$inboundSchema,
};

export const tool$organizationInvitationsCreate: ToolDefinition<typeof args> = {
  name: 'organization-invitations-create',
  description: `Create and send an organization invitation

Creates a new organization invitation and sends an email to the provided \`email_address\` with a link to accept the invitation and join the organization.
You can specify the \`role\` for the invited organization member.

New organization invitations get a "pending" status until they are revoked by an organization administrator or accepted by the invitee.

The request body supports passing an optional \`redirect_url\` parameter.
When the invited user clicks the link to accept the invitation, they will be redirected to the URL provided.
Use this parameter to implement a custom invitation acceptance flow.

You can specify the ID of the user that will send the invitation with the \`inviter_user_id\` parameter.
That user must be a member with administrator privileges in the organization.
Only "admin" members can create organization invitations.

You can optionally provide public and private metadata for the organization invitation.
The public metadata are visible by both the Frontend and the Backend whereas the private ones only by the Backend.
When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await organizationInvitationsCreate(client, args.request, {
      fetchOptions: { signal: ctx.signal },
    }).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: 'text', text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
