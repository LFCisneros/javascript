/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { usersGetOAuthAccessToken } from '../../funcs/usersGetOAuthAccessToken.js';
import * as operations from '../../models/operations/index.js';
import { formatResult, ToolDefinition } from '../tools.js';

const args = {
  request: operations.GetOAuthAccessTokenRequest$inboundSchema,
};

export const tool$usersGetOAuthAccessToken: ToolDefinition<typeof args> = {
  name: 'users-get-O-auth-access-token',
  description: `Retrieve the OAuth access token of a user

Fetch the corresponding OAuth access token for a user that has previously authenticated with a particular OAuth provider.
For OAuth 2.0, if the access token has expired and we have a corresponding refresh token, the access token will be refreshed transparently the new one will be returned.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await usersGetOAuthAccessToken(client, args.request, {
      fetchOptions: { signal: ctx.signal },
    }).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: 'text', text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
