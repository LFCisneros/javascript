/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { proxyChecksVerify } from '../../funcs/proxyChecksVerify.js';
import * as operations from '../../models/operations/index.js';
import { formatResult, ToolDefinition } from '../tools.js';

const args = {
  request: operations.VerifyDomainProxyRequestBody$inboundSchema.optional(),
};

export const tool$proxyChecksVerify: ToolDefinition<typeof args> = {
  name: 'proxy-checks-verify',
  description: `Verify the proxy configuration for your domain

This endpoint can be used to validate that a proxy-enabled domain is operational.
It tries to verify that the proxy URL provided in the parameters maps to a functional proxy that can reach the Clerk Frontend API.

You can use this endpoint before you set a proxy URL for a domain. This way you can ensure that switching to proxy-based
configuration will not lead to downtime for your instance.

The \`proxy_url\` parameter allows for testing proxy configurations for domains that don't have a proxy URL yet, or operate on
a different proxy URL than the one provided. It can also be used to re-validate a domain that is already configured to work with a proxy.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await proxyChecksVerify(client, args.request, {
      fetchOptions: { signal: ctx.signal },
    }).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: 'text', text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
