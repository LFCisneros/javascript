/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { usersUpdate } from '../../funcs/usersUpdate.js';
import * as operations from '../../models/operations/index.js';
import { formatResult, ToolDefinition } from '../tools.js';

const args = {
  request: operations.UpdateUserRequest$inboundSchema,
};

export const tool$usersUpdate: ToolDefinition<typeof args> = {
  name: 'users-update',
  description: `Update a user

Update a user's attributes.

You can set the user's primary contact identifiers (email address and phone numbers) by updating the \`primary_email_address_id\` and \`primary_phone_number_id\` attributes respectively.
Both IDs should correspond to verified identifications that belong to the user.

You can remove a user's username by setting the username attribute to null or the blank string "".
This is a destructive action; the identification will be deleted forever.
Usernames can be removed only if they are optional in your instance settings and there's at least one other identifier which can be used for authentication.

This endpoint allows changing a user's password. When passing the \`password\` parameter directly you have two further options.
You can ignore the password policy checks for your instance by setting the \`skip_password_checks\` parameter to \`true\`.
You can also choose to sign the user out of all their active sessions on any device once the password is updated. Just set \`sign_out_of_other_sessions\` to \`true\`.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await usersUpdate(client, args.request, {
      fetchOptions: { signal: ctx.signal },
    }).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: 'text', text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
